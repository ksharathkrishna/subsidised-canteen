@startuml

title __JDBC's Class Diagram__\n

  package  {
    package com.mysql.jdbc {
      class AbandonedConnectionCleanupThread {
          {static} - cleanupThreadExcecutorService : ExecutorService
          {static} ~ threadRef : Thread
          - AbandonedConnectionCleanupThread()
          + run()
          - checkContextClassLoaders()
          {static} - consistentClassLoaders()
          {static} + checkedShutdown()
          {static} + uncheckedShutdown()
          {static} - shutdown()
          {static} + shutdown()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class AssertionFailedException {
          {static} - serialVersionUID : long
          {static} + shouldNotHappen()
          + AssertionFailedException()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface AuthenticationPlugin {
          {abstract} + getProtocolPluginName()
          {abstract} + requiresConfidentiality()
          {abstract} + isReusable()
          {abstract} + setAuthenticationParameters()
          {abstract} + nextAuthenticationStep()
          {abstract} + reset()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface BalanceStrategy {
          {abstract} + pickConnection()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class BestResponseTimeBalanceStrategy {
          + BestResponseTimeBalanceStrategy()
          + destroy()
          + init()
          + pickConnection()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Blob {
          - binaryData : byte[]
          - isClosed : boolean
          - exceptionInterceptor : ExceptionInterceptor
          ~ Blob()
          ~ Blob()
          ~ Blob()
          - getBinaryData()
          + getBinaryStream()
          + getBytes()
          + length()
          + position()
          + position()
          - setBinaryData()
          + setBinaryStream()
          + setBytes()
          + setBytes()
          + streamClosed()
          + streamClosed()
          + truncate()
          + free()
          + getBinaryStream()
          - checkClosed()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class BlobFromLocator {
          - primaryKeyColumns : List<String>
          - primaryKeyValues : List<String>
          - creatorResultSet : ResultSetImpl
          - blobColumnName : String
          - tableName : String
          - numColsInResultSet : int
          - numPrimaryKeys : int
          - quotedId : String
          - exceptionInterceptor : ExceptionInterceptor
          ~ BlobFromLocator()
          - notEnoughInformationInQuery()
          + setBinaryStream()
          + getBinaryStream()
          + setBytes()
          + setBytes()
          + getBytes()
          + length()
          + position()
          + position()
          + truncate()
          ~ createGetBytesStatement()
          ~ getBytesInternal()
          + free()
          + getBinaryStream()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class LocatorInputStream {
          ~ currentPositionInBlob : long
          ~ length : long
          ~ pStmt : PreparedStatement
          ~ LocatorInputStream()
          ~ LocatorInputStream()
          + read()
          + read()
          + read()
          + close()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Buffer {
          {static} ~ MAX_BYTES_TO_DUMP : int
          {static} ~ NO_LENGTH_LIMIT : int
          {static} ~ NULL_LENGTH : long
          - bufLength : int
          - byteBuffer : byte[]
          - position : int
          # wasMultiPacket : boolean
          {static} + TYPE_ID_ERROR : short
          {static} + TYPE_ID_EOF : short
          {static} + TYPE_ID_AUTH_SWITCH : short
          {static} + TYPE_ID_LOCAL_INFILE : short
          {static} + TYPE_ID_OK : short
          + Buffer()
          ~ Buffer()
          ~ clear()
          ~ dump()
          ~ dump()
          ~ dumpClampedBytes()
          ~ dumpHeader()
          ~ dumpNBytes()
          ~ ensureCapacity()
          + fastSkipLenString()
          + fastSkipLenByteArray()
          # getBufferSource()
          + getBufLength()
          + getByteBuffer()
          ~ getBytes()
          ~ getBytes()
          ~ getCapacity()
          + getNioBuffer()
          + getPosition()
          ~ isEOFPacket()
          ~ isAuthMethodSwitchRequestPacket()
          ~ isOKPacket()
          ~ isResultSetOKPacket()
          ~ isRawPacket()
          ~ newReadLength()
          ~ readByte()
          ~ readByte()
          ~ readFieldLength()
          ~ readInt()
          ~ readIntAsLong()
          ~ readLenByteArray()
          ~ readLength()
          ~ readLong()
          ~ readLongInt()
          ~ readLongLong()
          ~ readnBytes()
          + readString()
          ~ readString()
          ~ readString()
          + setBufLength()
          + setByteBuffer()
          + setPosition()
          + setWasMultiPacket()
          + toString()
          + toSuperString()
          + wasMultiPacket()
          + writeByte()
          + writeBytesNoNull()
          ~ writeBytesNoNull()
          ~ writeDouble()
          ~ writeFieldLength()
          ~ writeFloat()
          ~ writeInt()
          ~ writeLenBytes()
          ~ writeLenString()
          ~ writeLong()
          ~ writeLongInt()
          ~ writeLongLong()
          ~ writeString()
          ~ writeString()
          ~ writeStringNoNull()
          ~ writeStringNoNull()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class BufferRow {
          - rowFromServer : Buffer
          - homePosition : int
          - preNullBitmaskHomePosition : int
          - lastRequestedIndex : int
          - lastRequestedPos : int
          - metadata : Field[]
          - isBinaryEncoded : boolean
          - isNull : boolean[]
          - openStreams : List<InputStream>
          + BufferRow()
          + closeOpenStreams()
          - findAndSeekToOffset()
          - findAndSeekToOffsetForBinaryEncoding()
          + getBinaryInputStream()
          + getColumnValue()
          + getInt()
          + getLong()
          + getNativeDouble()
          + getNativeFloat()
          + getNativeInt()
          + getNativeLong()
          + getNativeShort()
          + getNativeTimestamp()
          + getReader()
          + getString()
          + getTimeFast()
          + getTimestampFast()
          + isFloatingPointNumber()
          + isNull()
          + length()
          + setColumnValue()
          + setMetadata()
          - setupIsNullBitmask()
          + getDateFast()
          + getNativeDate()
          + getNativeDateTimeValue()
          + getNativeTime()
          + getBytesSize()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ByteArrayRow {
          ~ internalRowData : byte[][]
          + ByteArrayRow()
          + getColumnValue()
          + setColumnValue()
          + getString()
          + isNull()
          + isFloatingPointNumber()
          + length()
          + getInt()
          + getLong()
          + getTimestampFast()
          + getNativeDouble()
          + getNativeFloat()
          + getNativeInt()
          + getNativeLong()
          + getNativeShort()
          + getNativeTimestamp()
          + closeOpenStreams()
          + getBinaryInputStream()
          + getReader()
          + getTimeFast()
          + getDateFast()
          + getNativeDateTimeValue()
          + getNativeDate()
          + getNativeTime()
          + getBytesSize()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface CacheAdapter {
          {abstract} + get()
          {abstract} + put()
          {abstract} + invalidate()
          {abstract} + invalidateAll()
          {abstract} + invalidateAll()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface CacheAdapterFactory {
          {abstract} + getInstance()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class CachedResultSetMetaData {
          ~ columnNameToIndex : Map<String, Integer>
          ~ fields : Field[]
          ~ fullColumnNameToIndex : Map<String, Integer>
          ~ metadata : ResultSetMetaData
          + getColumnNameToIndex()
          + getFields()
          + getFullColumnNameToIndex()
          + getMetadata()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class CallableStatement {
          {static} # JDBC_4_CSTMT_2_ARGS_CTOR : Constructor<?>
          {static} # JDBC_4_CSTMT_4_ARGS_CTOR : Constructor<?>
          {static} - NOT_OUTPUT_PARAMETER_INDICATOR : int
          {static} - PARAMETER_NAMESPACE_PREFIX : String
          - callingStoredFunction : boolean
          - functionReturnValueResults : ResultSetInternalMethods
          - hasOutputParams : boolean
          - outputParameterResults : ResultSetInternalMethods
          # outputParamWasNull : boolean
          - parameterIndexToRsIndex : int[]
          - placeholderToParameterIndexMap : int[]
          {static} - mangleParameterName()
          + CallableStatement()
          {static} # getInstance()
          {static} # getInstance()
          - generateParameterMap()
          + CallableStatement()
          + addBatch()
          - checkIsOutputParam()
          - checkParameterIndexBounds()
          - checkStreamability()
          + clearParameters()
          - fakeParameterTypes()
          - determineParameterTypes()
          - convertGetProcedureColumnsToInternalDescriptors()
          + execute()
          + executeQuery()
          + executeUpdate()
          - extractProcedureName()
          # fixParameterName()
          + getArray()
          + getArray()
          + getBigDecimal()
          + getBigDecimal()
          + getBigDecimal()
          + getBlob()
          + getBlob()
          + getBoolean()
          + getBoolean()
          + getByte()
          + getByte()
          + getBytes()
          + getBytes()
          + getClob()
          + getClob()
          + getDate()
          + getDate()
          + getDate()
          + getDate()
          + getDouble()
          + getDouble()
          + getFloat()
          + getFloat()
          + getInt()
          + getInt()
          + getLong()
          + getLong()
          # getNamedParamIndex()
          + getObject()
          + getObject()
          + getObject()
          + getObject()
          + getObject()
          + getObject()
          # getOutputParameters()
          + getParameterMetaData()
          + getRef()
          + getRef()
          + getShort()
          + getShort()
          + getString()
          + getString()
          + getTime()
          + getTime()
          + getTime()
          + getTime()
          + getTimestamp()
          + getTimestamp()
          + getTimestamp()
          + getTimestamp()
          + getURL()
          + getURL()
          # mapOutputParameterIndexToRsIndex()
          + registerOutParameter()
          + registerOutParameter()
          + registerOutParameter()
          + registerOutParameter()
          + registerOutParameter()
          + registerOutParameter()
          - retrieveOutParams()
          + setAsciiStream()
          + setBigDecimal()
          + setBinaryStream()
          + setBoolean()
          + setByte()
          + setBytes()
          + setCharacterStream()
          + setDate()
          + setDate()
          + setDouble()
          + setFloat()
          - setInOutParamsOnServer()
          + setInt()
          + setLong()
          + setNull()
          + setNull()
          + setObject()
          + setObject()
          + setObject()
          - setOutParams()
          + setShort()
          + setString()
          + setTime()
          + setTime()
          + setTimestamp()
          + setTimestamp()
          + setURL()
          + wasNull()
          + executeBatch()
          # getParameterIndexOffset()
          + setAsciiStream()
          + setAsciiStream()
          + setBinaryStream()
          + setBinaryStream()
          + setBlob()
          + setBlob()
          + setBlob()
          + setCharacterStream()
          + setCharacterStream()
          + setClob()
          + setClob()
          + setClob()
          + setNCharacterStream()
          + setNCharacterStream()
          - checkReadOnlyProcedure()
          # checkReadOnlySafeStatement()
          - hasParametersView()
          + executeLargeUpdate()
          + executeLargeBatch()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class CallableStatementParam {
          ~ desiredJdbcType : int
          ~ index : int
          ~ inOutModifier : int
          ~ isIn : boolean
          ~ isOut : boolean
          ~ jdbcType : int
          ~ nullability : short
          ~ paramName : String
          ~ precision : int
          ~ scale : int
          ~ typeName : String
          ~ CallableStatementParam()
          # clone()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class CallableStatementParamInfo {
          ~ catalogInUse : String
          ~ isFunctionCall : boolean
          ~ nativeSql : String
          ~ numParameters : int
          ~ parameterList : List<CallableStatementParam>
          ~ parameterMap : Map<String, CallableStatementParam>
          ~ isReadOnlySafeProcedure : boolean
          ~ isReadOnlySafeChecked : boolean
          ~ CallableStatementParamInfo()
          ~ CallableStatementParamInfo()
          - addParametersFromDBMD()
          # checkBounds()
          # clone()
          ~ getParameter()
          ~ getParameter()
          + getParameterClassName()
          + getParameterCount()
          + getParameterMode()
          + getParameterType()
          + getParameterTypeName()
          + getPrecision()
          + getScale()
          + isNullable()
          + isSigned()
          ~ iterator()
          ~ numberOfParameters()
          + isWrapperFor()
          + unwrap()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class CharsetMapping {
          {static} + MAP_SIZE : int
          {static} + COLLATION_INDEX_TO_COLLATION_NAME : String[]
          {static} + COLLATION_INDEX_TO_CHARSET : MysqlCharset[]
          {static} + CHARSET_NAME_TO_CHARSET : Map<String, MysqlCharset>
          {static} + CHARSET_NAME_TO_COLLATION_INDEX : Map<String, Integer>
          {static} - JAVA_ENCODING_UC_TO_MYSQL_CHARSET : Map<String, List<MysqlCharset>>
          {static} - MULTIBYTE_ENCODINGS : Set<String>
          {static} - ERROR_MESSAGE_FILE_TO_MYSQL_CHARSET : Map<String, String>
          {static} - ESCAPE_ENCODINGS : Set<String>
          {static} + UTF8MB4_INDEXES : Set<Integer>
          {static} - MYSQL_CHARSET_NAME_armscii8 : String
          {static} - MYSQL_CHARSET_NAME_ascii : String
          {static} - MYSQL_CHARSET_NAME_big5 : String
          {static} - MYSQL_CHARSET_NAME_binary : String
          {static} - MYSQL_CHARSET_NAME_cp1250 : String
          {static} - MYSQL_CHARSET_NAME_cp1251 : String
          {static} - MYSQL_CHARSET_NAME_cp1256 : String
          {static} - MYSQL_CHARSET_NAME_cp1257 : String
          {static} - MYSQL_CHARSET_NAME_cp850 : String
          {static} - MYSQL_CHARSET_NAME_cp852 : String
          {static} - MYSQL_CHARSET_NAME_cp866 : String
          {static} - MYSQL_CHARSET_NAME_cp932 : String
          {static} - MYSQL_CHARSET_NAME_dec8 : String
          {static} - MYSQL_CHARSET_NAME_eucjpms : String
          {static} - MYSQL_CHARSET_NAME_euckr : String
          {static} - MYSQL_CHARSET_NAME_gb18030 : String
          {static} - MYSQL_CHARSET_NAME_gb2312 : String
          {static} - MYSQL_CHARSET_NAME_gbk : String
          {static} - MYSQL_CHARSET_NAME_geostd8 : String
          {static} - MYSQL_CHARSET_NAME_greek : String
          {static} - MYSQL_CHARSET_NAME_hebrew : String
          {static} - MYSQL_CHARSET_NAME_hp8 : String
          {static} - MYSQL_CHARSET_NAME_keybcs2 : String
          {static} - MYSQL_CHARSET_NAME_koi8r : String
          {static} - MYSQL_CHARSET_NAME_koi8u : String
          {static} - MYSQL_CHARSET_NAME_latin1 : String
          {static} - MYSQL_CHARSET_NAME_latin2 : String
          {static} - MYSQL_CHARSET_NAME_latin5 : String
          {static} - MYSQL_CHARSET_NAME_latin7 : String
          {static} - MYSQL_CHARSET_NAME_macce : String
          {static} - MYSQL_CHARSET_NAME_macroman : String
          {static} - MYSQL_CHARSET_NAME_sjis : String
          {static} - MYSQL_CHARSET_NAME_swe7 : String
          {static} - MYSQL_CHARSET_NAME_tis620 : String
          {static} - MYSQL_CHARSET_NAME_ucs2 : String
          {static} - MYSQL_CHARSET_NAME_ujis : String
          {static} - MYSQL_CHARSET_NAME_utf16 : String
          {static} - MYSQL_CHARSET_NAME_utf16le : String
          {static} - MYSQL_CHARSET_NAME_utf32 : String
          {static} - MYSQL_CHARSET_NAME_utf8 : String
          {static} - MYSQL_CHARSET_NAME_utf8mb4 : String
          {static} - MYSQL_4_0_CHARSET_NAME_cp1251cias : String
          {static} - MYSQL_4_0_CHARSET_NAME_cp1251csas : String
          {static} - MYSQL_4_0_CHARSET_NAME_croat : String
          {static} - MYSQL_4_0_CHARSET_NAME_czech : String
          {static} - MYSQL_4_0_CHARSET_NAME_danish : String
          {static} - MYSQL_4_0_CHARSET_NAME_dos : String
          {static} - MYSQL_4_0_CHARSET_NAME_estonia : String
          {static} - MYSQL_4_0_CHARSET_NAME_euc_kr : String
          {static} - MYSQL_4_0_CHARSET_NAME_german1 : String
          {static} - MYSQL_4_0_CHARSET_NAME_hungarian : String
          {static} - MYSQL_4_0_CHARSET_NAME_koi8_ru : String
          {static} - MYSQL_4_0_CHARSET_NAME_koi8_ukr : String
          {static} - MYSQL_4_0_CHARSET_NAME_latin1_de : String
          {static} - MYSQL_4_0_CHARSET_NAME_latvian : String
          {static} - MYSQL_4_0_CHARSET_NAME_latvian1 : String
          {static} - MYSQL_4_0_CHARSET_NAME_usa7 : String
          {static} - MYSQL_4_0_CHARSET_NAME_win1250 : String
          {static} - MYSQL_4_0_CHARSET_NAME_win1251 : String
          {static} - MYSQL_4_0_CHARSET_NAME_win1251ukr : String
          {static} + NOT_USED : String
          {static} + COLLATION_NOT_DEFINED : String
          {static} + MYSQL_COLLATION_INDEX_utf8 : int
          {static} + MYSQL_COLLATION_INDEX_binary : int
          {static} - numberOfEncodingsConfigured : int
          {static} + getMysqlCharsetForJavaEncoding()
          {static} + getCollationIndexForJavaEncoding()
          {static} + getMysqlCharsetNameForCollationIndex()
          {static} + getJavaEncodingForMysqlCharset()
          {static} + getJavaEncodingForMysqlCharset()
          {static} + getJavaEncodingForCollationIndex()
          {static} + getJavaEncodingForCollationIndex()
          {static} ~ getNumberOfCharsetsConfigured()
          {static} ~ getCharacterEncodingForErrorMessages()
          {static} ~ requiresEscapeEasternUnicode()
          {static} + isMultibyteCharset()
          {static} + getMblen()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Clob {
          - charData : String
          - exceptionInterceptor : ExceptionInterceptor
          ~ Clob()
          ~ Clob()
          + getAsciiStream()
          + getCharacterStream()
          + getSubString()
          + length()
          + position()
          + position()
          + setAsciiStream()
          + setCharacterStream()
          + setString()
          + setString()
          + streamClosed()
          + truncate()
          + writerClosed()
          + writerClosed()
          + free()
          + getCharacterStream()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Collation {
          + index : int
          + collationName : String
          + priority : int
          + Collation()
          + toString()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class CommunicationsException {
          {static} ~ serialVersionUID : long
          - exceptionMessage : String
          + CommunicationsException()
          + getMessage()
          + getSQLState()
          + setWasStreamingResults()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class CompressedInputStream {
          - buffer : byte[]
          - in : InputStream
          - inflater : Inflater
          - traceProtocol : BooleanConnectionProperty
          - log : Log
          - packetHeaderBuffer : byte[]
          - pos : int
          + CompressedInputStream()
          + available()
          + close()
          - getNextPacketFromServer()
          - getNextPacketIfRequired()
          + read()
          + read()
          + read()
          - readFully()
          + skip()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface Connection {
          {abstract} + changeUser()
          {abstract} + clearHasTriedMaster()
          {abstract} + clientPrepareStatement()
          {abstract} + clientPrepareStatement()
          {abstract} + clientPrepareStatement()
          {abstract} + clientPrepareStatement()
          {abstract} + clientPrepareStatement()
          {abstract} + clientPrepareStatement()
          {abstract} + getActiveStatementCount()
          {abstract} + getIdleFor()
          {abstract} + getLog()
          {abstract} + getServerCharacterEncoding()
          {abstract} + getServerCharset()
          {abstract} + getServerTimezoneTZ()
          {abstract} + getStatementComment()
          {abstract} + hasTriedMaster()
          {abstract} + isInGlobalTx()
          {abstract} + setInGlobalTx()
          {abstract} + isMasterConnection()
          {abstract} + isNoBackslashEscapesSet()
          {abstract} + isSameResource()
          {abstract} + lowerCaseTableNames()
          {abstract} + parserKnowsUnicode()
          {abstract} + ping()
          {abstract} + resetServerState()
          {abstract} + serverPrepareStatement()
          {abstract} + serverPrepareStatement()
          {abstract} + serverPrepareStatement()
          {abstract} + serverPrepareStatement()
          {abstract} + serverPrepareStatement()
          {abstract} + serverPrepareStatement()
          {abstract} + setFailedOver()
          {abstract} + setPreferSlaveDuringFailover()
          {abstract} + setStatementComment()
          {abstract} + shutdownServer()
          {abstract} + supportsIsolationLevel()
          {abstract} + supportsQuotedIdentifiers()
          {abstract} + supportsTransactions()
          {abstract} + versionMeetsMinimum()
          {abstract} + reportQueryTime()
          {abstract} + isAbonormallyLongQuery()
          {abstract} + initializeExtension()
          {abstract} + getAutoIncrementIncrement()
          {abstract} + hasSameProperties()
          {abstract} + getProperties()
          {abstract} + getHost()
          {abstract} + setProxy()
          {abstract} + isServerLocal()
          {abstract} + getSessionMaxRows()
          {abstract} + setSessionMaxRows()
          {abstract} + setSchema()
          {abstract} + getSchema()
          {abstract} + abort()
          {abstract} + setNetworkTimeout()
          {abstract} + getNetworkTimeout()
          {abstract} + abortInternal()
          {abstract} + checkClosed()
          {abstract} + getConnectionMutex()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ConnectionFeatureNotAvailableException {
          {static} ~ serialVersionUID : long
          + ConnectionFeatureNotAvailableException()
          + getMessage()
          + getSQLState()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ConnectionGroup {
          - groupName : String
          - connections : long
          - activeConnections : long
          - connectionProxies : HashMap<Long, LoadBalancedConnectionProxy>
          - hostList : Set<String>
          - isInitialized : boolean
          - closedProxyTotalPhysicalConnections : long
          - closedProxyTotalTransactions : long
          - activeHosts : int
          - closedHosts : Set<String>
          ~ ConnectionGroup()
          + registerConnectionProxy()
          + getGroupName()
          + getInitialHosts()
          + getActiveHostCount()
          + getClosedHosts()
          + getTotalLogicalConnectionCount()
          + getActiveLogicalConnectionCount()
          + getActivePhysicalConnectionCount()
          + getTotalPhysicalConnectionCount()
          + getTotalTransactionCount()
          + closeConnectionProxy()
          + removeHost()
          + removeHost()
          + removeHost()
          + addHost()
          + addHost()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ConnectionGroupManager {
          {static} - GROUP_MAP : HashMap<String, ConnectionGroup>
          {static} - mbean : LoadBalanceConnectionGroupManager
          {static} - hasRegisteredJmx : boolean
          {static} + getConnectionGroupInstance()
          {static} + registerJmx()
          {static} + getConnectionGroup()
          {static} - getGroupsMatching()
          {static} + addHost()
          {static} + getActiveHostCount()
          {static} + getActiveLogicalConnectionCount()
          {static} + getActivePhysicalConnectionCount()
          {static} + getTotalHostCount()
          {static} + getTotalLogicalConnectionCount()
          {static} + getTotalPhysicalConnectionCount()
          {static} + getTotalTransactionCount()
          {static} + removeHost()
          {static} + removeHost()
          {static} + getActiveHostLists()
          {static} + getRegisteredConnectionGroups()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ConnectionImpl {
          {static} - serialVersionUID : long
          {static} - SET_NETWORK_TIMEOUT_PERM : SQLPermission
          {static} - ABORT_PERM : SQLPermission
          {static} + JDBC_LOCAL_CHARACTER_SET_RESULTS : String
          - proxy : MySQLConnection
          - realProxy : InvocationHandler
          {static} - CHARSET_CONVERTER_NOT_AVAILABLE_MARKER : Object
          {static} + charsetMap : Map<?, ?>
          {static} # DEFAULT_LOGGER_CLASS : String
          {static} - HISTOGRAM_BUCKETS : int
          {static} - LOGGER_INSTANCE_NAME : String
          {static} - mapTransIsolationNameToValue : Map<String, Integer>
          {static} - NULL_LOGGER : Log
          {static} # roundRobinStatsMap : Map<?, ?>
          {static} - customIndexToCharsetMapByUrl : Map<String, Map<Integer, String>>
          {static} - customCharsetToMblenMapByUrl : Map<String, Map<String, Integer>>
          - serverConfigCache : CacheAdapter<String, Map<String, String>>
          - queryTimeCount : long
          - queryTimeSum : double
          - queryTimeSumSquares : double
          - queryTimeMean : double
          - cancelTimer : Timer
          - connectionLifecycleInterceptors : List<Extension>
          {static} - JDBC_4_CONNECTION_CTOR : Constructor<?>
          {static} - DEFAULT_RESULT_SET_TYPE : int
          {static} - DEFAULT_RESULT_SET_CONCURRENCY : int
          {static} - random : Random
          - autoCommit : boolean
          - cachedPreparedStatementParams : CacheAdapter<String, ParseInfo>
          - characterSetMetadata : String
          - characterSetResultsOnServer : String
          - charsetConverterMap : Map<String, Object>
          - connectionCreationTimeMillis : long
          - connectionId : long
          - database : String
          - dbmd : DatabaseMetaData
          - defaultTimeZone : TimeZone
          - eventSink : ProfilerEventHandler
          - forceClosedReason : Throwable
          - hasIsolationLevels : boolean
          - hasQuotedIdentifiers : boolean
          - host : String
          + indexToCustomMysqlCharset : Map<Integer, String>
          - mysqlCharsetToCustomMblen : Map<String, Integer>
          - io : MysqlIO
          - isClientTzUTC : boolean
          - isClosed : boolean
          - isInGlobalTx : boolean
          - isRunningOnJDK13 : boolean
          - isolationLevel : int
          - isServerTzUTC : boolean
          - lastQueryFinishedTime : long
          - log : Log
          - longestQueryTimeMs : long
          - lowerCaseTableNames : boolean
          - maximumNumberTablesAccessed : long
          - sessionMaxRows : int
          - metricsLastReportedMs : long
          - minimumNumberTablesAccessed : long
          - myURL : String
          - needsPing : boolean
          - netBufferLength : int
          - noBackslashEscapes : boolean
          - serverTruncatesFracSecs : boolean
          - numberOfPreparedExecutes : long
          - numberOfPrepares : long
          - numberOfQueriesIssued : long
          - numberOfResultSetsCreated : long
          - numTablesMetricsHistBreakpoints : long[]
          - numTablesMetricsHistCounts : int[]
          - oldHistBreakpoints : long[]
          - oldHistCounts : int[]
          - openStatements : CopyOnWriteArrayList<Statement>
          - parsedCallableStatementCache : LRUCache<CompoundCacheKey, CallableStatementParamInfo>
          - parserKnowsUnicode : boolean
          - password : String
          - perfMetricsHistBreakpoints : long[]
          - perfMetricsHistCounts : int[]
          - pointOfOrigin : String
          - port : int
          # props : Properties
          - readInfoMsg : boolean
          - readOnly : boolean
          # resultSetMetadataCache : LRUCache<String, CachedResultSetMetaData>
          - serverTimezoneTZ : TimeZone
          - serverVariables : Map<String, String>
          - shortestQueryTimeMs : long
          - totalQueryTimeMs : double
          - transactionsSupported : boolean
          - typeMap : Map<String, Class<?>>
          - useAnsiQuotes : boolean
          - user : String
          - useServerPreparedStmts : boolean
          - serverSideStatementCheckCache : LRUCache<String, Boolean>
          - serverSideStatementCache : LRUCache<CompoundCacheKey, ServerPreparedStatement>
          - sessionCalendar : Calendar
          - utcCalendar : Calendar
          - origHostToConnectTo : String
          - origPortToConnectTo : int
          - origDatabaseToConnectTo : String
          - errorMessageEncoding : String
          - usePlatformCharsetConverters : boolean
          - hasTriedMasterFlag : boolean
          - statementComment : String
          - storesLowerCaseTableName : boolean
          - statementInterceptors : List<StatementInterceptorV2>
          - requiresEscapingEncoder : boolean
          - hostPortPair : String
          {static} - SERVER_VERSION_STRING_VAR_NAME : String
          - autoIncrementIncrement : int
          - exceptionInterceptor : ExceptionInterceptor
          + getHost()
          + getHostPortPair()
          + isProxySet()
          + setProxy()
          - getProxy()
          + getLoadBalanceSafeProxy()
          + getMultiHostSafeProxy()
          + getActiveMySQLConnection()
          + getConnectionMutex()
          {static} # appendMessageToException()
          + getCancelTimer()
          {static} # getInstance()
          {static} # getNextRoundRobinHostIndex()
          {static} - nullSafeCompare()
          # ConnectionImpl()
          + ConnectionImpl()
          + unSafeStatementInterceptors()
          + initializeSafeStatementInterceptors()
          + getStatementInterceptorsInstances()
          - addToHistogram()
          - addToPerformanceHistogram()
          - addToTablesAccessedHistogram()
          - buildCollationMapping()
          - canHandleAsServerPreparedStatement()
          - canHandleAsServerPreparedStatementNoCache()
          + changeUser()
          - characterSetNamesMatches()
          - checkAndCreatePerformanceHistogram()
          - checkAndCreateTablesAccessedHistogram()
          + checkClosed()
          + throwConnectionClosedException()
          - checkServerEncoding()
          - checkTransactionIsolationLevel()
          + abortInternal()
          - cleanup()
          + clearHasTriedMaster()
          + clearWarnings()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + close()
          - closeAllOpenStatements()
          - closeStatement()
          + commit()
          - configureCharsetProperties()
          - configureClientCharacterSet()
          - configureTimezone()
          - createInitialHistogram()
          + createNewIO()
          - connectWithRetries()
          - coreConnect()
          - normalizeHost()
          - parsePortNumber()
          - connectOneTryOnly()
          - createPreparedStatementCaches()
          + createStatement()
          + createStatement()
          + createStatement()
          + dumpTestcaseQuery()
          + duplicate()
          + execSQL()
          + execSQL()
          + extractSqlFromPacket()
          + generateConnectionCommentBlock()
          + getActiveStatementCount()
          + getAutoCommit()
          + getCalendarInstanceForSessionOrNew()
          + getCatalog()
          + getCharacterSetMetadata()
          + getCharsetConverter()
          + getCharsetNameForIndex()
          + getEncodingForIndex()
          + getDefaultTimeZone()
          + getErrorMessageEncoding()
          + getHoldability()
          + getId()
          + getIdleFor()
          + getIO()
          + getLog()
          + getMaxBytesPerChar()
          + getMaxBytesPerChar()
          + getMetaData()
          - getMetaData()
          + getMetadataSafeStatement()
          + getMetadataSafeStatement()
          + getNetBufferLength()
          + getServerCharacterEncoding()
          + getServerCharset()
          + getServerMajorVersion()
          + getServerMinorVersion()
          + getServerSubMinorVersion()
          + getServerTimezoneTZ()
          + getServerVariable()
          + getServerVersion()
          + getSessionLockedCalendar()
          + getTransactionIsolation()
          + getTypeMap()
          + getURL()
          + getUser()
          + getUtcCalendar()
          + getWarnings()
          + hasSameProperties()
          + getProperties()
          + hasTriedMaster()
          + incrementNumberOfPreparedExecutes()
          + incrementNumberOfPrepares()
          + incrementNumberOfResultSetsCreated()
          - initializeDriverProperties()
          - initializePropsFromServer()
          + isQueryCacheEnabled()
          - getServerVariableAsInt()
          - handleAutoCommitDefaults()
          + isClientTzUTC()
          + isClosed()
          + isCursorFetchEnabled()
          + isInGlobalTx()
          + isMasterConnection()
          + isNoBackslashEscapesSet()
          + isReadInfoMsgEnabled()
          + isReadOnly()
          + isReadOnly()
          + isRunningOnJDK13()
          + isSameResource()
          + isServerTzUTC()
          - createConfigCacheIfNeeded()
          - loadServerVariables()
          + getAutoIncrementIncrement()
          + lowerCaseTableNames()
          + nativeSQL()
          - parseCallableStatement()
          + parserKnowsUnicode()
          + ping()
          + pingInternal()
          + prepareCall()
          + prepareCall()
          + prepareCall()
          + prepareStatement()
          + prepareStatement()
          + prepareStatement()
          + prepareStatement()
          + prepareStatement()
          + prepareStatement()
          + realClose()
          + recachePreparedStatement()
          + decachePreparedStatement()
          + registerQueryExecutionTime()
          + registerStatement()
          + releaseSavepoint()
          - repartitionHistogram()
          - repartitionPerformanceHistogram()
          - repartitionTablesAccessedHistogram()
          - reportMetrics()
          # reportMetricsIfNeeded()
          + reportNumberOfTablesAccessed()
          + resetServerState()
          + rollback()
          + rollback()
          - rollbackNoChecks()
          + serverPrepareStatement()
          + serverPrepareStatement()
          + serverPrepareStatement()
          + serverPrepareStatement()
          + serverPrepareStatement()
          + serverPrepareStatement()
          + serverSupportsConvertFn()
          + setAutoCommit()
          + setCatalog()
          + setFailedOver()
          + setHoldability()
          + setInGlobalTx()
          + setPreferSlaveDuringFailover()
          + setReadInfoMsgEnabled()
          + setReadOnly()
          + setReadOnlyInternal()
          + setSavepoint()
          - setSavepoint()
          + setSavepoint()
          - setSessionVariables()
          + setTransactionIsolation()
          + setTypeMap()
          - setupServerForTruncationChecks()
          + shutdownServer()
          + supportsIsolationLevel()
          + supportsQuotedIdentifiers()
          + supportsTransactions()
          + unregisterStatement()
          + useAnsiQuotedIdentifiers()
          + versionMeetsMinimum()
          + getCachedMetaData()
          + initializeResultsMetadataFromCache()
          + getStatementComment()
          + setStatementComment()
          + reportQueryTime()
          + isAbonormallyLongQuery()
          + initializeExtension()
          + transactionBegun()
          + transactionCompleted()
          + storesLowerCaseTableName()
          + getExceptionInterceptor()
          + getRequiresEscapingEncoder()
          + isServerLocal()
          + getSessionMaxRows()
          + setSessionMaxRows()
          + setSchema()
          + getSchema()
          + abort()
          + setNetworkTimeout()
          + getNetworkTimeout()
          + getProfilerEventHandlerInstance()
          + setProfilerEventHandlerInstance()
          + isServerTruncatesFracSecs()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ExceptionInterceptorChain {
          - interceptors : List<Extension>
          ~ ExceptionInterceptorChain()
          ~ addRingZero()
          + interceptException()
          + destroy()
          + init()
          + getInterceptors()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class CompoundCacheKey {
          ~ componentOne : String
          ~ componentTwo : String
          ~ hashCode : int
          ~ CompoundCacheKey()
          + equals()
          + hashCode()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NetworkTimeoutSetter {
          - connImplRef : WeakReference<ConnectionImpl>
          - mysqlIoRef : WeakReference<MysqlIO>
          - milliseconds : int
          + NetworkTimeoutSetter()
          + run()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface ConnectionLifecycleInterceptor {
          {abstract} + close()
          {abstract} + commit()
          {abstract} + rollback()
          {abstract} + rollback()
          {abstract} + setAutoCommit()
          {abstract} + setCatalog()
          {abstract} + transactionBegun()
          {abstract} + transactionCompleted()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface ConnectionProperties {
          {abstract} + exposeAsXml()
          {abstract} + getAllowLoadLocalInfile()
          {abstract} + getAllowMultiQueries()
          {abstract} + getAllowNanAndInf()
          {abstract} + getAllowUrlInLocalInfile()
          {abstract} + getAlwaysSendSetIsolation()
          {abstract} + getAutoDeserialize()
          {abstract} + getAutoGenerateTestcaseScript()
          {abstract} + getAutoReconnectForPools()
          {abstract} + getBlobSendChunkSize()
          {abstract} + getCacheCallableStatements()
          {abstract} + getCachePreparedStatements()
          {abstract} + getCacheResultSetMetadata()
          {abstract} + getCacheServerConfiguration()
          {abstract} + getCallableStatementCacheSize()
          {abstract} + getCapitalizeTypeNames()
          {abstract} + getCharacterSetResults()
          {abstract} + getClobberStreamingResults()
          {abstract} + getClobCharacterEncoding()
          {abstract} + getConnectionCollation()
          {abstract} + getConnectTimeout()
          {abstract} + getContinueBatchOnError()
          {abstract} + getCreateDatabaseIfNotExist()
          {abstract} + getDefaultFetchSize()
          {abstract} + getDontTrackOpenResources()
          {abstract} + getDumpQueriesOnException()
          {abstract} + getDynamicCalendars()
          {abstract} + getElideSetAutoCommits()
          {abstract} + getEmptyStringsConvertToZero()
          {abstract} + getEmulateLocators()
          {abstract} + getEmulateUnsupportedPstmts()
          {abstract} + getEnablePacketDebug()
          {abstract} + getEncoding()
          {abstract} + getExplainSlowQueries()
          {abstract} + getFailOverReadOnly()
          {abstract} + getGatherPerformanceMetrics()
          {abstract} + getHoldResultsOpenOverStatementClose()
          {abstract} + getIgnoreNonTxTables()
          {abstract} + getInitialTimeout()
          {abstract} + getInteractiveClient()
          {abstract} + getIsInteractiveClient()
          {abstract} + getJdbcCompliantTruncation()
          {abstract} + getLocatorFetchBufferSize()
          {abstract} + getLogger()
          {abstract} + getLoggerClassName()
          {abstract} + getLogSlowQueries()
          {abstract} + getMaintainTimeStats()
          {abstract} + getMaxQuerySizeToLog()
          {abstract} + getMaxReconnects()
          {abstract} + getMaxRows()
          {abstract} + getMetadataCacheSize()
          {abstract} + getNoDatetimeStringSync()
          {abstract} + getNullCatalogMeansCurrent()
          {abstract} + getNullNamePatternMatchesAll()
          {abstract} + getPacketDebugBufferSize()
          {abstract} + getParanoid()
          {abstract} + getPedantic()
          {abstract} + getPreparedStatementCacheSize()
          {abstract} + getPreparedStatementCacheSqlLimit()
          {abstract} + getProfileSql()
          {abstract} + getProfileSQL()
          {abstract} + getPropertiesTransform()
          {abstract} + getQueriesBeforeRetryMaster()
          {abstract} + getReconnectAtTxEnd()
          {abstract} + getRelaxAutoCommit()
          {abstract} + getReportMetricsIntervalMillis()
          {abstract} + getRequireSSL()
          {abstract} + getRollbackOnPooledClose()
          {abstract} + getRoundRobinLoadBalance()
          {abstract} + getRunningCTS13()
          {abstract} + getSecondsBeforeRetryMaster()
          {abstract} + getServerTimezone()
          {abstract} + getSessionVariables()
          {abstract} + getSlowQueryThresholdMillis()
          {abstract} + getSocketFactoryClassName()
          {abstract} + getSocketTimeout()
          {abstract} + getStrictFloatingPoint()
          {abstract} + getStrictUpdates()
          {abstract} + getTinyInt1isBit()
          {abstract} + getTraceProtocol()
          {abstract} + getTransformedBitIsBoolean()
          {abstract} + getUseCompression()
          {abstract} + getUseFastIntParsing()
          {abstract} + getUseHostsInPrivileges()
          {abstract} + getUseInformationSchema()
          {abstract} + getUseLocalSessionState()
          {abstract} + getUseOldUTF8Behavior()
          {abstract} + getUseOnlyServerErrorMessages()
          {abstract} + getUseReadAheadInput()
          {abstract} + getUseServerPreparedStmts()
          {abstract} + getUseSqlStateCodes()
          {abstract} + getUseSSL()
          {abstract} + isUseSSLExplicit()
          {abstract} + getUseStreamLengthsInPrepStmts()
          {abstract} + getUseTimezone()
          {abstract} + getUseUltraDevWorkAround()
          {abstract} + getUseUnbufferedInput()
          {abstract} + getUseUnicode()
          {abstract} + getUseUsageAdvisor()
          {abstract} + getYearIsDateType()
          {abstract} + getZeroDateTimeBehavior()
          {abstract} + setAllowLoadLocalInfile()
          {abstract} + setAllowMultiQueries()
          {abstract} + setAllowNanAndInf()
          {abstract} + setAllowUrlInLocalInfile()
          {abstract} + setAlwaysSendSetIsolation()
          {abstract} + setAutoDeserialize()
          {abstract} + setAutoGenerateTestcaseScript()
          {abstract} + setAutoReconnect()
          {abstract} + setAutoReconnectForConnectionPools()
          {abstract} + setAutoReconnectForPools()
          {abstract} + setBlobSendChunkSize()
          {abstract} + setCacheCallableStatements()
          {abstract} + setCachePreparedStatements()
          {abstract} + setCacheResultSetMetadata()
          {abstract} + setCacheServerConfiguration()
          {abstract} + setCallableStatementCacheSize()
          {abstract} + setCapitalizeDBMDTypes()
          {abstract} + setCapitalizeTypeNames()
          {abstract} + setCharacterEncoding()
          {abstract} + setCharacterSetResults()
          {abstract} + setClobberStreamingResults()
          {abstract} + setClobCharacterEncoding()
          {abstract} + setConnectionCollation()
          {abstract} + setConnectTimeout()
          {abstract} + setContinueBatchOnError()
          {abstract} + setCreateDatabaseIfNotExist()
          {abstract} + setDefaultFetchSize()
          {abstract} + setDetectServerPreparedStmts()
          {abstract} + setDontTrackOpenResources()
          {abstract} + setDumpQueriesOnException()
          {abstract} + setDynamicCalendars()
          {abstract} + setElideSetAutoCommits()
          {abstract} + setEmptyStringsConvertToZero()
          {abstract} + setEmulateLocators()
          {abstract} + setEmulateUnsupportedPstmts()
          {abstract} + setEnablePacketDebug()
          {abstract} + setEncoding()
          {abstract} + setExplainSlowQueries()
          {abstract} + setFailOverReadOnly()
          {abstract} + setGatherPerformanceMetrics()
          {abstract} + setHoldResultsOpenOverStatementClose()
          {abstract} + setIgnoreNonTxTables()
          {abstract} + setInitialTimeout()
          {abstract} + setIsInteractiveClient()
          {abstract} + setJdbcCompliantTruncation()
          {abstract} + setLocatorFetchBufferSize()
          {abstract} + setLogger()
          {abstract} + setLoggerClassName()
          {abstract} + setLogSlowQueries()
          {abstract} + setMaintainTimeStats()
          {abstract} + setMaxQuerySizeToLog()
          {abstract} + setMaxReconnects()
          {abstract} + setMaxRows()
          {abstract} + setMetadataCacheSize()
          {abstract} + setNoDatetimeStringSync()
          {abstract} + setNullCatalogMeansCurrent()
          {abstract} + setNullNamePatternMatchesAll()
          {abstract} + setPacketDebugBufferSize()
          {abstract} + setParanoid()
          {abstract} + setPedantic()
          {abstract} + setPreparedStatementCacheSize()
          {abstract} + setPreparedStatementCacheSqlLimit()
          {abstract} + setProfileSql()
          {abstract} + setProfileSQL()
          {abstract} + setPropertiesTransform()
          {abstract} + setQueriesBeforeRetryMaster()
          {abstract} + setReconnectAtTxEnd()
          {abstract} + setRelaxAutoCommit()
          {abstract} + setReportMetricsIntervalMillis()
          {abstract} + setRequireSSL()
          {abstract} + setRetainStatementAfterResultSetClose()
          {abstract} + setRollbackOnPooledClose()
          {abstract} + setRoundRobinLoadBalance()
          {abstract} + setRunningCTS13()
          {abstract} + setSecondsBeforeRetryMaster()
          {abstract} + setServerTimezone()
          {abstract} + setSessionVariables()
          {abstract} + setSlowQueryThresholdMillis()
          {abstract} + setSocketFactoryClassName()
          {abstract} + setSocketTimeout()
          {abstract} + setStrictFloatingPoint()
          {abstract} + setStrictUpdates()
          {abstract} + setTinyInt1isBit()
          {abstract} + setTraceProtocol()
          {abstract} + setTransformedBitIsBoolean()
          {abstract} + setUseCompression()
          {abstract} + setUseFastIntParsing()
          {abstract} + setUseHostsInPrivileges()
          {abstract} + setUseInformationSchema()
          {abstract} + setUseLocalSessionState()
          {abstract} + setUseOldUTF8Behavior()
          {abstract} + setUseOnlyServerErrorMessages()
          {abstract} + setUseReadAheadInput()
          {abstract} + setUseServerPreparedStmts()
          {abstract} + setUseSqlStateCodes()
          {abstract} + setUseSSL()
          {abstract} + setUseStreamLengthsInPrepStmts()
          {abstract} + setUseTimezone()
          {abstract} + setUseUltraDevWorkAround()
          {abstract} + setUseUnbufferedInput()
          {abstract} + setUseUnicode()
          {abstract} + setUseUsageAdvisor()
          {abstract} + setYearIsDateType()
          {abstract} + setZeroDateTimeBehavior()
          {abstract} + useUnbufferedInput()
          {abstract} + getUseCursorFetch()
          {abstract} + setUseCursorFetch()
          {abstract} + getOverrideSupportsIntegrityEnhancementFacility()
          {abstract} + setOverrideSupportsIntegrityEnhancementFacility()
          {abstract} + getNoTimezoneConversionForTimeType()
          {abstract} + setNoTimezoneConversionForTimeType()
          {abstract} + getNoTimezoneConversionForDateType()
          {abstract} + setNoTimezoneConversionForDateType()
          {abstract} + getCacheDefaultTimezone()
          {abstract} + setCacheDefaultTimezone()
          {abstract} + getUseJDBCCompliantTimezoneShift()
          {abstract} + setUseJDBCCompliantTimezoneShift()
          {abstract} + getAutoClosePStmtStreams()
          {abstract} + setAutoClosePStmtStreams()
          {abstract} + getProcessEscapeCodesForPrepStmts()
          {abstract} + setProcessEscapeCodesForPrepStmts()
          {abstract} + getUseGmtMillisForDatetimes()
          {abstract} + setUseGmtMillisForDatetimes()
          {abstract} + getDumpMetadataOnColumnNotFound()
          {abstract} + setDumpMetadataOnColumnNotFound()
          {abstract} + getResourceId()
          {abstract} + setResourceId()
          {abstract} + getRewriteBatchedStatements()
          {abstract} + setRewriteBatchedStatements()
          {abstract} + getJdbcCompliantTruncationForReads()
          {abstract} + setJdbcCompliantTruncationForReads()
          {abstract} + getUseJvmCharsetConverters()
          {abstract} + setUseJvmCharsetConverters()
          {abstract} + getPinGlobalTxToPhysicalConnection()
          {abstract} + setPinGlobalTxToPhysicalConnection()
          {abstract} + setGatherPerfMetrics()
          {abstract} + getGatherPerfMetrics()
          {abstract} + setUltraDevHack()
          {abstract} + getUltraDevHack()
          {abstract} + setInteractiveClient()
          {abstract} + setSocketFactory()
          {abstract} + getSocketFactory()
          {abstract} + setUseServerPrepStmts()
          {abstract} + getUseServerPrepStmts()
          {abstract} + setCacheCallableStmts()
          {abstract} + getCacheCallableStmts()
          {abstract} + setCachePrepStmts()
          {abstract} + getCachePrepStmts()
          {abstract} + setCallableStmtCacheSize()
          {abstract} + getCallableStmtCacheSize()
          {abstract} + setPrepStmtCacheSize()
          {abstract} + getPrepStmtCacheSize()
          {abstract} + setPrepStmtCacheSqlLimit()
          {abstract} + getPrepStmtCacheSqlLimit()
          {abstract} + getNoAccessToProcedureBodies()
          {abstract} + setNoAccessToProcedureBodies()
          {abstract} + getUseOldAliasMetadataBehavior()
          {abstract} + setUseOldAliasMetadataBehavior()
          {abstract} + getClientCertificateKeyStorePassword()
          {abstract} + setClientCertificateKeyStorePassword()
          {abstract} + getClientCertificateKeyStoreType()
          {abstract} + setClientCertificateKeyStoreType()
          {abstract} + getClientCertificateKeyStoreUrl()
          {abstract} + setClientCertificateKeyStoreUrl()
          {abstract} + getTrustCertificateKeyStorePassword()
          {abstract} + setTrustCertificateKeyStorePassword()
          {abstract} + getTrustCertificateKeyStoreType()
          {abstract} + setTrustCertificateKeyStoreType()
          {abstract} + getTrustCertificateKeyStoreUrl()
          {abstract} + setTrustCertificateKeyStoreUrl()
          {abstract} + getUseSSPSCompatibleTimezoneShift()
          {abstract} + setUseSSPSCompatibleTimezoneShift()
          {abstract} + getTreatUtilDateAsTimestamp()
          {abstract} + setTreatUtilDateAsTimestamp()
          {abstract} + getUseFastDateParsing()
          {abstract} + setUseFastDateParsing()
          {abstract} + getLocalSocketAddress()
          {abstract} + setLocalSocketAddress()
          {abstract} + setUseConfigs()
          {abstract} + getUseConfigs()
          {abstract} + getGenerateSimpleParameterMetadata()
          {abstract} + setGenerateSimpleParameterMetadata()
          {abstract} + getLogXaCommands()
          {abstract} + setLogXaCommands()
          {abstract} + getResultSetSizeThreshold()
          {abstract} + setResultSetSizeThreshold()
          {abstract} + getNetTimeoutForStreamingResults()
          {abstract} + setNetTimeoutForStreamingResults()
          {abstract} + getEnableQueryTimeouts()
          {abstract} + setEnableQueryTimeouts()
          {abstract} + getPadCharsWithSpace()
          {abstract} + setPadCharsWithSpace()
          {abstract} + getUseDynamicCharsetInfo()
          {abstract} + setUseDynamicCharsetInfo()
          {abstract} + getClientInfoProvider()
          {abstract} + setClientInfoProvider()
          {abstract} + getPopulateInsertRowWithDefaultValues()
          {abstract} + setPopulateInsertRowWithDefaultValues()
          {abstract} + getLoadBalanceStrategy()
          {abstract} + setLoadBalanceStrategy()
          {abstract} + getServerAffinityOrder()
          {abstract} + setServerAffinityOrder()
          {abstract} + getTcpNoDelay()
          {abstract} + setTcpNoDelay()
          {abstract} + getTcpKeepAlive()
          {abstract} + setTcpKeepAlive()
          {abstract} + getTcpRcvBuf()
          {abstract} + setTcpRcvBuf()
          {abstract} + getTcpSndBuf()
          {abstract} + setTcpSndBuf()
          {abstract} + getTcpTrafficClass()
          {abstract} + setTcpTrafficClass()
          {abstract} + getUseNanosForElapsedTime()
          {abstract} + setUseNanosForElapsedTime()
          {abstract} + getSlowQueryThresholdNanos()
          {abstract} + setSlowQueryThresholdNanos()
          {abstract} + getStatementInterceptors()
          {abstract} + setStatementInterceptors()
          {abstract} + getUseDirectRowUnpack()
          {abstract} + setUseDirectRowUnpack()
          {abstract} + getLargeRowSizeThreshold()
          {abstract} + setLargeRowSizeThreshold()
          {abstract} + getUseBlobToStoreUTF8OutsideBMP()
          {abstract} + setUseBlobToStoreUTF8OutsideBMP()
          {abstract} + getUtf8OutsideBmpExcludedColumnNamePattern()
          {abstract} + setUtf8OutsideBmpExcludedColumnNamePattern()
          {abstract} + getUtf8OutsideBmpIncludedColumnNamePattern()
          {abstract} + setUtf8OutsideBmpIncludedColumnNamePattern()
          {abstract} + getIncludeInnodbStatusInDeadlockExceptions()
          {abstract} + setIncludeInnodbStatusInDeadlockExceptions()
          {abstract} + getIncludeThreadDumpInDeadlockExceptions()
          {abstract} + setIncludeThreadDumpInDeadlockExceptions()
          {abstract} + getIncludeThreadNamesAsStatementComment()
          {abstract} + setIncludeThreadNamesAsStatementComment()
          {abstract} + getBlobsAreStrings()
          {abstract} + setBlobsAreStrings()
          {abstract} + getFunctionsNeverReturnBlobs()
          {abstract} + setFunctionsNeverReturnBlobs()
          {abstract} + getAutoSlowLog()
          {abstract} + setAutoSlowLog()
          {abstract} + getConnectionLifecycleInterceptors()
          {abstract} + setConnectionLifecycleInterceptors()
          {abstract} + getProfilerEventHandler()
          {abstract} + setProfilerEventHandler()
          {abstract} + getVerifyServerCertificate()
          {abstract} + setVerifyServerCertificate()
          {abstract} + getUseLegacyDatetimeCode()
          {abstract} + setUseLegacyDatetimeCode()
          {abstract} + getSendFractionalSeconds()
          {abstract} + setSendFractionalSeconds()
          {abstract} + getSelfDestructOnPingSecondsLifetime()
          {abstract} + setSelfDestructOnPingSecondsLifetime()
          {abstract} + getSelfDestructOnPingMaxOperations()
          {abstract} + setSelfDestructOnPingMaxOperations()
          {abstract} + getUseColumnNamesInFindColumn()
          {abstract} + setUseColumnNamesInFindColumn()
          {abstract} + getUseLocalTransactionState()
          {abstract} + setUseLocalTransactionState()
          {abstract} + getCompensateOnDuplicateKeyUpdateCounts()
          {abstract} + setCompensateOnDuplicateKeyUpdateCounts()
          {abstract} + setUseAffectedRows()
          {abstract} + getUseAffectedRows()
          {abstract} + setPasswordCharacterEncoding()
          {abstract} + getPasswordCharacterEncoding()
          {abstract} + getLoadBalanceBlacklistTimeout()
          {abstract} + setLoadBalanceBlacklistTimeout()
          {abstract} + setRetriesAllDown()
          {abstract} + getRetriesAllDown()
          {abstract} + getExceptionInterceptor()
          {abstract} + setExceptionInterceptors()
          {abstract} + getExceptionInterceptors()
          {abstract} + getQueryTimeoutKillsConnection()
          {abstract} + setQueryTimeoutKillsConnection()
          {abstract} + getMaxAllowedPacket()
          {abstract} + getRetainStatementAfterResultSetClose()
          {abstract} + getLoadBalancePingTimeout()
          {abstract} + setLoadBalancePingTimeout()
          {abstract} + getLoadBalanceValidateConnectionOnSwapServer()
          {abstract} + setLoadBalanceValidateConnectionOnSwapServer()
          {abstract} + getLoadBalanceConnectionGroup()
          {abstract} + setLoadBalanceConnectionGroup()
          {abstract} + getLoadBalanceExceptionChecker()
          {abstract} + setLoadBalanceExceptionChecker()
          {abstract} + getLoadBalanceSQLStateFailover()
          {abstract} + setLoadBalanceSQLStateFailover()
          {abstract} + getLoadBalanceSQLExceptionSubclassFailover()
          {abstract} + setLoadBalanceSQLExceptionSubclassFailover()
          {abstract} + getLoadBalanceEnableJMX()
          {abstract} + setLoadBalanceEnableJMX()
          {abstract} + setLoadBalanceHostRemovalGracePeriod()
          {abstract} + getLoadBalanceHostRemovalGracePeriod()
          {abstract} + setLoadBalanceAutoCommitStatementThreshold()
          {abstract} + getLoadBalanceAutoCommitStatementThreshold()
          {abstract} + setLoadBalanceAutoCommitStatementRegex()
          {abstract} + getLoadBalanceAutoCommitStatementRegex()
          {abstract} + setAuthenticationPlugins()
          {abstract} + getAuthenticationPlugins()
          {abstract} + setDisabledAuthenticationPlugins()
          {abstract} + getDisabledAuthenticationPlugins()
          {abstract} + setDefaultAuthenticationPlugin()
          {abstract} + getDefaultAuthenticationPlugin()
          {abstract} + setParseInfoCacheFactory()
          {abstract} + getParseInfoCacheFactory()
          {abstract} + setServerConfigCacheFactory()
          {abstract} + getServerConfigCacheFactory()
          {abstract} + setDisconnectOnExpiredPasswords()
          {abstract} + getDisconnectOnExpiredPasswords()
          {abstract} + getAllowMasterDownConnections()
          {abstract} + setAllowMasterDownConnections()
          {abstract} + getAllowSlaveDownConnections()
          {abstract} + setAllowSlaveDownConnections()
          {abstract} + getReadFromMasterWhenNoSlaves()
          {abstract} + setReadFromMasterWhenNoSlaves()
          {abstract} + getReplicationEnableJMX()
          {abstract} + setReplicationEnableJMX()
          {abstract} + setGetProceduresReturnsFunctions()
          {abstract} + getGetProceduresReturnsFunctions()
          {abstract} + setDetectCustomCollations()
          {abstract} + getDetectCustomCollations()
          {abstract} + getConnectionAttributes()
          {abstract} + getServerRSAPublicKeyFile()
          {abstract} + setServerRSAPublicKeyFile()
          {abstract} + getAllowPublicKeyRetrieval()
          {abstract} + setAllowPublicKeyRetrieval()
          {abstract} + setDontCheckOnDuplicateKeyUpdateInSQL()
          {abstract} + getDontCheckOnDuplicateKeyUpdateInSQL()
          {abstract} + setSocksProxyHost()
          {abstract} + getSocksProxyHost()
          {abstract} + setSocksProxyPort()
          {abstract} + getSocksProxyPort()
          {abstract} + getReadOnlyPropagatesToServer()
          {abstract} + setReadOnlyPropagatesToServer()
          {abstract} + getEnabledSSLCipherSuites()
          {abstract} + setEnabledSSLCipherSuites()
          {abstract} + getEnabledTLSProtocols()
          {abstract} + setEnabledTLSProtocols()
          {abstract} + getEnableEscapeProcessing()
          {abstract} + setEnableEscapeProcessing()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ConnectionPropertiesImpl {
          {static} - serialVersionUID : long
          {static} - CONNECTION_AND_AUTH_CATEGORY : String
          {static} - NETWORK_CATEGORY : String
          {static} - DEBUGING_PROFILING_CATEGORY : String
          {static} - HA_CATEGORY : String
          {static} - MISC_CATEGORY : String
          {static} - PERFORMANCE_CATEGORY : String
          {static} - SECURITY_CATEGORY : String
          {static} - PROPERTY_CATEGORIES : String[]
          {static} - PROPERTY_LIST : ArrayList<Field>
          {static} - STANDARD_LOGGER_NAME : String
          {static} # ZERO_DATETIME_BEHAVIOR_CONVERT_TO_NULL : String
          {static} # ZERO_DATETIME_BEHAVIOR_EXCEPTION : String
          {static} # ZERO_DATETIME_BEHAVIOR_ROUND : String
          - autoGenerateTestcaseScriptAsBoolean : boolean
          - autoReconnectForPoolsAsBoolean : boolean
          - cacheResultSetMetaDataAsBoolean : boolean
          - characterEncodingAsString : String
          # characterEncodingIsAliasForSjis : boolean
          - highAvailabilityAsBoolean : boolean
          - jdbcCompliantTruncationForReads : boolean
          - maintainTimeStatsAsBoolean : boolean
          - maxRowsAsInt : int
          - profileSQLAsBoolean : boolean
          - reconnectTxAtEndAsBoolean : boolean
          - useOldUTF8BehaviorAsBoolean : boolean
          - useUnicodeAsBoolean : boolean
          - useUsageAdvisorAsBoolean : boolean
          + getExceptionInterceptor()
          {static} # exposeAsDriverPropertyInfo()
          # exposeAsDriverPropertyInfoInternal()
          # exposeAsProperties()
          + exposeAsProperties()
          + exposeAsXml()
          + getAllowLoadLocalInfile()
          + getAllowMultiQueries()
          + getAllowNanAndInf()
          + getAllowUrlInLocalInfile()
          + getAlwaysSendSetIsolation()
          + getAutoDeserialize()
          + getAutoGenerateTestcaseScript()
          + getAutoReconnectForPools()
          + getBlobSendChunkSize()
          + getCacheCallableStatements()
          + getCachePreparedStatements()
          + getCacheResultSetMetadata()
          + getCacheServerConfiguration()
          + getCallableStatementCacheSize()
          + getCapitalizeTypeNames()
          + getCharacterSetResults()
          + getConnectionAttributes()
          + setConnectionAttributes()
          + getClobberStreamingResults()
          + getClobCharacterEncoding()
          + getConnectionCollation()
          + getConnectTimeout()
          + getContinueBatchOnError()
          + getCreateDatabaseIfNotExist()
          + getDefaultFetchSize()
          + getDontTrackOpenResources()
          + getDumpQueriesOnException()
          + getDynamicCalendars()
          + getElideSetAutoCommits()
          + getEmptyStringsConvertToZero()
          + getEmulateLocators()
          + getEmulateUnsupportedPstmts()
          + getEnablePacketDebug()
          + getEncoding()
          + getExplainSlowQueries()
          + getFailOverReadOnly()
          + getGatherPerformanceMetrics()
          # getHighAvailability()
          + getHoldResultsOpenOverStatementClose()
          + getIgnoreNonTxTables()
          + getInitialTimeout()
          + getInteractiveClient()
          + getIsInteractiveClient()
          + getJdbcCompliantTruncation()
          + getLocatorFetchBufferSize()
          + getLogger()
          + getLoggerClassName()
          + getLogSlowQueries()
          + getMaintainTimeStats()
          + getMaxQuerySizeToLog()
          + getMaxReconnects()
          + getMaxRows()
          + getMetadataCacheSize()
          + getNoDatetimeStringSync()
          + getNullCatalogMeansCurrent()
          + getNullNamePatternMatchesAll()
          + getPacketDebugBufferSize()
          + getParanoid()
          + getPedantic()
          + getPreparedStatementCacheSize()
          + getPreparedStatementCacheSqlLimit()
          + getProfileSql()
          + getProfileSQL()
          + getPropertiesTransform()
          + getQueriesBeforeRetryMaster()
          + getReconnectAtTxEnd()
          + getRelaxAutoCommit()
          + getReportMetricsIntervalMillis()
          + getRequireSSL()
          + getRetainStatementAfterResultSetClose()
          + getRollbackOnPooledClose()
          + getRoundRobinLoadBalance()
          + getRunningCTS13()
          + getSecondsBeforeRetryMaster()
          + getServerTimezone()
          + getSessionVariables()
          + getSlowQueryThresholdMillis()
          + getSocketFactoryClassName()
          + getSocketTimeout()
          + getStrictFloatingPoint()
          + getStrictUpdates()
          + getTinyInt1isBit()
          + getTraceProtocol()
          + getTransformedBitIsBoolean()
          + getUseCompression()
          + getUseFastIntParsing()
          + getUseHostsInPrivileges()
          + getUseInformationSchema()
          + getUseLocalSessionState()
          + getUseOldUTF8Behavior()
          + getUseOnlyServerErrorMessages()
          + getUseReadAheadInput()
          + getUseServerPreparedStmts()
          + getUseSqlStateCodes()
          + getUseSSL()
          + isUseSSLExplicit()
          + getUseStreamLengthsInPrepStmts()
          + getUseTimezone()
          + getUseUltraDevWorkAround()
          + getUseUnbufferedInput()
          + getUseUnicode()
          + getUseUsageAdvisor()
          + getYearIsDateType()
          + getZeroDateTimeBehavior()
          # initializeFromRef()
          # initializeProperties()
          # postInitialization()
          + setAllowLoadLocalInfile()
          + setAllowMultiQueries()
          + setAllowNanAndInf()
          + setAllowUrlInLocalInfile()
          + setAlwaysSendSetIsolation()
          + setAutoDeserialize()
          + setAutoGenerateTestcaseScript()
          + setAutoReconnect()
          + setAutoReconnectForConnectionPools()
          + setAutoReconnectForPools()
          + setBlobSendChunkSize()
          + setCacheCallableStatements()
          + setCachePreparedStatements()
          + setCacheResultSetMetadata()
          + setCacheServerConfiguration()
          + setCallableStatementCacheSize()
          + setCapitalizeDBMDTypes()
          + setCapitalizeTypeNames()
          + setCharacterEncoding()
          + setCharacterSetResults()
          + setClobberStreamingResults()
          + setClobCharacterEncoding()
          + setConnectionCollation()
          + setConnectTimeout()
          + setContinueBatchOnError()
          + setCreateDatabaseIfNotExist()
          + setDefaultFetchSize()
          + setDetectServerPreparedStmts()
          + setDontTrackOpenResources()
          + setDumpQueriesOnException()
          + setDynamicCalendars()
          + setElideSetAutoCommits()
          + setEmptyStringsConvertToZero()
          + setEmulateLocators()
          + setEmulateUnsupportedPstmts()
          + setEnablePacketDebug()
          + setEncoding()
          + setExplainSlowQueries()
          + setFailOverReadOnly()
          + setGatherPerformanceMetrics()
          # setHighAvailability()
          + setHoldResultsOpenOverStatementClose()
          + setIgnoreNonTxTables()
          + setInitialTimeout()
          + setIsInteractiveClient()
          + setJdbcCompliantTruncation()
          + setLocatorFetchBufferSize()
          + setLogger()
          + setLoggerClassName()
          + setLogSlowQueries()
          + setMaintainTimeStats()
          + setMaxQuerySizeToLog()
          + setMaxReconnects()
          + setMaxRows()
          + setMetadataCacheSize()
          + setNoDatetimeStringSync()
          + setNullCatalogMeansCurrent()
          + setNullNamePatternMatchesAll()
          + setPacketDebugBufferSize()
          + setParanoid()
          + setPedantic()
          + setPreparedStatementCacheSize()
          + setPreparedStatementCacheSqlLimit()
          + setProfileSql()
          + setProfileSQL()
          + setPropertiesTransform()
          + setQueriesBeforeRetryMaster()
          + setReconnectAtTxEnd()
          + setRelaxAutoCommit()
          + setReportMetricsIntervalMillis()
          + setRequireSSL()
          + setRetainStatementAfterResultSetClose()
          + setRollbackOnPooledClose()
          + setRoundRobinLoadBalance()
          + setRunningCTS13()
          + setSecondsBeforeRetryMaster()
          + setServerTimezone()
          + setSessionVariables()
          + setSlowQueryThresholdMillis()
          + setSocketFactoryClassName()
          + setSocketTimeout()
          + setStrictFloatingPoint()
          + setStrictUpdates()
          + setTinyInt1isBit()
          + setTraceProtocol()
          + setTransformedBitIsBoolean()
          + setUseCompression()
          + setUseFastIntParsing()
          + setUseHostsInPrivileges()
          + setUseInformationSchema()
          + setUseLocalSessionState()
          + setUseOldUTF8Behavior()
          + setUseOnlyServerErrorMessages()
          + setUseReadAheadInput()
          + setUseServerPreparedStmts()
          + setUseSqlStateCodes()
          + setUseSSL()
          + setUseStreamLengthsInPrepStmts()
          + setUseTimezone()
          + setUseUltraDevWorkAround()
          + setUseUnbufferedInput()
          + setUseUnicode()
          + setUseUsageAdvisor()
          + setYearIsDateType()
          + setZeroDateTimeBehavior()
          # storeToRef()
          + useUnbufferedInput()
          + getUseCursorFetch()
          + setUseCursorFetch()
          + getOverrideSupportsIntegrityEnhancementFacility()
          + setOverrideSupportsIntegrityEnhancementFacility()
          + getNoTimezoneConversionForTimeType()
          + setNoTimezoneConversionForTimeType()
          + getNoTimezoneConversionForDateType()
          + setNoTimezoneConversionForDateType()
          + getCacheDefaultTimezone()
          + setCacheDefaultTimezone()
          + getUseJDBCCompliantTimezoneShift()
          + setUseJDBCCompliantTimezoneShift()
          + getAutoClosePStmtStreams()
          + setAutoClosePStmtStreams()
          + getProcessEscapeCodesForPrepStmts()
          + setProcessEscapeCodesForPrepStmts()
          + getUseGmtMillisForDatetimes()
          + setUseGmtMillisForDatetimes()
          + getDumpMetadataOnColumnNotFound()
          + setDumpMetadataOnColumnNotFound()
          + getResourceId()
          + setResourceId()
          + getRewriteBatchedStatements()
          + setRewriteBatchedStatements()
          + getJdbcCompliantTruncationForReads()
          + setJdbcCompliantTruncationForReads()
          + getUseJvmCharsetConverters()
          + setUseJvmCharsetConverters()
          + getPinGlobalTxToPhysicalConnection()
          + setPinGlobalTxToPhysicalConnection()
          + setGatherPerfMetrics()
          + getGatherPerfMetrics()
          + setUltraDevHack()
          + getUltraDevHack()
          + setInteractiveClient()
          + setSocketFactory()
          + getSocketFactory()
          + setUseServerPrepStmts()
          + getUseServerPrepStmts()
          + setCacheCallableStmts()
          + getCacheCallableStmts()
          + setCachePrepStmts()
          + getCachePrepStmts()
          + setCallableStmtCacheSize()
          + getCallableStmtCacheSize()
          + setPrepStmtCacheSize()
          + getPrepStmtCacheSize()
          + setPrepStmtCacheSqlLimit()
          + getPrepStmtCacheSqlLimit()
          + getNoAccessToProcedureBodies()
          + setNoAccessToProcedureBodies()
          + getUseOldAliasMetadataBehavior()
          + setUseOldAliasMetadataBehavior()
          + getClientCertificateKeyStorePassword()
          + setClientCertificateKeyStorePassword()
          + getClientCertificateKeyStoreType()
          + setClientCertificateKeyStoreType()
          + getClientCertificateKeyStoreUrl()
          + setClientCertificateKeyStoreUrl()
          + getTrustCertificateKeyStorePassword()
          + setTrustCertificateKeyStorePassword()
          + getTrustCertificateKeyStoreType()
          + setTrustCertificateKeyStoreType()
          + getTrustCertificateKeyStoreUrl()
          + setTrustCertificateKeyStoreUrl()
          + getUseSSPSCompatibleTimezoneShift()
          + setUseSSPSCompatibleTimezoneShift()
          + getTreatUtilDateAsTimestamp()
          + setTreatUtilDateAsTimestamp()
          + getUseFastDateParsing()
          + setUseFastDateParsing()
          + getLocalSocketAddress()
          + setLocalSocketAddress()
          + setUseConfigs()
          + getUseConfigs()
          + getGenerateSimpleParameterMetadata()
          + setGenerateSimpleParameterMetadata()
          + getLogXaCommands()
          + setLogXaCommands()
          + getResultSetSizeThreshold()
          + setResultSetSizeThreshold()
          + getNetTimeoutForStreamingResults()
          + setNetTimeoutForStreamingResults()
          + getEnableQueryTimeouts()
          + setEnableQueryTimeouts()
          + getPadCharsWithSpace()
          + setPadCharsWithSpace()
          + getUseDynamicCharsetInfo()
          + setUseDynamicCharsetInfo()
          + getClientInfoProvider()
          + setClientInfoProvider()
          + getPopulateInsertRowWithDefaultValues()
          + setPopulateInsertRowWithDefaultValues()
          + getLoadBalanceStrategy()
          + setLoadBalanceStrategy()
          + getServerAffinityOrder()
          + setServerAffinityOrder()
          + getTcpNoDelay()
          + setTcpNoDelay()
          + getTcpKeepAlive()
          + setTcpKeepAlive()
          + getTcpRcvBuf()
          + setTcpRcvBuf()
          + getTcpSndBuf()
          + setTcpSndBuf()
          + getTcpTrafficClass()
          + setTcpTrafficClass()
          + getUseNanosForElapsedTime()
          + setUseNanosForElapsedTime()
          + getSlowQueryThresholdNanos()
          + setSlowQueryThresholdNanos()
          + getStatementInterceptors()
          + setStatementInterceptors()
          + getUseDirectRowUnpack()
          + setUseDirectRowUnpack()
          + getLargeRowSizeThreshold()
          + setLargeRowSizeThreshold()
          + getUseBlobToStoreUTF8OutsideBMP()
          + setUseBlobToStoreUTF8OutsideBMP()
          + getUtf8OutsideBmpExcludedColumnNamePattern()
          + setUtf8OutsideBmpExcludedColumnNamePattern()
          + getUtf8OutsideBmpIncludedColumnNamePattern()
          + setUtf8OutsideBmpIncludedColumnNamePattern()
          + getIncludeInnodbStatusInDeadlockExceptions()
          + setIncludeInnodbStatusInDeadlockExceptions()
          + getBlobsAreStrings()
          + setBlobsAreStrings()
          + getFunctionsNeverReturnBlobs()
          + setFunctionsNeverReturnBlobs()
          + getAutoSlowLog()
          + setAutoSlowLog()
          + getConnectionLifecycleInterceptors()
          + setConnectionLifecycleInterceptors()
          + getProfilerEventHandler()
          + setProfilerEventHandler()
          + getVerifyServerCertificate()
          + setVerifyServerCertificate()
          + getUseLegacyDatetimeCode()
          + setUseLegacyDatetimeCode()
          + getSendFractionalSeconds()
          + setSendFractionalSeconds()
          + getSelfDestructOnPingSecondsLifetime()
          + setSelfDestructOnPingSecondsLifetime()
          + getSelfDestructOnPingMaxOperations()
          + setSelfDestructOnPingMaxOperations()
          + getUseColumnNamesInFindColumn()
          + setUseColumnNamesInFindColumn()
          + getUseLocalTransactionState()
          + setUseLocalTransactionState()
          + getCompensateOnDuplicateKeyUpdateCounts()
          + setCompensateOnDuplicateKeyUpdateCounts()
          + getLoadBalanceBlacklistTimeout()
          + setLoadBalanceBlacklistTimeout()
          + getLoadBalancePingTimeout()
          + setLoadBalancePingTimeout()
          + setRetriesAllDown()
          + getRetriesAllDown()
          + setUseAffectedRows()
          + getUseAffectedRows()
          + setPasswordCharacterEncoding()
          + getPasswordCharacterEncoding()
          + setExceptionInterceptors()
          + getExceptionInterceptors()
          + setMaxAllowedPacket()
          + getMaxAllowedPacket()
          + getQueryTimeoutKillsConnection()
          + setQueryTimeoutKillsConnection()
          + getLoadBalanceValidateConnectionOnSwapServer()
          + setLoadBalanceValidateConnectionOnSwapServer()
          + getLoadBalanceConnectionGroup()
          + setLoadBalanceConnectionGroup()
          + getLoadBalanceExceptionChecker()
          + setLoadBalanceExceptionChecker()
          + getLoadBalanceSQLStateFailover()
          + setLoadBalanceSQLStateFailover()
          + getLoadBalanceSQLExceptionSubclassFailover()
          + setLoadBalanceSQLExceptionSubclassFailover()
          + getLoadBalanceEnableJMX()
          + setLoadBalanceEnableJMX()
          + setLoadBalanceHostRemovalGracePeriod()
          + getLoadBalanceHostRemovalGracePeriod()
          + setLoadBalanceAutoCommitStatementThreshold()
          + getLoadBalanceAutoCommitStatementThreshold()
          + setLoadBalanceAutoCommitStatementRegex()
          + getLoadBalanceAutoCommitStatementRegex()
          + setIncludeThreadDumpInDeadlockExceptions()
          + getIncludeThreadDumpInDeadlockExceptions()
          + setIncludeThreadNamesAsStatementComment()
          + getIncludeThreadNamesAsStatementComment()
          + setAuthenticationPlugins()
          + getAuthenticationPlugins()
          + setDisabledAuthenticationPlugins()
          + getDisabledAuthenticationPlugins()
          + setDefaultAuthenticationPlugin()
          + getDefaultAuthenticationPlugin()
          + setParseInfoCacheFactory()
          + getParseInfoCacheFactory()
          + setServerConfigCacheFactory()
          + getServerConfigCacheFactory()
          + setDisconnectOnExpiredPasswords()
          + getDisconnectOnExpiredPasswords()
          + getReplicationConnectionGroup()
          + setReplicationConnectionGroup()
          + getAllowMasterDownConnections()
          + setAllowMasterDownConnections()
          + getAllowSlaveDownConnections()
          + setAllowSlaveDownConnections()
          + getReadFromMasterWhenNoSlaves()
          + setReadFromMasterWhenNoSlaves()
          + getReplicationEnableJMX()
          + setReplicationEnableJMX()
          + setGetProceduresReturnsFunctions()
          + getGetProceduresReturnsFunctions()
          + setDetectCustomCollations()
          + getDetectCustomCollations()
          + getServerRSAPublicKeyFile()
          + setServerRSAPublicKeyFile()
          + getAllowPublicKeyRetrieval()
          + setAllowPublicKeyRetrieval()
          + setDontCheckOnDuplicateKeyUpdateInSQL()
          + getDontCheckOnDuplicateKeyUpdateInSQL()
          + setSocksProxyHost()
          + getSocksProxyHost()
          + setSocksProxyPort()
          + getSocksProxyPort()
          + getReadOnlyPropagatesToServer()
          + setReadOnlyPropagatesToServer()
          + getEnabledSSLCipherSuites()
          + setEnabledSSLCipherSuites()
          + getEnabledTLSProtocols()
          + setEnabledTLSProtocols()
          + getEnableEscapeProcessing()
          + setEnableEscapeProcessing()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class BooleanConnectionProperty {
          {static} - serialVersionUID : long
          ~ BooleanConnectionProperty()
          ~ getAllowableValues()
          ~ getValueAsBoolean()
          ~ hasValueConstraints()
          ~ initializeFrom()
          ~ isRangeBased()
          ~ setValue()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      abstract class ConnectionProperty {
          {static} ~ serialVersionUID : long
          ~ allowableValues : String[]
          ~ categoryName : String
          ~ defaultValue : Object
          ~ lowerBound : int
          ~ order : int
          ~ propertyName : String
          ~ sinceVersion : String
          ~ upperBound : int
          ~ valueAsObject : Object
          ~ required : boolean
          ~ description : String
          ~ updateCount : int
          ~ wasExplicitlySet : boolean
          + ConnectionProperty()
          ~ ConnectionProperty()
          ~ getAllowableValues()
          ~ getCategoryName()
          ~ getDefaultValue()
          ~ getLowerBound()
          ~ getOrder()
          ~ getPropertyName()
          ~ getUpperBound()
          ~ getValueAsObject()
          ~ getUpdateCount()
          ~ isExplicitlySet()
          {abstract} ~ hasValueConstraints()
          ~ initializeFrom()
          ~ initializeFrom()
          {abstract} ~ initializeFrom()
          {abstract} ~ isRangeBased()
          ~ setCategoryName()
          ~ setOrder()
          ~ setValueAsObject()
          ~ storeTo()
          ~ getAsDriverPropertyInfo()
          ~ validateStringValues()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class IntegerConnectionProperty {
          {static} - serialVersionUID : long
          ~ multiplier : int
          + IntegerConnectionProperty()
          ~ IntegerConnectionProperty()
          ~ IntegerConnectionProperty()
          ~ getAllowableValues()
          ~ getLowerBound()
          ~ getUpperBound()
          ~ getValueAsInt()
          ~ hasValueConstraints()
          ~ initializeFrom()
          ~ isRangeBased()
          ~ setValue()
          ~ setValue()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class LongConnectionProperty {
          {static} - serialVersionUID : long
          ~ LongConnectionProperty()
          ~ LongConnectionProperty()
          ~ setValue()
          ~ setValue()
          ~ getValueAsLong()
          ~ initializeFrom()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class MemorySizeConnectionProperty {
          {static} - serialVersionUID : long
          - valueAsString : String
          ~ MemorySizeConnectionProperty()
          ~ initializeFrom()
          ~ setValue()
          ~ getValueAsString()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class StringConnectionProperty {
          {static} - serialVersionUID : long
          ~ StringConnectionProperty()
          ~ StringConnectionProperty()
          ~ getValueAsString()
          ~ hasValueConstraints()
          ~ initializeFrom()
          ~ isRangeBased()
          ~ setValue()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class XmlMap {
          # ordered : Map<Integer, Map<String, ConnectionProperty>>
          # alpha : Map<String, ConnectionProperty>
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface ConnectionPropertiesTransform {
          {abstract} + transformProperties()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Constants {
          {static} + EMPTY_BYTE_ARRAY : byte[]
          {static} + MILLIS_I18N : String
          {static} + SLASH_STAR_SPACE_AS_BYTES : byte[]
          {static} + SPACE_STAR_SLASH_SPACE_AS_BYTES : byte[]
          - Constants()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class DatabaseMetaData {
          {static} # MAX_IDENTIFIER_LENGTH : int
          {static} - DEFERRABILITY : int
          {static} - DELETE_RULE : int
          {static} - FK_NAME : int
          {static} - FKCOLUMN_NAME : int
          {static} - FKTABLE_CAT : int
          {static} - FKTABLE_NAME : int
          {static} - FKTABLE_SCHEM : int
          {static} - KEY_SEQ : int
          {static} - PK_NAME : int
          {static} - PKCOLUMN_NAME : int
          {static} - PKTABLE_CAT : int
          {static} - PKTABLE_NAME : int
          {static} - PKTABLE_SCHEM : int
          {static} - SUPPORTS_FK : String
          {static} # TABLE_AS_BYTES : byte[]
          {static} # SYSTEM_TABLE_AS_BYTES : byte[]
          {static} - UPDATE_RULE : int
          {static} # VIEW_AS_BYTES : byte[]
          {static} - JDBC_4_DBMD_SHOW_CTOR : Constructor<?>
          {static} - JDBC_4_DBMD_IS_CTOR : Constructor<?>
          {static} - MYSQL_KEYWORDS : String[]
          {static} - SQL92_KEYWORDS : String[]
          {static} - SQL2003_KEYWORDS : String[]
          {static} - mysqlKeywords : String
          # conn : MySQLConnection
          # database : String
          # quotedId : String
          - exceptionInterceptor : ExceptionInterceptor
          {static} # getInstance()
          # DatabaseMetaData()
          + allProceduresAreCallable()
          + allTablesAreSelectable()
          - buildResultSet()
          {static} ~ buildResultSet()
          # convertToJdbcFunctionList()
          # getFullyQualifiedName()
          # getJDBC4FunctionNoTableConstant()
          # convertToJdbcProcedureList()
          - convertTypeDescriptorToProcedureRow()
          # getColumnType()
          # getExceptionInterceptor()
          + dataDefinitionCausesTransactionCommit()
          + dataDefinitionIgnoredInTransactions()
          + deletesAreDetected()
          + doesMaxRowSizeIncludeBlobs()
          + extractForeignKeyForTable()
          + extractForeignKeyFromCreateTable()
          + getAttributes()
          + getBestRowIdentifier()
          - getCallStmtParameterTypes()
          - endPositionOfParameterDeclaration()
          - findEndOfReturnsClause()
          - getCascadeDeleteOption()
          - getCascadeUpdateOption()
          # getCatalogIterator()
          + getCatalogs()
          + getCatalogSeparator()
          + getCatalogTerm()
          + getColumnPrivileges()
          + getColumns()
          # createColumnsFields()
          + getConnection()
          + getCrossReference()
          # createFkMetadataFields()
          + getDatabaseMajorVersion()
          + getDatabaseMinorVersion()
          + getDatabaseProductName()
          + getDatabaseProductVersion()
          + getDefaultTransactionIsolation()
          + getDriverMajorVersion()
          + getDriverMinorVersion()
          + getDriverName()
          + getDriverVersion()
          + getExportedKeys()
          # getExportKeyResults()
          + getExtraNameCharacters()
          # getForeignKeyActions()
          + getIdentifierQuoteString()
          + getImportedKeys()
          # getImportKeyResults()
          + getIndexInfo()
          # createIndexInfoFields()
          + getJDBCMajorVersion()
          + getJDBCMinorVersion()
          + getMaxBinaryLiteralLength()
          + getMaxCatalogNameLength()
          + getMaxCharLiteralLength()
          + getMaxColumnNameLength()
          + getMaxColumnsInGroupBy()
          + getMaxColumnsInIndex()
          + getMaxColumnsInOrderBy()
          + getMaxColumnsInSelect()
          + getMaxColumnsInTable()
          + getMaxConnections()
          + getMaxCursorNameLength()
          + getMaxIndexLength()
          + getMaxProcedureNameLength()
          + getMaxRowSize()
          + getMaxSchemaNameLength()
          + getMaxStatementLength()
          + getMaxStatements()
          + getMaxTableNameLength()
          + getMaxTablesInSelect()
          + getMaxUserNameLength()
          + getNumericFunctions()
          + getPrimaryKeys()
          + getProcedureColumns()
          # createProcedureColumnsFields()
          # getProcedureOrFunctionColumns()
          + getProcedures()
          # createFieldMetadataForGetProcedures()
          # getProceduresAndOrFunctions()
          + getProcedureTerm()
          + getResultSetHoldability()
          - getResultsImpl()
          + getSchemas()
          + getSchemaTerm()
          + getSearchStringEscape()
          + getSQLKeywords()
          + getSQLStateType()
          + getStringFunctions()
          + getSuperTables()
          + getSuperTypes()
          + getSystemFunctions()
          # getTableNameWithCase()
          + getTablePrivileges()
          + getTables()
          # createTablesFields()
          + getTableTypes()
          + getTimeDateFunctions()
          + getTypeInfo()
          + getUDTs()
          + getURL()
          + getUserName()
          + getVersionColumns()
          + insertsAreDetected()
          + isCatalogAtStart()
          + isReadOnly()
          + locatorsUpdateCopy()
          + nullPlusNonNullIsNull()
          + nullsAreSortedAtEnd()
          + nullsAreSortedAtStart()
          + nullsAreSortedHigh()
          + nullsAreSortedLow()
          + othersDeletesAreVisible()
          + othersInsertsAreVisible()
          + othersUpdatesAreVisible()
          + ownDeletesAreVisible()
          + ownInsertsAreVisible()
          + ownUpdatesAreVisible()
          # parseTableStatusIntoLocalAndReferencedColumns()
          # s2b()
          + storesLowerCaseIdentifiers()
          + storesLowerCaseQuotedIdentifiers()
          + storesMixedCaseIdentifiers()
          + storesMixedCaseQuotedIdentifiers()
          + storesUpperCaseIdentifiers()
          + storesUpperCaseQuotedIdentifiers()
          + supportsAlterTableWithAddColumn()
          + supportsAlterTableWithDropColumn()
          + supportsANSI92EntryLevelSQL()
          + supportsANSI92FullSQL()
          + supportsANSI92IntermediateSQL()
          + supportsBatchUpdates()
          + supportsCatalogsInDataManipulation()
          + supportsCatalogsInIndexDefinitions()
          + supportsCatalogsInPrivilegeDefinitions()
          + supportsCatalogsInProcedureCalls()
          + supportsCatalogsInTableDefinitions()
          + supportsColumnAliasing()
          + supportsConvert()
          + supportsConvert()
          + supportsCoreSQLGrammar()
          + supportsCorrelatedSubqueries()
          + supportsDataDefinitionAndDataManipulationTransactions()
          + supportsDataManipulationTransactionsOnly()
          + supportsDifferentTableCorrelationNames()
          + supportsExpressionsInOrderBy()
          + supportsExtendedSQLGrammar()
          + supportsFullOuterJoins()
          + supportsGetGeneratedKeys()
          + supportsGroupBy()
          + supportsGroupByBeyondSelect()
          + supportsGroupByUnrelated()
          + supportsIntegrityEnhancementFacility()
          + supportsLikeEscapeClause()
          + supportsLimitedOuterJoins()
          + supportsMinimumSQLGrammar()
          + supportsMixedCaseIdentifiers()
          + supportsMixedCaseQuotedIdentifiers()
          + supportsMultipleOpenResults()
          + supportsMultipleResultSets()
          + supportsMultipleTransactions()
          + supportsNamedParameters()
          + supportsNonNullableColumns()
          + supportsOpenCursorsAcrossCommit()
          + supportsOpenCursorsAcrossRollback()
          + supportsOpenStatementsAcrossCommit()
          + supportsOpenStatementsAcrossRollback()
          + supportsOrderByUnrelated()
          + supportsOuterJoins()
          + supportsPositionedDelete()
          + supportsPositionedUpdate()
          + supportsResultSetConcurrency()
          + supportsResultSetHoldability()
          + supportsResultSetType()
          + supportsSavepoints()
          + supportsSchemasInDataManipulation()
          + supportsSchemasInIndexDefinitions()
          + supportsSchemasInPrivilegeDefinitions()
          + supportsSchemasInProcedureCalls()
          + supportsSchemasInTableDefinitions()
          + supportsSelectForUpdate()
          + supportsStatementPooling()
          + supportsStoredProcedures()
          + supportsSubqueriesInComparisons()
          + supportsSubqueriesInExists()
          + supportsSubqueriesInIns()
          + supportsSubqueriesInQuantifieds()
          + supportsTableCorrelationNames()
          + supportsTransactionIsolationLevel()
          + supportsTransactions()
          + supportsUnion()
          + supportsUnionAll()
          + updatesAreDetected()
          + usesLocalFilePerTable()
          + usesLocalFiles()
          + getClientInfoProperties()
          + getFunctionColumns()
          # createFunctionColumnsFields()
          + getFunctions()
          + providesQueryObjectGenerator()
          + getSchemas()
          + supportsStoredFunctionsUsingCallSyntax()
          # prepareMetaDataSafeStatement()
          + getPseudoColumns()
          + generatedKeyAlwaysReturned()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      abstract class IteratorWithCleanup {
          {abstract} ~ close()
          {abstract} ~ hasNext()
          {abstract} ~ next()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class LocalAndReferencedColumns {
          ~ constraintName : String
          ~ localColumnsList : List<String>
          ~ referencedCatalog : String
          ~ referencedColumnsList : List<String>
          ~ referencedTable : String
          ~ LocalAndReferencedColumns()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ResultSetIterator {
          ~ colIndex : int
          ~ resultSet : ResultSet
          ~ ResultSetIterator()
          ~ close()
          ~ hasNext()
          ~ next()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class SingleStringIterator {
          ~ onFirst : boolean
          ~ value : String
          ~ SingleStringIterator()
          ~ close()
          ~ hasNext()
          ~ next()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class TypeDescriptor {
          ~ bufferLength : int
          ~ charOctetLength : int
          ~ columnSize : Integer
          ~ dataType : short
          ~ decimalDigits : Integer
          ~ isNullable : String
          ~ nullability : int
          ~ numPrecRadix : int
          ~ typeName : String
          ~ TypeDescriptor()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class IndexMetaDataKey {
          ~ columnNonUnique : Boolean
          ~ columnType : Short
          ~ columnIndexName : String
          ~ columnOrdinalPosition : Short
          ~ IndexMetaDataKey()
          + compareTo()
          + equals()
          + hashCode()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class TableMetaDataKey {
          ~ tableType : String
          ~ tableCat : String
          ~ tableSchem : String
          ~ tableName : String
          ~ TableMetaDataKey()
          + compareTo()
          + equals()
          + hashCode()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ComparableWrapper {
          + ComparableWrapper()
          + getKey()
          + getValue()
          + compareTo()
          + equals()
          + hashCode()
          + toString()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      enum TableType {
        LOCAL_TEMPORARY
        SYSTEM_TABLE
        SYSTEM_VIEW
        TABLE
        VIEW
        UNKNOWN
        name
        nameAsBytes
        synonyms
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      enum ProcedureType {
        PROCEDURE
        FUNCTION
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class DatabaseMetaDataUsingInfoSchema {
          - hasReferentialConstraintsView : boolean
          - hasParametersView : boolean
          # DatabaseMetaDataUsingInfoSchema()
          # executeMetadataQuery()
          + getColumnPrivileges()
          + getColumns()
          + getCrossReference()
          + getExportedKeys()
          - generateOptionalRefContraintsJoin()
          - generateDeleteRuleClause()
          - generateUpdateRuleClause()
          + getImportedKeys()
          + getIndexInfo()
          + getPrimaryKeys()
          + getProcedures()
          # getRoutineTypeConditionForGetProcedures()
          + getProcedureColumns()
          # getProcedureColumnsNoISParametersView()
          # getRoutineTypeConditionForGetProcedureColumns()
          + getTables()
          + gethasParametersView()
          + getVersionColumns()
          + getFunctionColumns()
          # getJDBC4FunctionConstant()
          + getFunctions()
          # getJDBC4FunctionNoTableConstant()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      enum JDBC4FunctionConstant {
        FUNCTION_COLUMN_UNKNOWN
        FUNCTION_COLUMN_IN
        FUNCTION_COLUMN_INOUT
        FUNCTION_COLUMN_OUT
        FUNCTION_COLUMN_RETURN
        FUNCTION_COLUMN_RESULT
        FUNCTION_NO_NULLS
        FUNCTION_NULLABLE
        FUNCTION_NULLABLE_UNKNOWN
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class DocsConnectionPropsHelper {
          {static} ~ serialVersionUID : long
          {static} + main()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Driver {
          + Driver()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class EscapeProcessor {
          {static} - JDBC_CONVERT_TO_MYSQL_TYPE_MAP : Map<String, String>
          {static} - JDBC_NO_CONVERT_TO_MYSQL_EXPRESSION_MAP : Map<String, String>
          {static} + escapeSQL()
          {static} - processTimeToken()
          {static} - processTimestampToken()
          {static} - processConvertToken()
          {static} - removeWhitespace()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class EscapeProcessorResult {
          ~ callingStoredFunction : boolean
          ~ escapedSql : String
          ~ usesVariables : byte
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class EscapeTokenizer {
          {static} - CHR_ESCAPE : char
          {static} - CHR_SGL_QUOTE : char
          {static} - CHR_DBL_QUOTE : char
          {static} - CHR_LF : char
          {static} - CHR_CR : char
          {static} - CHR_COMMENT : char
          {static} - CHR_BEGIN_TOKEN : char
          {static} - CHR_END_TOKEN : char
          {static} - CHR_VARIABLE : char
          - source : String
          - sourceLength : int
          - pos : int
          - emittingEscapeCode : boolean
          - sawVariableUse : boolean
          - bracesLevel : int
          - inQuotes : boolean
          - quoteChar : char
          + EscapeTokenizer()
          + hasMoreTokens()
          + nextToken()
          ~ sawVariableUse()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface ExceptionInterceptor {
          {abstract} + interceptException()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ExportControlled {
          {static} - SQL_STATE_BAD_SSL_PARAMS : String
          {static} - TLSv1 : String
          {static} - TLSv1_1 : String
          {static} - TLSv1_2 : String
          {static} - TLS_PROTOCOLS : String[]
          {static} # enabled()
          {static} # transformSocketToSSLSocket()
          - ExportControlled()
          {static} - getSSLSocketFactoryDefaultOrConfigured()
          {static} + isSSLEstablished()
          {static} + decodeRSAPublicKey()
          {static} + encryptWithRSAPublicKey()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class StandardSSLSocketFactory {
          - rawSocket : SSLSocket
          - sslFact : SSLSocketFactory
          - existingSocketFactory : SocketFactory
          - existingSocket : Socket
          + StandardSSLSocketFactory()
          + afterHandshake()
          + beforeHandshake()
          + connect()
          + isLocallyConnected()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class X509TrustManagerWrapper {
          - origTm : X509TrustManager
          - verifyServerCert : boolean
          - certFactory : CertificateFactory
          - validatorParams : PKIXParameters
          - validator : CertPathValidator
          + X509TrustManagerWrapper()
          + X509TrustManagerWrapper()
          + getAcceptedIssuers()
          + checkServerTrusted()
          + checkClientTrusted()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface Extension {
          {abstract} + init()
          {abstract} + destroy()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class FailoverConnectionProxy {
          {static} - METHOD_SET_READ_ONLY : String
          {static} - METHOD_SET_AUTO_COMMIT : String
          {static} - METHOD_COMMIT : String
          {static} - METHOD_ROLLBACK : String
          {static} - NO_CONNECTION_INDEX : int
          {static} - DEFAULT_PRIMARY_HOST_INDEX : int
          - secondsBeforeRetryPrimaryHost : int
          - queriesBeforeRetryPrimaryHost : long
          - failoverReadOnly : boolean
          - retriesAllDown : int
          - currentHostIndex : int
          - primaryHostIndex : int
          - explicitlyReadOnly : Boolean
          - explicitlyAutoCommit : boolean
          - enableFallBackToPrimaryHost : boolean
          - primaryHostFailTimeMillis : long
          - queriesIssuedSinceFailover : long
          {static} - INTERFACES_TO_PROXY : Class<?>[]
          {static} + createProxyInstance()
          - FailoverConnectionProxy()
          ~ getNewJdbcInterfaceProxy()
          ~ shouldExceptionTriggerConnectionSwitch()
          ~ isMasterConnection()
          ~ pickNewConnection()
          ~ createConnectionForHostIndex()
          - connectTo()
          - switchCurrentConnectionTo()
          - failOver()
          - failOver()
          ~ fallBackToPrimaryIfAvailable()
          - nextHost()
          ~ incrementQueriesIssuedSinceFailover()
          ~ readyToFallBackToPrimaryHost()
          ~ isConnected()
          ~ isPrimaryHostIndex()
          ~ connectedToPrimaryHost()
          ~ connectedToSecondaryHost()
          - secondsBeforeRetryPrimaryHostIsMet()
          - queriesBeforeRetryPrimaryHostIsMet()
          - resetAutoFallBackCounters()
          ~ doClose()
          ~ doAbortInternal()
          ~ doAbort()
          + invokeMore()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class FailoverJdbcInterfaceProxy {
          ~ FailoverJdbcInterfaceProxy()
          + invoke()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Field {
          {static} - AUTO_INCREMENT_FLAG : int
          {static} - NO_CHARSET_INFO : int
          - buffer : byte[]
          - collationIndex : int
          - encoding : String
          - colDecimals : int
          - colFlag : short
          - collationName : String
          - connection : MySQLConnection
          - databaseName : String
          - databaseNameLength : int
          - databaseNameStart : int
          # defaultValueLength : int
          # defaultValueStart : int
          - fullName : String
          - fullOriginalName : String
          - isImplicitTempTable : boolean
          - length : long
          - mysqlType : int
          - name : String
          - nameLength : int
          - nameStart : int
          - originalColumnName : String
          - originalColumnNameLength : int
          - originalColumnNameStart : int
          - originalTableName : String
          - originalTableNameLength : int
          - originalTableNameStart : int
          - precisionAdjustFactor : int
          - sqlType : int
          - tableName : String
          - tableNameLength : int
          - tableNameStart : int
          - useOldNameMetadata : boolean
          - isSingleBit : boolean
          - maxBytesPerChar : int
          - valueNeedsQuoting : boolean
          ~ Field()
          - shouldSetupForUtf8StringInBlob()
          - setupForUtf8StringInBlob()
          ~ Field()
          ~ Field()
          ~ Field()
          - checkForImplicitTemporaryTable()
          + getEncoding()
          + setEncoding()
          + getCollation()
          + getColumnLabel()
          + getDatabaseName()
          ~ getDecimals()
          + getFullName()
          + getFullOriginalName()
          + getLength()
          + getMaxBytesPerCharacter()
          + getMysqlType()
          + getName()
          + getNameNoAliases()
          + getOriginalName()
          + getOriginalTableName()
          + getPrecisionAdjustFactor()
          + getSQLType()
          - getStringFromBytes()
          + getTable()
          + getTableName()
          + getTableNameNoAliases()
          + isAutoIncrement()
          + isBinary()
          + isBlob()
          - isImplicitTemporaryTable()
          + isMultipleKey()
          ~ isNotNull()
          ~ isOpaqueBinary()
          + isPrimaryKey()
          ~ isReadOnly()
          + isUniqueKey()
          + isUnsigned()
          + setUnsigned()
          + isZeroFill()
          - setBlobTypeBasedOnLength()
          - isNativeNumericType()
          - isNativeDateTimeType()
          + isCharsetApplicableType()
          + setConnection()
          ~ setMysqlType()
          # setUseOldNameMetadata()
          + toString()
          # isSingleBit()
          # getvalueNeedsQuoting()
          - determineNeedsQuoting()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      abstract class IterateBlock {
          ~ iteratorWithCleanup : IteratorWithCleanup<T>
          ~ javaIterator : Iterator<T>
          ~ stopIterating : boolean
          ~ IterateBlock()
          ~ IterateBlock()
          + doForAll()
          {abstract} ~ forEach()
          + fullIteration()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC42CallableStatement {
          + JDBC42CallableStatement()
          + JDBC42CallableStatement()
          - checkSqlType()
          - translateAndCheckSqlType()
          + registerOutParameter()
          + registerOutParameter()
          + registerOutParameter()
          + registerOutParameter()
          + registerOutParameter()
          + registerOutParameter()
          + setObject()
          + setObject()
          + setObject()
          + setObject()
          + setObject()
          + setObject()
          + setObject()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC42Helper {
          {static} ~ convertJavaTimeToJavaSql()
          {static} ~ isSqlTypeSupported()
          {static} ~ checkSqlType()
          {static} ~ translateAndCheckSqlType()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC42PreparedStatement {
          + JDBC42PreparedStatement()
          + JDBC42PreparedStatement()
          + JDBC42PreparedStatement()
          - checkSqlType()
          - translateAndCheckSqlType()
          + setObject()
          + setObject()
          + setObject()
          + setObject()
          + setObject()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC42ResultSet {
          + JDBC42ResultSet()
          + JDBC42ResultSet()
          + getObject()
          + updateObject()
          + updateObject()
          + updateObject()
          + updateObject()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC42ServerPreparedStatement {
          + JDBC42ServerPreparedStatement()
          - checkSqlType()
          - translateAndCheckSqlType()
          + setObject()
          + setObject()
          + setObject()
          + setObject()
          + setObject()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC42UpdatableResultSet {
          + JDBC42UpdatableResultSet()
          - translateAndCheckSqlType()
          + getObject()
          + updateObject()
          + updateObject()
          + updateObject()
          + updateObject()
          + updateObject()
          + updateObject()
          + updateObject()
          + updateObject()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4CallableStatement {
          + JDBC4CallableStatement()
          + JDBC4CallableStatement()
          + setRowId()
          + setRowId()
          + setSQLXML()
          + setSQLXML()
          + getSQLXML()
          + getSQLXML()
          + getRowId()
          + getRowId()
          + setNClob()
          + setNClob()
          + setNClob()
          + setNClob()
          + setNString()
          + getCharacterStream()
          + getCharacterStream()
          + getNCharacterStream()
          + getNCharacterStream()
          + getNClob()
          + getNClob()
          + getNString()
          + getNString()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface JDBC4ClientInfoProvider {
          {abstract} + initialize()
          {abstract} + destroy()
          {abstract} + getClientInfo()
          {abstract} + getClientInfo()
          {abstract} + setClientInfo()
          {abstract} + setClientInfo()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4ClientInfoProviderSP {
          ~ setClientInfoSp : PreparedStatement
          ~ getClientInfoSp : PreparedStatement
          ~ getClientInfoBulkSp : PreparedStatement
          + initialize()
          + destroy()
          + getClientInfo()
          + getClientInfo()
          + setClientInfo()
          + setClientInfo()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4CommentClientInfoProvider {
          - clientInfo : Properties
          + initialize()
          + destroy()
          + getClientInfo()
          + getClientInfo()
          + setClientInfo()
          + setClientInfo()
          - setComment()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4Connection {
          {static} - serialVersionUID : long
          - infoProvider : JDBC4ClientInfoProvider
          + JDBC4Connection()
          + createSQLXML()
          + createArrayOf()
          + createStruct()
          + getClientInfo()
          + getClientInfo()
          + isValid()
          + setClientInfo()
          + setClientInfo()
          + isWrapperFor()
          + unwrap()
          + createBlob()
          + createClob()
          + createNClob()
          + getClientInfoProviderImpl()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4DatabaseMetaData {
          + JDBC4DatabaseMetaData()
          + getRowIdLifetime()
          + isWrapperFor()
          + unwrap()
          + autoCommitFailureClosesAllResultSets()
          + getProcedureColumns()
          + getProcedures()
          # getJDBC4FunctionNoTableConstant()
          # getColumnType()
          {static} # getProcedureOrFunctionColumnType()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4DatabaseMetaDataUsingInfoSchema {
          + JDBC4DatabaseMetaDataUsingInfoSchema()
          + getRowIdLifetime()
          + isWrapperFor()
          + unwrap()
          # getProcedureColumnsNoISParametersView()
          # getRoutineTypeConditionForGetProcedures()
          # getRoutineTypeConditionForGetProcedureColumns()
          # getJDBC4FunctionConstant()
          # getJDBC4FunctionNoTableConstant()
          # getColumnType()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4LoadBalancedMySQLConnection {
          + JDBC4LoadBalancedMySQLConnection()
          - getJDBC4Connection()
          + createSQLXML()
          + createArrayOf()
          + createStruct()
          + getClientInfo()
          + getClientInfo()
          + isValid()
          + setClientInfo()
          + setClientInfo()
          + isWrapperFor()
          + unwrap()
          + createBlob()
          + createClob()
          + createNClob()
          + getClientInfoProviderImpl()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4MultiHostMySQLConnection {
          + JDBC4MultiHostMySQLConnection()
          - getJDBC4Connection()
          + createSQLXML()
          + createArrayOf()
          + createStruct()
          + getClientInfo()
          + getClientInfo()
          + isValid()
          + setClientInfo()
          + setClientInfo()
          + isWrapperFor()
          + unwrap()
          + createBlob()
          + createClob()
          + createNClob()
          + getClientInfoProviderImpl()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface JDBC4MySQLConnection {
          {abstract} + createSQLXML()
          {abstract} + createArrayOf()
          {abstract} + createStruct()
          {abstract} + getClientInfo()
          {abstract} + getClientInfo()
          {abstract} + isValid()
          {abstract} + setClientInfo()
          {abstract} + setClientInfo()
          {abstract} + isWrapperFor()
          {abstract} + unwrap()
          {abstract} + createBlob()
          {abstract} + createClob()
          {abstract} + createNClob()
          {abstract} + getClientInfoProviderImpl()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4MysqlSQLXML {
          - inputFactory : XMLInputFactory
          - outputFactory : XMLOutputFactory
          - stringRep : String
          - owningResultSet : ResultSetInternalMethods
          - columnIndexOfXml : int
          - fromResultSet : boolean
          - isClosed : boolean
          - workingWithResult : boolean
          - asDOMResult : DOMResult
          - asSAXResult : SAXResult
          - asStringWriter : StringWriter
          - asByteArrayOutputStream : ByteArrayOutputStream
          - exceptionInterceptor : ExceptionInterceptor
          # JDBC4MysqlSQLXML()
          # JDBC4MysqlSQLXML()
          + free()
          + getString()
          - checkClosed()
          - checkWorkingWithResult()
          + setString()
          + isEmpty()
          + getBinaryStream()
          + getCharacterStream()
          + getSource()
          + setBinaryStream()
          - setBinaryStreamInternal()
          + setCharacterStream()
          - setCharacterStreamInternal()
          + setResult()
          - binaryInputStreamStreamToReader()
          # readerToString()
          # serializeAsCharacterStream()
          # domSourceToString()
          # serializeAsString()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class SimpleSaxToReader {
          ~ buf : StringBuilder
          - inCDATA : boolean
          + startDocument()
          + endDocument()
          + startElement()
          + characters()
          + ignorableWhitespace()
          + startCDATA()
          + endCDATA()
          + comment()
          ~ toReader()
          - escapeCharsForXml()
          - escapeCharsForXml()
          - escapeCharsForXml()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4NClob {
          ~ JDBC4NClob()
          ~ JDBC4NClob()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4PreparedStatement {
          + JDBC4PreparedStatement()
          + JDBC4PreparedStatement()
          + JDBC4PreparedStatement()
          + setRowId()
          + setNClob()
          + setSQLXML()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4PreparedStatementHelper {
          - JDBC4PreparedStatementHelper()
          {static} ~ setRowId()
          {static} ~ setNClob()
          {static} ~ setNClob()
          {static} ~ setNClob()
          {static} ~ setSQLXML()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4ReplicationMySQLConnection {
          + JDBC4ReplicationMySQLConnection()
          - getJDBC4Connection()
          + createSQLXML()
          + createArrayOf()
          + createStruct()
          + getClientInfo()
          + getClientInfo()
          + isValid()
          + setClientInfo()
          + setClientInfo()
          + isWrapperFor()
          + unwrap()
          + createBlob()
          + createClob()
          + createNClob()
          + getClientInfoProviderImpl()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4ResultSet {
          + JDBC4ResultSet()
          + JDBC4ResultSet()
          + getNCharacterStream()
          + getNCharacterStream()
          + getNClob()
          + getNClob()
          # getNativeNClob()
          - getStringForNClob()
          - getNClobFromString()
          + getNString()
          + getNString()
          + updateNCharacterStream()
          + updateNCharacterStream()
          + updateNClob()
          + updateRowId()
          + updateRowId()
          + getHoldability()
          + getRowId()
          + getRowId()
          + getSQLXML()
          + getSQLXML()
          + updateAsciiStream()
          + updateAsciiStream()
          + updateAsciiStream()
          + updateAsciiStream()
          + updateBinaryStream()
          + updateBinaryStream()
          + updateBinaryStream()
          + updateBinaryStream()
          + updateBlob()
          + updateBlob()
          + updateBlob()
          + updateBlob()
          + updateCharacterStream()
          + updateCharacterStream()
          + updateCharacterStream()
          + updateCharacterStream()
          + updateClob()
          + updateClob()
          + updateClob()
          + updateClob()
          + updateNCharacterStream()
          + updateNCharacterStream()
          + updateNCharacterStream()
          + updateNCharacterStream()
          + updateNClob()
          + updateNClob()
          + updateNClob()
          + updateNClob()
          + updateNClob()
          + updateNString()
          + updateNString()
          + updateSQLXML()
          + updateSQLXML()
          + isWrapperFor()
          + unwrap()
          + getObject()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4ServerPreparedStatement {
          + JDBC4ServerPreparedStatement()
          + setNCharacterStream()
          + setNClob()
          + setNClob()
          + setNString()
          + setRowId()
          + setSQLXML()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JDBC4UpdatableResultSet {
          + JDBC4UpdatableResultSet()
          + updateAsciiStream()
          + updateAsciiStream()
          + updateBinaryStream()
          + updateBinaryStream()
          + updateBlob()
          + updateBlob()
          + updateCharacterStream()
          + updateCharacterStream()
          + updateClob()
          + updateClob()
          + updateNCharacterStream()
          + updateNCharacterStream()
          + updateNClob()
          + updateNClob()
          + updateSQLXML()
          + updateRowId()
          + updateAsciiStream()
          + updateAsciiStream()
          + updateBinaryStream()
          + updateBinaryStream()
          + updateBlob()
          + updateBlob()
          + updateCharacterStream()
          + updateCharacterStream()
          + updateClob()
          + updateClob()
          + updateNCharacterStream()
          + updateNCharacterStream()
          + updateNClob()
          + updateNClob()
          + updateSQLXML()
          + updateNCharacterStream()
          + updateNCharacterStream()
          + updateNClob()
          + updateNClob()
          + updateNString()
          + updateNString()
          + getHoldability()
          # getNativeNClob()
          + getNCharacterStream()
          + getNCharacterStream()
          + getNClob()
          + getNClob()
          - getNClobFromString()
          + getNString()
          + getNString()
          + getRowId()
          + getRowId()
          + getSQLXML()
          + getSQLXML()
          - getStringForNClob()
          + isClosed()
          + isWrapperFor()
          + unwrap()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class LicenseConfiguration {
          {static} ~ checkLicenseType()
          - LicenseConfiguration()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface LoadBalanceExceptionChecker {
          {abstract} + shouldExceptionTriggerFailover()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class LoadBalancedAutoCommitInterceptor {
          - matchingAfterStatementCount : int
          - matchingAfterStatementThreshold : int
          - matchingAfterStatementRegex : String
          - conn : ConnectionImpl
          - proxy : LoadBalancedConnectionProxy
          - countStatements : boolean
          + destroy()
          + executeTopLevelOnly()
          + init()
          + postProcess()
          + preProcess()
          ~ pauseCounters()
          ~ resumeCounters()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface LoadBalancedConnection {
          {abstract} + addHost()
          {abstract} + removeHost()
          {abstract} + removeHostWhenNotInUse()
          {abstract} + ping()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class LoadBalancedConnectionProxy {
          - connectionGroup : ConnectionGroup
          - connectionGroupProxyID : long
          # liveConnections : Map<String, ConnectionImpl>
          - hostsToListIndexMap : Map<String, Integer>
          - connectionsToHostsMap : Map<ConnectionImpl, String>
          - totalPhysicalConnections : long
          - responseTimes : long[]
          - retriesAllDown : int
          - balancer : BalanceStrategy
          - autoCommitSwapThreshold : int
          {static} + BLACKLIST_TIMEOUT_PROPERTY_KEY : String
          - globalBlacklistTimeout : int
          {static} - globalBlacklist : Map<String, Long>
          {static} + HOST_REMOVAL_GRACE_PERIOD_PROPERTY_KEY : String
          - hostRemovalGracePeriod : int
          - hostsToRemove : Set<String>
          - inTransaction : boolean
          - transactionStartTime : long
          - transactionCount : long
          - exceptionChecker : LoadBalanceExceptionChecker
          {static} - JDBC_4_LB_CONNECTION_CTOR : Constructor<?>
          {static} - INTERFACES_TO_PROXY : Class<?>[]
          {static} - nullLBConnectionInstance : LoadBalancedConnection
          {static} + createProxyInstance()
          - LoadBalancedConnectionProxy()
          ~ getNewWrapperForThisAsConnection()
          # propagateProxyDown()
          ~ shouldExceptionTriggerConnectionSwitch()
          ~ isMasterConnection()
          ~ invalidateConnection()
          ~ pickNewConnection()
          + createConnectionForHost()
          ~ syncSessionState()
          - closeAllConnections()
          ~ doClose()
          ~ doAbortInternal()
          ~ doAbort()
          + invokeMore()
          + doPing()
          + addToGlobalBlacklist()
          + addToGlobalBlacklist()
          + isGlobalBlacklistEnabled()
          + getGlobalBlacklist()
          + removeHostWhenNotInUse()
          + removeHost()
          + addHost()
          + inTransaction()
          + getTransactionCount()
          + getActivePhysicalConnectionCount()
          + getTotalPhysicalConnectionCount()
          + getConnectionGroupProxyID()
          + getCurrentActiveHost()
          + getCurrentTransactionDuration()
          {static} ~ getNullLoadBalancedConnectionInstance()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NullLoadBalancedConnectionProxy {
          + NullLoadBalancedConnectionProxy()
          + invoke()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class LoadBalancedMySQLConnection {
          + LoadBalancedMySQLConnection()
          # getThisAsProxy()
          + close()
          + ping()
          + ping()
          + addHost()
          + removeHost()
          + removeHostWhenNotInUse()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Messages {
          {static} - BUNDLE_NAME : String
          {static} - RESOURCE_BUNDLE : ResourceBundle
          {static} + getString()
          {static} + getString()
          - Messages()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class MiniAdmin {
          - conn : Connection
          + MiniAdmin()
          + MiniAdmin()
          + MiniAdmin()
          + shutdown()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      abstract class MultiHostConnectionProxy {
          {static} - METHOD_GET_MULTI_HOST_SAFE_PROXY : String
          {static} - METHOD_EQUALS : String
          {static} - METHOD_HASH_CODE : String
          {static} - METHOD_CLOSE : String
          {static} - METHOD_ABORT_INTERNAL : String
          {static} - METHOD_ABORT : String
          {static} - METHOD_IS_CLOSED : String
          {static} - METHOD_GET_AUTO_COMMIT : String
          {static} - METHOD_GET_CATALOG : String
          {static} - METHOD_GET_TRANSACTION_ISOLATION : String
          {static} - METHOD_GET_SESSION_MAX_ROWS : String
          ~ hostList : List<String>
          ~ localProps : Properties
          ~ autoReconnect : boolean
          ~ thisAsConnection : MySQLConnection
          ~ proxyConnection : MySQLConnection
          ~ currentConnection : MySQLConnection
          ~ isClosed : boolean
          ~ closedExplicitly : boolean
          ~ closedReason : String
          # lastExceptionDealtWith : Throwable
          {static} - JDBC_4_MS_CONNECTION_CTOR : Constructor<?>
          ~ MultiHostConnectionProxy()
          ~ MultiHostConnectionProxy()
          ~ initializeHostsSpecs()
          ~ getNewWrapperForThisAsConnection()
          # getProxy()
          # setProxy()
          # propagateProxyDown()
          ~ proxyIfReturnTypeIsJdbcInterface()
          ~ getNewJdbcInterfaceProxy()
          ~ dealWithInvocationException()
          {abstract} ~ shouldExceptionTriggerConnectionSwitch()
          {abstract} ~ isMasterConnection()
          ~ invalidateCurrentConnection()
          ~ invalidateConnection()
          {abstract} ~ pickNewConnection()
          ~ createConnectionForHost()
          ~ syncSessionState()
          ~ syncSessionState()
          {abstract} ~ doClose()
          {abstract} ~ doAbortInternal()
          {abstract} ~ doAbort()
          + invoke()
          {abstract} ~ invokeMore()
          # allowedOnClosedConnection()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class JdbcInterfaceProxy {
          ~ invokeOn : Object
          ~ JdbcInterfaceProxy()
          + invoke()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class MultiHostMySQLConnection {
          # thisAsProxy : MultiHostConnectionProxy
          + MultiHostMySQLConnection()
          # getThisAsProxy()
          + getActiveMySQLConnection()
          + abortInternal()
          + changeUser()
          + checkClosed()
          + clearHasTriedMaster()
          + clearWarnings()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + clientPrepareStatement()
          + close()
          + commit()
          + createNewIO()
          + createStatement()
          + createStatement()
          + createStatement()
          + dumpTestcaseQuery()
          + duplicate()
          + execSQL()
          + execSQL()
          + extractSqlFromPacket()
          + exposeAsXml()
          + getAllowLoadLocalInfile()
          + getAllowMultiQueries()
          + getAllowNanAndInf()
          + getAllowUrlInLocalInfile()
          + getAlwaysSendSetIsolation()
          + getAutoClosePStmtStreams()
          + getAutoDeserialize()
          + getAutoGenerateTestcaseScript()
          + getAutoReconnectForPools()
          + getAutoSlowLog()
          + getBlobSendChunkSize()
          + getBlobsAreStrings()
          + getCacheCallableStatements()
          + getCacheCallableStmts()
          + getCachePrepStmts()
          + getCachePreparedStatements()
          + getCacheResultSetMetadata()
          + getCacheServerConfiguration()
          + getCallableStatementCacheSize()
          + getCallableStmtCacheSize()
          + getCapitalizeTypeNames()
          + getCharacterSetResults()
          + getClientCertificateKeyStorePassword()
          + getClientCertificateKeyStoreType()
          + getClientCertificateKeyStoreUrl()
          + getClientInfoProvider()
          + getClobCharacterEncoding()
          + getClobberStreamingResults()
          + getCompensateOnDuplicateKeyUpdateCounts()
          + getConnectTimeout()
          + getConnectionCollation()
          + getConnectionLifecycleInterceptors()
          + getContinueBatchOnError()
          + getCreateDatabaseIfNotExist()
          + getDefaultFetchSize()
          + getDontTrackOpenResources()
          + getDumpMetadataOnColumnNotFound()
          + getDumpQueriesOnException()
          + getDynamicCalendars()
          + getElideSetAutoCommits()
          + getEmptyStringsConvertToZero()
          + getEmulateLocators()
          + getEmulateUnsupportedPstmts()
          + getEnablePacketDebug()
          + getEnableQueryTimeouts()
          + getEncoding()
          + getExceptionInterceptors()
          + getExplainSlowQueries()
          + getFailOverReadOnly()
          + getFunctionsNeverReturnBlobs()
          + getGatherPerfMetrics()
          + getGatherPerformanceMetrics()
          + getGenerateSimpleParameterMetadata()
          + getIgnoreNonTxTables()
          + getIncludeInnodbStatusInDeadlockExceptions()
          + getInitialTimeout()
          + getInteractiveClient()
          + getIsInteractiveClient()
          + getJdbcCompliantTruncation()
          + getJdbcCompliantTruncationForReads()
          + getLargeRowSizeThreshold()
          + getLoadBalanceBlacklistTimeout()
          + getLoadBalancePingTimeout()
          + getLoadBalanceStrategy()
          + getServerAffinityOrder()
          + getLoadBalanceValidateConnectionOnSwapServer()
          + getLocalSocketAddress()
          + getLocatorFetchBufferSize()
          + getLogSlowQueries()
          + getLogXaCommands()
          + getLogger()
          + getLoggerClassName()
          + getMaintainTimeStats()
          + getMaxAllowedPacket()
          + getMaxQuerySizeToLog()
          + getMaxReconnects()
          + getMaxRows()
          + getMetadataCacheSize()
          + getNetTimeoutForStreamingResults()
          + getNoAccessToProcedureBodies()
          + getNoDatetimeStringSync()
          + getNoTimezoneConversionForTimeType()
          + getNoTimezoneConversionForDateType()
          + getCacheDefaultTimezone()
          + getNullCatalogMeansCurrent()
          + getNullNamePatternMatchesAll()
          + getOverrideSupportsIntegrityEnhancementFacility()
          + getPacketDebugBufferSize()
          + getPadCharsWithSpace()
          + getParanoid()
          + getPasswordCharacterEncoding()
          + getPedantic()
          + getPinGlobalTxToPhysicalConnection()
          + getPopulateInsertRowWithDefaultValues()
          + getPrepStmtCacheSize()
          + getPrepStmtCacheSqlLimit()
          + getPreparedStatementCacheSize()
          + getPreparedStatementCacheSqlLimit()
          + getProcessEscapeCodesForPrepStmts()
          + getProfileSQL()
          + getProfileSql()
          + getProfilerEventHandler()
          + getPropertiesTransform()
          + getQueriesBeforeRetryMaster()
          + getQueryTimeoutKillsConnection()
          + getReconnectAtTxEnd()
          + getRelaxAutoCommit()
          + getReportMetricsIntervalMillis()
          + getRequireSSL()
          + getResourceId()
          + getResultSetSizeThreshold()
          + getRetainStatementAfterResultSetClose()
          + getRetriesAllDown()
          + getRewriteBatchedStatements()
          + getRollbackOnPooledClose()
          + getRoundRobinLoadBalance()
          + getRunningCTS13()
          + getSecondsBeforeRetryMaster()
          + getSelfDestructOnPingMaxOperations()
          + getSelfDestructOnPingSecondsLifetime()
          + getServerTimezone()
          + getSessionVariables()
          + getSlowQueryThresholdMillis()
          + getSlowQueryThresholdNanos()
          + getSocketFactory()
          + getSocketFactoryClassName()
          + getSocketTimeout()
          + getStatementInterceptors()
          + getStrictFloatingPoint()
          + getStrictUpdates()
          + getTcpKeepAlive()
          + getTcpNoDelay()
          + getTcpRcvBuf()
          + getTcpSndBuf()
          + getTcpTrafficClass()
          + getTinyInt1isBit()
          + getTraceProtocol()
          + getTransformedBitIsBoolean()
          + getTreatUtilDateAsTimestamp()
          + getTrustCertificateKeyStorePassword()
          + getTrustCertificateKeyStoreType()
          + getTrustCertificateKeyStoreUrl()
          + getUltraDevHack()
          + getUseAffectedRows()
          + getUseBlobToStoreUTF8OutsideBMP()
          + getUseColumnNamesInFindColumn()
          + getUseCompression()
          + getUseConfigs()
          + getUseCursorFetch()
          + getUseDirectRowUnpack()
          + getUseDynamicCharsetInfo()
          + getUseFastDateParsing()
          + getUseFastIntParsing()
          + getUseGmtMillisForDatetimes()
          + getUseHostsInPrivileges()
          + getUseInformationSchema()
          + getUseJDBCCompliantTimezoneShift()
          + getUseJvmCharsetConverters()
          + getUseLegacyDatetimeCode()
          + getSendFractionalSeconds()
          + getUseLocalSessionState()
          + getUseLocalTransactionState()
          + getUseNanosForElapsedTime()
          + getUseOldAliasMetadataBehavior()
          + getUseOldUTF8Behavior()
          + getUseOnlyServerErrorMessages()
          + getUseReadAheadInput()
          + getUseSSL()
          + getUseSSPSCompatibleTimezoneShift()
          + getUseServerPrepStmts()
          + getUseServerPreparedStmts()
          + getUseSqlStateCodes()
          + getUseStreamLengthsInPrepStmts()
          + getUseTimezone()
          + getUseUltraDevWorkAround()
          + getUseUnbufferedInput()
          + getUseUnicode()
          + getUseUsageAdvisor()
          + getUtf8OutsideBmpExcludedColumnNamePattern()
          + getUtf8OutsideBmpIncludedColumnNamePattern()
          + getVerifyServerCertificate()
          + getYearIsDateType()
          + getZeroDateTimeBehavior()
          + setAllowLoadLocalInfile()
          + setAllowMultiQueries()
          + setAllowNanAndInf()
          + setAllowUrlInLocalInfile()
          + setAlwaysSendSetIsolation()
          + setAutoClosePStmtStreams()
          + setAutoDeserialize()
          + setAutoGenerateTestcaseScript()
          + setAutoReconnect()
          + setAutoReconnectForConnectionPools()
          + setAutoReconnectForPools()
          + setAutoSlowLog()
          + setBlobSendChunkSize()
          + setBlobsAreStrings()
          + setCacheCallableStatements()
          + setCacheCallableStmts()
          + setCachePrepStmts()
          + setCachePreparedStatements()
          + setCacheResultSetMetadata()
          + setCacheServerConfiguration()
          + setCallableStatementCacheSize()
          + setCallableStmtCacheSize()
          + setCapitalizeDBMDTypes()
          + setCapitalizeTypeNames()
          + setCharacterEncoding()
          + setCharacterSetResults()
          + setClientCertificateKeyStorePassword()
          + setClientCertificateKeyStoreType()
          + setClientCertificateKeyStoreUrl()
          + setClientInfoProvider()
          + setClobCharacterEncoding()
          + setClobberStreamingResults()
          + setCompensateOnDuplicateKeyUpdateCounts()
          + setConnectTimeout()
          + setConnectionCollation()
          + setConnectionLifecycleInterceptors()
          + setContinueBatchOnError()
          + setCreateDatabaseIfNotExist()
          + setDefaultFetchSize()
          + setDetectServerPreparedStmts()
          + setDontTrackOpenResources()
          + setDumpMetadataOnColumnNotFound()
          + setDumpQueriesOnException()
          + setDynamicCalendars()
          + setElideSetAutoCommits()
          + setEmptyStringsConvertToZero()
          + setEmulateLocators()
          + setEmulateUnsupportedPstmts()
          + setEnablePacketDebug()
          + setEnableQueryTimeouts()
          + setEncoding()
          + setExceptionInterceptors()
          + setExplainSlowQueries()
          + setFailOverReadOnly()
          + setFunctionsNeverReturnBlobs()
          + setGatherPerfMetrics()
          + setGatherPerformanceMetrics()
          + setGenerateSimpleParameterMetadata()
          + setHoldResultsOpenOverStatementClose()
          + setIgnoreNonTxTables()
          + setIncludeInnodbStatusInDeadlockExceptions()
          + setInitialTimeout()
          + setInteractiveClient()
          + setIsInteractiveClient()
          + setJdbcCompliantTruncation()
          + setJdbcCompliantTruncationForReads()
          + setLargeRowSizeThreshold()
          + setLoadBalanceBlacklistTimeout()
          + setLoadBalancePingTimeout()
          + setLoadBalanceStrategy()
          + setServerAffinityOrder()
          + setLoadBalanceValidateConnectionOnSwapServer()
          + setLocalSocketAddress()
          + setLocatorFetchBufferSize()
          + setLogSlowQueries()
          + setLogXaCommands()
          + setLogger()
          + setLoggerClassName()
          + setMaintainTimeStats()
          + setMaxQuerySizeToLog()
          + setMaxReconnects()
          + setMaxRows()
          + setMetadataCacheSize()
          + setNetTimeoutForStreamingResults()
          + setNoAccessToProcedureBodies()
          + setNoDatetimeStringSync()
          + setNoTimezoneConversionForTimeType()
          + setNoTimezoneConversionForDateType()
          + setCacheDefaultTimezone()
          + setNullCatalogMeansCurrent()
          + setNullNamePatternMatchesAll()
          + setOverrideSupportsIntegrityEnhancementFacility()
          + setPacketDebugBufferSize()
          + setPadCharsWithSpace()
          + setParanoid()
          + setPasswordCharacterEncoding()
          + setPedantic()
          + setPinGlobalTxToPhysicalConnection()
          + setPopulateInsertRowWithDefaultValues()
          + setPrepStmtCacheSize()
          + setPrepStmtCacheSqlLimit()
          + setPreparedStatementCacheSize()
          + setPreparedStatementCacheSqlLimit()
          + setProcessEscapeCodesForPrepStmts()
          + setProfileSQL()
          + setProfileSql()
          + setProfilerEventHandler()
          + setPropertiesTransform()
          + setQueriesBeforeRetryMaster()
          + setQueryTimeoutKillsConnection()
          + setReconnectAtTxEnd()
          + setRelaxAutoCommit()
          + setReportMetricsIntervalMillis()
          + setRequireSSL()
          + setResourceId()
          + setResultSetSizeThreshold()
          + setRetainStatementAfterResultSetClose()
          + setRetriesAllDown()
          + setRewriteBatchedStatements()
          + setRollbackOnPooledClose()
          + setRoundRobinLoadBalance()
          + setRunningCTS13()
          + setSecondsBeforeRetryMaster()
          + setSelfDestructOnPingMaxOperations()
          + setSelfDestructOnPingSecondsLifetime()
          + setServerTimezone()
          + setSessionVariables()
          + setSlowQueryThresholdMillis()
          + setSlowQueryThresholdNanos()
          + setSocketFactory()
          + setSocketFactoryClassName()
          + setSocketTimeout()
          + setStatementInterceptors()
          + setStrictFloatingPoint()
          + setStrictUpdates()
          + setTcpKeepAlive()
          + setTcpNoDelay()
          + setTcpRcvBuf()
          + setTcpSndBuf()
          + setTcpTrafficClass()
          + setTinyInt1isBit()
          + setTraceProtocol()
          + setTransformedBitIsBoolean()
          + setTreatUtilDateAsTimestamp()
          + setTrustCertificateKeyStorePassword()
          + setTrustCertificateKeyStoreType()
          + setTrustCertificateKeyStoreUrl()
          + setUltraDevHack()
          + setUseAffectedRows()
          + setUseBlobToStoreUTF8OutsideBMP()
          + setUseColumnNamesInFindColumn()
          + setUseCompression()
          + setUseConfigs()
          + setUseCursorFetch()
          + setUseDirectRowUnpack()
          + setUseDynamicCharsetInfo()
          + setUseFastDateParsing()
          + setUseFastIntParsing()
          + setUseGmtMillisForDatetimes()
          + setUseHostsInPrivileges()
          + setUseInformationSchema()
          + setUseJDBCCompliantTimezoneShift()
          + setUseJvmCharsetConverters()
          + setUseLegacyDatetimeCode()
          + setSendFractionalSeconds()
          + setUseLocalSessionState()
          + setUseLocalTransactionState()
          + setUseNanosForElapsedTime()
          + setUseOldAliasMetadataBehavior()
          + setUseOldUTF8Behavior()
          + setUseOnlyServerErrorMessages()
          + setUseReadAheadInput()
          + setUseSSL()
          + setUseSSPSCompatibleTimezoneShift()
          + setUseServerPrepStmts()
          + setUseServerPreparedStmts()
          + setUseSqlStateCodes()
          + setUseStreamLengthsInPrepStmts()
          + setUseTimezone()
          + setUseUltraDevWorkAround()
          + setUseUnbufferedInput()
          + setUseUnicode()
          + setUseUsageAdvisor()
          + setUtf8OutsideBmpExcludedColumnNamePattern()
          + setUtf8OutsideBmpIncludedColumnNamePattern()
          + setVerifyServerCertificate()
          + setYearIsDateType()
          + setZeroDateTimeBehavior()
          + useUnbufferedInput()
          + generateConnectionCommentBlock()
          + getActiveStatementCount()
          + getAutoCommit()
          + getAutoIncrementIncrement()
          + getCachedMetaData()
          + getCalendarInstanceForSessionOrNew()
          + getCancelTimer()
          + getCatalog()
          + getCharacterSetMetadata()
          + getCharsetConverter()
          + getCharsetNameForIndex()
          + getEncodingForIndex()
          + getDefaultTimeZone()
          + getErrorMessageEncoding()
          + getExceptionInterceptor()
          + getHoldability()
          + getHost()
          + getHostPortPair()
          + getId()
          + getIdleFor()
          + getIO()
          + getLoadBalanceSafeProxy()
          + getMultiHostSafeProxy()
          + getLog()
          + getMaxBytesPerChar()
          + getMaxBytesPerChar()
          + getMetaData()
          + getMetadataSafeStatement()
          + getNetBufferLength()
          + getProperties()
          + getRequiresEscapingEncoder()
          + getServerCharacterEncoding()
          + getServerCharset()
          + getServerMajorVersion()
          + getServerMinorVersion()
          + getServerSubMinorVersion()
          + getServerTimezoneTZ()
          + getServerVariable()
          + getServerVersion()
          + getSessionLockedCalendar()
          + getStatementComment()
          + getStatementInterceptorsInstances()
          + getTransactionIsolation()
          + getTypeMap()
          + getURL()
          + getUser()
          + getUtcCalendar()
          + getWarnings()
          + hasSameProperties()
          + hasTriedMaster()
          + incrementNumberOfPreparedExecutes()
          + incrementNumberOfPrepares()
          + incrementNumberOfResultSetsCreated()
          + initializeExtension()
          + initializeResultsMetadataFromCache()
          + initializeSafeStatementInterceptors()
          + isAbonormallyLongQuery()
          + isClientTzUTC()
          + isCursorFetchEnabled()
          + isInGlobalTx()
          + isMasterConnection()
          + isNoBackslashEscapesSet()
          + isReadInfoMsgEnabled()
          + isReadOnly()
          + isReadOnly()
          + isRunningOnJDK13()
          + isSameResource()
          + isServerTzUTC()
          + lowerCaseTableNames()
          + nativeSQL()
          + parserKnowsUnicode()
          + ping()
          + pingInternal()
          + prepareCall()
          + prepareCall()
          + prepareCall()
          + prepareStatement()
          + prepareStatement()
          + prepareStatement()
          + prepareStatement()
          + prepareStatement()
          + prepareStatement()
          + realClose()
          + recachePreparedStatement()
          + decachePreparedStatement()
          + registerQueryExecutionTime()
          + registerStatement()
          + releaseSavepoint()
          + reportNumberOfTablesAccessed()
          + reportQueryTime()
          + resetServerState()
          + rollback()
          + rollback()
          + serverPrepareStatement()
          + serverPrepareStatement()
          + serverPrepareStatement()
          + serverPrepareStatement()
          + serverPrepareStatement()
          + serverPrepareStatement()
          + serverSupportsConvertFn()
          + setAutoCommit()
          + setCatalog()
          + setFailedOver()
          + setHoldability()
          + setInGlobalTx()
          + setPreferSlaveDuringFailover()
          + setProxy()
          + setReadInfoMsgEnabled()
          + setReadOnly()
          + setReadOnlyInternal()
          + setSavepoint()
          + setSavepoint()
          + setStatementComment()
          + setTransactionIsolation()
          + shutdownServer()
          + storesLowerCaseTableName()
          + supportsIsolationLevel()
          + supportsQuotedIdentifiers()
          + supportsTransactions()
          + throwConnectionClosedException()
          + transactionBegun()
          + transactionCompleted()
          + unregisterStatement()
          + unSafeStatementInterceptors()
          + useAnsiQuotedIdentifiers()
          + versionMeetsMinimum()
          + isClosed()
          + getHoldResultsOpenOverStatementClose()
          + getLoadBalanceConnectionGroup()
          + getLoadBalanceEnableJMX()
          + getLoadBalanceExceptionChecker()
          + getLoadBalanceSQLExceptionSubclassFailover()
          + getLoadBalanceSQLStateFailover()
          + setLoadBalanceConnectionGroup()
          + setLoadBalanceEnableJMX()
          + setLoadBalanceExceptionChecker()
          + setLoadBalanceSQLExceptionSubclassFailover()
          + setLoadBalanceSQLStateFailover()
          + setLoadBalanceHostRemovalGracePeriod()
          + getLoadBalanceHostRemovalGracePeriod()
          + isProxySet()
          + getLoadBalanceAutoCommitStatementRegex()
          + getLoadBalanceAutoCommitStatementThreshold()
          + setLoadBalanceAutoCommitStatementRegex()
          + setLoadBalanceAutoCommitStatementThreshold()
          + getIncludeThreadDumpInDeadlockExceptions()
          + setIncludeThreadDumpInDeadlockExceptions()
          + setTypeMap()
          + getIncludeThreadNamesAsStatementComment()
          + setIncludeThreadNamesAsStatementComment()
          + isServerLocal()
          + setAuthenticationPlugins()
          + getAuthenticationPlugins()
          + setDisabledAuthenticationPlugins()
          + getDisabledAuthenticationPlugins()
          + setDefaultAuthenticationPlugin()
          + getDefaultAuthenticationPlugin()
          + setParseInfoCacheFactory()
          + getParseInfoCacheFactory()
          + setSchema()
          + getSchema()
          + abort()
          + setNetworkTimeout()
          + getNetworkTimeout()
          + setServerConfigCacheFactory()
          + getServerConfigCacheFactory()
          + setDisconnectOnExpiredPasswords()
          + getDisconnectOnExpiredPasswords()
          + setGetProceduresReturnsFunctions()
          + getGetProceduresReturnsFunctions()
          + getConnectionMutex()
          + getConnectionAttributes()
          + getAllowMasterDownConnections()
          + setAllowMasterDownConnections()
          + getAllowSlaveDownConnections()
          + setAllowSlaveDownConnections()
          + getReadFromMasterWhenNoSlaves()
          + setReadFromMasterWhenNoSlaves()
          + getReplicationEnableJMX()
          + setReplicationEnableJMX()
          + setDetectCustomCollations()
          + getDetectCustomCollations()
          + getSessionMaxRows()
          + setSessionMaxRows()
          + getProfilerEventHandlerInstance()
          + setProfilerEventHandlerInstance()
          + getServerRSAPublicKeyFile()
          + setServerRSAPublicKeyFile()
          + getAllowPublicKeyRetrieval()
          + setAllowPublicKeyRetrieval()
          + setDontCheckOnDuplicateKeyUpdateInSQL()
          + getDontCheckOnDuplicateKeyUpdateInSQL()
          + setSocksProxyHost()
          + getSocksProxyHost()
          + setSocksProxyPort()
          + getSocksProxyPort()
          + getReadOnlyPropagatesToServer()
          + setReadOnlyPropagatesToServer()
          + getEnabledSSLCipherSuites()
          + setEnabledSSLCipherSuites()
          + getEnabledTLSProtocols()
          + setEnabledTLSProtocols()
          + getEnableEscapeProcessing()
          + setEnableEscapeProcessing()
          + isUseSSLExplicit()
          + isServerTruncatesFracSecs()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface MySQLConnection {
          {abstract} + isProxySet()
          {abstract} + createNewIO()
          {abstract} + dumpTestcaseQuery()
          {abstract} + duplicate()
          {abstract} + execSQL()
          {abstract} + execSQL()
          {abstract} + extractSqlFromPacket()
          {abstract} + generateConnectionCommentBlock()
          {abstract} + getActiveStatementCount()
          {abstract} + getAutoIncrementIncrement()
          {abstract} + getCachedMetaData()
          {abstract} + getCalendarInstanceForSessionOrNew()
          {abstract} + getCancelTimer()
          {abstract} + getCharacterSetMetadata()
          {abstract} + getCharsetConverter()
          {abstract} + getCharsetNameForIndex()
          {abstract} + getEncodingForIndex()
          {abstract} + getDefaultTimeZone()
          {abstract} + getErrorMessageEncoding()
          {abstract} + getExceptionInterceptor()
          {abstract} + getHost()
          {abstract} + getHostPortPair()
          {abstract} + getId()
          {abstract} + getIdleFor()
          {abstract} + getIO()
          {abstract} + getLog()
          {abstract} + getMaxBytesPerChar()
          {abstract} + getMaxBytesPerChar()
          {abstract} + getMetadataSafeStatement()
          {abstract} + getNetBufferLength()
          {abstract} + getProperties()
          {abstract} + getRequiresEscapingEncoder()
          {abstract} + getServerCharset()
          {abstract} + getServerMajorVersion()
          {abstract} + getServerMinorVersion()
          {abstract} + getServerSubMinorVersion()
          {abstract} + getServerTimezoneTZ()
          {abstract} + getServerVariable()
          {abstract} + getServerVersion()
          {abstract} + getSessionLockedCalendar()
          {abstract} + getStatementComment()
          {abstract} + getStatementInterceptorsInstances()
          {abstract} + getURL()
          {abstract} + getUser()
          {abstract} + getUtcCalendar()
          {abstract} + incrementNumberOfPreparedExecutes()
          {abstract} + incrementNumberOfPrepares()
          {abstract} + incrementNumberOfResultSetsCreated()
          {abstract} + initializeResultsMetadataFromCache()
          {abstract} + initializeSafeStatementInterceptors()
          {abstract} + isAbonormallyLongQuery()
          {abstract} + isClientTzUTC()
          {abstract} + isCursorFetchEnabled()
          {abstract} + isReadInfoMsgEnabled()
          {abstract} + isReadOnly()
          {abstract} + isReadOnly()
          {abstract} + isRunningOnJDK13()
          {abstract} + isServerTzUTC()
          {abstract} + lowerCaseTableNames()
          {abstract} + pingInternal()
          {abstract} + realClose()
          {abstract} + recachePreparedStatement()
          {abstract} + decachePreparedStatement()
          {abstract} + registerQueryExecutionTime()
          {abstract} + registerStatement()
          {abstract} + reportNumberOfTablesAccessed()
          {abstract} + serverSupportsConvertFn()
          {abstract} + setProxy()
          {abstract} + setReadInfoMsgEnabled()
          {abstract} + setReadOnlyInternal()
          {abstract} + shutdownServer()
          {abstract} + storesLowerCaseTableName()
          {abstract} + throwConnectionClosedException()
          {abstract} + transactionBegun()
          {abstract} + transactionCompleted()
          {abstract} + unregisterStatement()
          {abstract} + unSafeStatementInterceptors()
          {abstract} + useAnsiQuotedIdentifiers()
          {abstract} + getConnectionAttributes()
          {abstract} + getLoadBalanceSafeProxy()
          {abstract} + getMultiHostSafeProxy()
          {abstract} + getActiveMySQLConnection()
          {abstract} + getProfilerEventHandlerInstance()
          {abstract} + setProfilerEventHandlerInstance()
          {abstract} + isServerTruncatesFracSecs()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class MysqlCharset {
          + charsetName : String
          + mblen : int
          + priority : int
          + javaEncodingsUc : List<String>
          + major : int
          + minor : int
          + subminor : int
          + MysqlCharset()
          - addEncodingMapping()
          + MysqlCharset()
          + MysqlCharset()
          + toString()
          ~ isOkayForVersion()
          ~ getMatchingJavaEncoding()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class MysqlDataTruncation {
          {static} ~ serialVersionUID : long
          - message : String
          - vendorErrorCode : int
          + MysqlDataTruncation()
          + getErrorCode()
          + getMessage()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class MysqlDefs {
          {static} ~ COM_BINLOG_DUMP : int
          {static} ~ COM_CHANGE_USER : int
          {static} ~ COM_CLOSE_STATEMENT : int
          {static} ~ COM_CONNECT_OUT : int
          {static} ~ COM_END : int
          {static} ~ COM_EXECUTE : int
          {static} ~ COM_FETCH : int
          {static} ~ COM_LONG_DATA : int
          {static} ~ COM_PREPARE : int
          {static} ~ COM_REGISTER_SLAVE : int
          {static} ~ COM_RESET_STMT : int
          {static} ~ COM_SET_OPTION : int
          {static} ~ COM_TABLE_DUMP : int
          {static} ~ CONNECT : int
          {static} ~ CREATE_DB : int
          {static} ~ DEBUG : int
          {static} ~ DELAYED_INSERT : int
          {static} ~ DROP_DB : int
          {static} ~ FIELD_LIST : int
          {static} ~ FIELD_TYPE_BIT : int
          {static} + FIELD_TYPE_BLOB : int
          {static} ~ FIELD_TYPE_DATE : int
          {static} ~ FIELD_TYPE_DATETIME : int
          {static} ~ FIELD_TYPE_DECIMAL : int
          {static} ~ FIELD_TYPE_DOUBLE : int
          {static} ~ FIELD_TYPE_ENUM : int
          {static} ~ FIELD_TYPE_FLOAT : int
          {static} ~ FIELD_TYPE_GEOMETRY : int
          {static} ~ FIELD_TYPE_INT24 : int
          {static} ~ FIELD_TYPE_LONG : int
          {static} ~ FIELD_TYPE_LONG_BLOB : int
          {static} ~ FIELD_TYPE_LONGLONG : int
          {static} ~ FIELD_TYPE_MEDIUM_BLOB : int
          {static} ~ FIELD_TYPE_NEW_DECIMAL : int
          {static} ~ FIELD_TYPE_NEWDATE : int
          {static} ~ FIELD_TYPE_NULL : int
          {static} ~ FIELD_TYPE_SET : int
          {static} ~ FIELD_TYPE_SHORT : int
          {static} ~ FIELD_TYPE_STRING : int
          {static} ~ FIELD_TYPE_TIME : int
          {static} ~ FIELD_TYPE_TIMESTAMP : int
          {static} ~ FIELD_TYPE_TINY : int
          {static} ~ FIELD_TYPE_TINY_BLOB : int
          {static} ~ FIELD_TYPE_VAR_STRING : int
          {static} ~ FIELD_TYPE_VARCHAR : int
          {static} ~ FIELD_TYPE_YEAR : int
          {static} ~ FIELD_TYPE_JSON : int
          {static} ~ INIT_DB : int
          {static} ~ LENGTH_BLOB : long
          {static} ~ LENGTH_LONGBLOB : long
          {static} ~ LENGTH_MEDIUMBLOB : long
          {static} ~ LENGTH_TINYBLOB : long
          {static} ~ MAX_ROWS : int
          {static} + NO_CHARSET_INFO : int
          {static} ~ OPEN_CURSOR_FLAG : byte
          {static} ~ PING : int
          {static} ~ PROCESS_INFO : int
          {static} ~ PROCESS_KILL : int
          {static} ~ QUERY : int
          {static} ~ QUIT : int
          {static} ~ RELOAD : int
          {static} ~ SHUTDOWN : int
          {static} ~ SLEEP : int
          {static} ~ STATISTICS : int
          {static} ~ TIME : int
          {static} - mysqlToJdbcTypesMap : Map<String, Integer>
          {static} ~ mysqlToJavaType()
          {static} ~ mysqlToJavaType()
          {static} + typeToName()
          {static} ~ appendJdbcTypeMappingQuery()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class MysqlErrorNumbers {
          {static} + ER_ERROR_MESSAGES : int
          {static} + ER_HASHCHK : int
          {static} + ER_NISAMCHK : int
          {static} + ER_NO : int
          {static} + ER_YES : int
          {static} + ER_CANT_CREATE_FILE : int
          {static} + ER_CANT_CREATE_TABLE : int
          {static} + ER_CANT_CREATE_DB : int
          {static} + ER_DB_CREATE_EXISTS : int
          {static} + ER_DB_DROP_EXISTS : int
          {static} + ER_DB_DROP_DELETE : int
          {static} + ER_DB_DROP_RMDIR : int
          {static} + ER_CANT_DELETE_FILE : int
          {static} + ER_CANT_FIND_SYSTEM_REC : int
          {static} + ER_CANT_GET_STAT : int
          {static} + ER_CANT_GET_WD : int
          {static} + ER_CANT_LOCK : int
          {static} + ER_CANT_OPEN_FILE : int
          {static} + ER_FILE_NOT_FOUND : int
          {static} + ER_CANT_READ_DIR : int
          {static} + ER_CANT_SET_WD : int
          {static} + ER_CHECKREAD : int
          {static} + ER_DISK_FULL : int
          {static} + ER_DUP_KEY : int
          {static} + ER_ERROR_ON_CLOSE : int
          {static} + ER_ERROR_ON_READ : int
          {static} + ER_ERROR_ON_RENAME : int
          {static} + ER_ERROR_ON_WRITE : int
          {static} + ER_FILE_USED : int
          {static} + ER_FILSORT_ABORT : int
          {static} + ER_FORM_NOT_FOUND : int
          {static} + ER_GET_ERRNO : int
          {static} + ER_ILLEGAL_HA : int
          {static} + ER_KEY_NOT_FOUND : int
          {static} + ER_NOT_FORM_FILE : int
          {static} + ER_NOT_KEYFILE : int
          {static} + ER_OLD_KEYFILE : int
          {static} + ER_OPEN_AS_READONLY : int
          {static} + ER_OUTOFMEMORY : int
          {static} + ER_OUT_OF_SORTMEMORY : int
          {static} + ER_UNEXPECTED_EOF : int
          {static} + ER_CON_COUNT_ERROR : int
          {static} + ER_OUT_OF_RESOURCES : int
          {static} + ER_BAD_HOST_ERROR : int
          {static} + ER_HANDSHAKE_ERROR : int
          {static} + ER_DBACCESS_DENIED_ERROR : int
          {static} + ER_ACCESS_DENIED_ERROR : int
          {static} + ER_NO_DB_ERROR : int
          {static} + ER_UNKNOWN_COM_ERROR : int
          {static} + ER_BAD_NULL_ERROR : int
          {static} + ER_BAD_DB_ERROR : int
          {static} + ER_TABLE_EXISTS_ERROR : int
          {static} + ER_BAD_TABLE_ERROR : int
          {static} + ER_NON_UNIQ_ERROR : int
          {static} + ER_SERVER_SHUTDOWN : int
          {static} + ER_BAD_FIELD_ERROR : int
          {static} + ER_WRONG_FIELD_WITH_GROUP : int
          {static} + ER_WRONG_GROUP_FIELD : int
          {static} + ER_WRONG_SUM_SELECT : int
          {static} + ER_WRONG_VALUE_COUNT : int
          {static} + ER_TOO_LONG_IDENT : int
          {static} + ER_DUP_FIELDNAME : int
          {static} + ER_DUP_KEYNAME : int
          {static} + ER_DUP_ENTRY : int
          {static} + ER_WRONG_FIELD_SPEC : int
          {static} + ER_PARSE_ERROR : int
          {static} + ER_EMPTY_QUERY : int
          {static} + ER_NONUNIQ_TABLE : int
          {static} + ER_INVALID_DEFAULT : int
          {static} + ER_MULTIPLE_PRI_KEY : int
          {static} + ER_TOO_MANY_KEYS : int
          {static} + ER_TOO_MANY_KEY_PARTS : int
          {static} + ER_TOO_LONG_KEY : int
          {static} + ER_KEY_COLUMN_DOES_NOT_EXITS : int
          {static} + ER_BLOB_USED_AS_KEY : int
          {static} + ER_TOO_BIG_FIELDLENGTH : int
          {static} + ER_WRONG_AUTO_KEY : int
          {static} + ER_READY : int
          {static} + ER_NORMAL_SHUTDOWN : int
          {static} + ER_GOT_SIGNAL : int
          {static} + ER_SHUTDOWN_COMPLETE : int
          {static} + ER_FORCING_CLOSE : int
          {static} + ER_IPSOCK_ERROR : int
          {static} + ER_NO_SUCH_INDEX : int
          {static} + ER_WRONG_FIELD_TERMINATORS : int
          {static} + ER_BLOBS_AND_NO_TERMINATED : int
          {static} + ER_TEXTFILE_NOT_READABLE : int
          {static} + ER_FILE_EXISTS_ERROR : int
          {static} + ER_LOAD_INFO : int
          {static} + ER_ALTER_INFO : int
          {static} + ER_WRONG_SUB_KEY : int
          {static} + ER_CANT_REMOVE_ALL_FIELDS : int
          {static} + ER_CANT_DROP_FIELD_OR_KEY : int
          {static} + ER_INSERT_INFO : int
          {static} + ER_UPDATE_TABLE_USED : int
          {static} + ER_NO_SUCH_THREAD : int
          {static} + ER_KILL_DENIED_ERROR : int
          {static} + ER_NO_TABLES_USED : int
          {static} + ER_TOO_BIG_SET : int
          {static} + ER_NO_UNIQUE_LOGFILE : int
          {static} + ER_TABLE_NOT_LOCKED_FOR_WRITE : int
          {static} + ER_TABLE_NOT_LOCKED : int
          {static} + ER_BLOB_CANT_HAVE_DEFAULT : int
          {static} + ER_WRONG_DB_NAME : int
          {static} + ER_WRONG_TABLE_NAME : int
          {static} + ER_TOO_BIG_SELECT : int
          {static} + ER_UNKNOWN_ERROR : int
          {static} + ER_UNKNOWN_PROCEDURE : int
          {static} + ER_WRONG_PARAMCOUNT_TO_PROCEDURE : int
          {static} + ER_WRONG_PARAMETERS_TO_PROCEDURE : int
          {static} + ER_UNKNOWN_TABLE : int
          {static} + ER_FIELD_SPECIFIED_TWICE : int
          {static} + ER_INVALID_GROUP_FUNC_USE : int
          {static} + ER_UNSUPPORTED_EXTENSION : int
          {static} + ER_TABLE_MUST_HAVE_COLUMNS : int
          {static} + ER_RECORD_FILE_FULL : int
          {static} + ER_UNKNOWN_CHARACTER_SET : int
          {static} + ER_TOO_MANY_TABLES : int
          {static} + ER_TOO_MANY_FIELDS : int
          {static} + ER_TOO_BIG_ROWSIZE : int
          {static} + ER_STACK_OVERRUN : int
          {static} + ER_WRONG_OUTER_JOIN : int
          {static} + ER_NULL_COLUMN_IN_INDEX : int
          {static} + ER_CANT_FIND_UDF : int
          {static} + ER_CANT_INITIALIZE_UDF : int
          {static} + ER_UDF_NO_PATHS : int
          {static} + ER_UDF_EXISTS : int
          {static} + ER_CANT_OPEN_LIBRARY : int
          {static} + ER_CANT_FIND_DL_ENTRY : int
          {static} + ER_FUNCTION_NOT_DEFINED : int
          {static} + ER_HOST_IS_BLOCKED : int
          {static} + ER_HOST_NOT_PRIVILEGED : int
          {static} + ER_PASSWORD_ANONYMOUS_USER : int
          {static} + ER_PASSWORD_NOT_ALLOWED : int
          {static} + ER_PASSWORD_NO_MATCH : int
          {static} + ER_UPDATE_INFO : int
          {static} + ER_CANT_CREATE_THREAD : int
          {static} + ER_WRONG_VALUE_COUNT_ON_ROW : int
          {static} + ER_CANT_REOPEN_TABLE : int
          {static} + ER_INVALID_USE_OF_NULL : int
          {static} + ER_REGEXP_ERROR : int
          {static} + ER_MIX_OF_GROUP_FUNC_AND_FIELDS : int
          {static} + ER_NONEXISTING_GRANT : int
          {static} + ER_TABLEACCESS_DENIED_ERROR : int
          {static} + ER_COLUMNACCESS_DENIED_ERROR : int
          {static} + ER_ILLEGAL_GRANT_FOR_TABLE : int
          {static} + ER_GRANT_WRONG_HOST_OR_USER : int
          {static} + ER_NO_SUCH_TABLE : int
          {static} + ER_NONEXISTING_TABLE_GRANT : int
          {static} + ER_NOT_ALLOWED_COMMAND : int
          {static} + ER_SYNTAX_ERROR : int
          {static} + ER_DELAYED_CANT_CHANGE_LOCK : int
          {static} + ER_TOO_MANY_DELAYED_THREADS : int
          {static} + ER_ABORTING_CONNECTION : int
          {static} + ER_NET_PACKET_TOO_LARGE : int
          {static} + ER_NET_READ_ERROR_FROM_PIPE : int
          {static} + ER_NET_FCNTL_ERROR : int
          {static} + ER_NET_PACKETS_OUT_OF_ORDER : int
          {static} + ER_NET_UNCOMPRESS_ERROR : int
          {static} + ER_NET_READ_ERROR : int
          {static} + ER_NET_READ_INTERRUPTED : int
          {static} + ER_NET_ERROR_ON_WRITE : int
          {static} + ER_NET_WRITE_INTERRUPTED : int
          {static} + ER_TOO_LONG_STRING : int
          {static} + ER_TABLE_CANT_HANDLE_BLOB : int
          {static} + ER_TABLE_CANT_HANDLE_AUTO_INCREMENT : int
          {static} + ER_DELAYED_INSERT_TABLE_LOCKED : int
          {static} + ER_WRONG_COLUMN_NAME : int
          {static} + ER_WRONG_KEY_COLUMN : int
          {static} + ER_WRONG_MRG_TABLE : int
          {static} + ER_DUP_UNIQUE : int
          {static} + ER_BLOB_KEY_WITHOUT_LENGTH : int
          {static} + ER_PRIMARY_CANT_HAVE_NULL : int
          {static} + ER_TOO_MANY_ROWS : int
          {static} + ER_REQUIRES_PRIMARY_KEY : int
          {static} + ER_NO_RAID_COMPILED : int
          {static} + ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE : int
          {static} + ER_KEY_DOES_NOT_EXITS : int
          {static} + ER_CHECK_NO_SUCH_TABLE : int
          {static} + ER_CHECK_NOT_IMPLEMENTED : int
          {static} + ER_CANT_DO_THIS_DURING_AN_TRANSACTION : int
          {static} + ER_ERROR_DURING_COMMIT : int
          {static} + ER_ERROR_DURING_ROLLBACK : int
          {static} + ER_ERROR_DURING_FLUSH_LOGS : int
          {static} + ER_ERROR_DURING_CHECKPOINT : int
          {static} + ER_NEW_ABORTING_CONNECTION : int
          {static} + ER_DUMP_NOT_IMPLEMENTED : int
          {static} + ER_FLUSH_MASTER_BINLOG_CLOSED : int
          {static} + ER_INDEX_REBUILD : int
          {static} + ER_MASTER : int
          {static} + ER_MASTER_NET_READ : int
          {static} + ER_MASTER_NET_WRITE : int
          {static} + ER_FT_MATCHING_KEY_NOT_FOUND : int
          {static} + ER_LOCK_OR_ACTIVE_TRANSACTION : int
          {static} + ER_UNKNOWN_SYSTEM_VARIABLE : int
          {static} + ER_CRASHED_ON_USAGE : int
          {static} + ER_CRASHED_ON_REPAIR : int
          {static} + ER_WARNING_NOT_COMPLETE_ROLLBACK : int
          {static} + ER_TRANS_CACHE_FULL : int
          {static} + ER_SLAVE_MUST_STOP : int
          {static} + ER_SLAVE_NOT_RUNNING : int
          {static} + ER_BAD_SLAVE : int
          {static} + ER_MASTER_INFO : int
          {static} + ER_SLAVE_THREAD : int
          {static} + ER_TOO_MANY_USER_CONNECTIONS : int
          {static} + ER_SET_CONSTANTS_ONLY : int
          {static} + ER_LOCK_WAIT_TIMEOUT : int
          {static} + ER_LOCK_TABLE_FULL : int
          {static} + ER_READ_ONLY_TRANSACTION : int
          {static} + ER_DROP_DB_WITH_READ_LOCK : int
          {static} + ER_CREATE_DB_WITH_READ_LOCK : int
          {static} + ER_WRONG_ARGUMENTS : int
          {static} + ER_NO_PERMISSION_TO_CREATE_USER : int
          {static} + ER_UNION_TABLES_IN_DIFFERENT_DIR : int
          {static} + ER_LOCK_DEADLOCK : int
          {static} + ER_TABLE_CANT_HANDLE_FT : int
          {static} + ER_CANNOT_ADD_FOREIGN : int
          {static} + ER_NO_REFERENCED_ROW : int
          {static} + ER_ROW_IS_REFERENCED : int
          {static} + ER_CONNECT_TO_MASTER : int
          {static} + ER_QUERY_ON_MASTER : int
          {static} + ER_ERROR_WHEN_EXECUTING_COMMAND : int
          {static} + ER_WRONG_USAGE : int
          {static} + ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT : int
          {static} + ER_CANT_UPDATE_WITH_READLOCK : int
          {static} + ER_MIXING_NOT_ALLOWED : int
          {static} + ER_DUP_ARGUMENT : int
          {static} + ER_USER_LIMIT_REACHED : int
          {static} + ER_SPECIFIC_ACCESS_DENIED_ERROR : int
          {static} + ER_LOCAL_VARIABLE : int
          {static} + ER_GLOBAL_VARIABLE : int
          {static} + ER_NO_DEFAULT : int
          {static} + ER_WRONG_VALUE_FOR_VAR : int
          {static} + ER_WRONG_TYPE_FOR_VAR : int
          {static} + ER_VAR_CANT_BE_READ : int
          {static} + ER_CANT_USE_OPTION_HERE : int
          {static} + ER_NOT_SUPPORTED_YET : int
          {static} + ER_MASTER_FATAL_ERROR_READING_BINLOG : int
          {static} + ER_SLAVE_IGNORED_TABLE : int
          {static} + ER_INCORRECT_GLOBAL_LOCAL_VAR : int
          {static} + ER_WRONG_FK_DEF : int
          {static} + ER_KEY_REF_DO_NOT_MATCH_TABLE_REF : int
          {static} + ER_OPERAND_COLUMNS : int
          {static} + ER_SUBQUERY_NO_1_ROW : int
          {static} + ER_UNKNOWN_STMT_HANDLER : int
          {static} + ER_CORRUPT_HELP_DB : int
          {static} + ER_CYCLIC_REFERENCE : int
          {static} + ER_AUTO_CONVERT : int
          {static} + ER_ILLEGAL_REFERENCE : int
          {static} + ER_DERIVED_MUST_HAVE_ALIAS : int
          {static} + ER_SELECT_REDUCED : int
          {static} + ER_TABLENAME_NOT_ALLOWED_HERE : int
          {static} + ER_NOT_SUPPORTED_AUTH_MODE : int
          {static} + ER_SPATIAL_CANT_HAVE_NULL : int
          {static} + ER_COLLATION_CHARSET_MISMATCH : int
          {static} + ER_SLAVE_WAS_RUNNING : int
          {static} + ER_SLAVE_WAS_NOT_RUNNING : int
          {static} + ER_TOO_BIG_FOR_UNCOMPRESS : int
          {static} + ER_ZLIB_Z_MEM_ERROR : int
          {static} + ER_ZLIB_Z_BUF_ERROR : int
          {static} + ER_ZLIB_Z_DATA_ERROR : int
          {static} + ER_CUT_VALUE_GROUP_CONCAT : int
          {static} + ER_WARN_TOO_FEW_RECORDS : int
          {static} + ER_WARN_TOO_MANY_RECORDS : int
          {static} + ER_WARN_NULL_TO_NOTNULL : int
          {static} + ER_WARN_DATA_OUT_OF_RANGE : int
          {static} + ER_WARN_DATA_TRUNCATED : int
          {static} + ER_WARN_USING_OTHER_HANDLER : int
          {static} + ER_CANT_AGGREGATE_2COLLATIONS : int
          {static} + ER_DROP_USER : int
          {static} + ER_REVOKE_GRANTS : int
          {static} + ER_CANT_AGGREGATE_3COLLATIONS : int
          {static} + ER_CANT_AGGREGATE_NCOLLATIONS : int
          {static} + ER_VARIABLE_IS_NOT_STRUCT : int
          {static} + ER_UNKNOWN_COLLATION : int
          {static} + ER_SLAVE_IGNORED_SSL_PARAMS : int
          {static} + ER_SERVER_IS_IN_SECURE_AUTH_MODE : int
          {static} + ER_WARN_FIELD_RESOLVED : int
          {static} + ER_BAD_SLAVE_UNTIL_COND : int
          {static} + ER_MISSING_SKIP_SLAVE : int
          {static} + ER_UNTIL_COND_IGNORED : int
          {static} + ER_WRONG_NAME_FOR_INDEX : int
          {static} + ER_WRONG_NAME_FOR_CATALOG : int
          {static} + ER_WARN_QC_RESIZE : int
          {static} + ER_BAD_FT_COLUMN : int
          {static} + ER_UNKNOWN_KEY_CACHE : int
          {static} + ER_WARN_HOSTNAME_WONT_WORK : int
          {static} + ER_UNKNOWN_STORAGE_ENGINE : int
          {static} + ER_WARN_DEPRECATED_SYNTAX : int
          {static} + ER_NON_UPDATABLE_TABLE : int
          {static} + ER_FEATURE_DISABLED : int
          {static} + ER_OPTION_PREVENTS_STATEMENT : int
          {static} + ER_DUPLICATED_VALUE_IN_TYPE : int
          {static} + ER_TRUNCATED_WRONG_VALUE : int
          {static} + ER_TOO_MUCH_AUTO_TIMESTAMP_COLS : int
          {static} + ER_INVALID_ON_UPDATE : int
          {static} + ER_UNSUPPORTED_PS : int
          {static} + ER_GET_ERRMSG : int
          {static} + ER_GET_TEMPORARY_ERRMSG : int
          {static} + ER_UNKNOWN_TIME_ZONE : int
          {static} + ER_WARN_INVALID_TIMESTAMP : int
          {static} + ER_INVALID_CHARACTER_STRING : int
          {static} + ER_WARN_ALLOWED_PACKET_OVERFLOWED : int
          {static} + ER_CONFLICTING_DECLARATIONS : int
          {static} + ER_SP_NO_RECURSIVE_CREATE : int
          {static} + ER_SP_ALREADY_EXISTS : int
          {static} + ER_SP_DOES_NOT_EXIST : int
          {static} + ER_SP_DROP_FAILED : int
          {static} + ER_SP_STORE_FAILED : int
          {static} + ER_SP_LILABEL_MISMATCH : int
          {static} + ER_SP_LABEL_REDEFINE : int
          {static} + ER_SP_LABEL_MISMATCH : int
          {static} + ER_SP_UNINIT_VAR : int
          {static} + ER_SP_BADSELECT : int
          {static} + ER_SP_BADRETURN : int
          {static} + ER_SP_BADSTATEMENT : int
          {static} + ER_UPDATE_LOG_DEPRECATED_IGNORED : int
          {static} + ER_UPDATE_LOG_DEPRECATED_TRANSLATED : int
          {static} + ER_QUERY_INTERRUPTED : int
          {static} + ER_SP_WRONG_NO_OF_ARGS : int
          {static} + ER_SP_COND_MISMATCH : int
          {static} + ER_SP_NORETURN : int
          {static} + ER_SP_NORETURNEND : int
          {static} + ER_SP_BAD_CURSOR_QUERY : int
          {static} + ER_SP_BAD_CURSOR_SELECT : int
          {static} + ER_SP_CURSOR_MISMATCH : int
          {static} + ER_SP_CURSOR_ALREADY_OPEN : int
          {static} + ER_SP_CURSOR_NOT_OPEN : int
          {static} + ER_SP_UNDECLARED_VAR : int
          {static} + ER_SP_WRONG_NO_OF_FETCH_ARGS : int
          {static} + ER_SP_FETCH_NO_DATA : int
          {static} + ER_SP_DUP_PARAM : int
          {static} + ER_SP_DUP_VAR : int
          {static} + ER_SP_DUP_COND : int
          {static} + ER_SP_DUP_CURS : int
          {static} + ER_SP_CANT_ALTER : int
          {static} + ER_SP_SUBSELECT_NYI : int
          {static} + ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG : int
          {static} + ER_SP_VARCOND_AFTER_CURSHNDLR : int
          {static} + ER_SP_CURSOR_AFTER_HANDLER : int
          {static} + ER_SP_CASE_NOT_FOUND : int
          {static} + ER_FPARSER_TOO_BIG_FILE : int
          {static} + ER_FPARSER_BAD_HEADER : int
          {static} + ER_FPARSER_EOF_IN_COMMENT : int
          {static} + ER_FPARSER_ERROR_IN_PARAMETER : int
          {static} + ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER : int
          {static} + ER_VIEW_NO_EXPLAIN : int
          {static} + ER_FRM_UNKNOWN_TYPE : int
          {static} + ER_WRONG_OBJECT : int
          {static} + ER_NONUPDATEABLE_COLUMN : int
          {static} + ER_VIEW_SELECT_DERIVED : int
          {static} + ER_VIEW_SELECT_CLAUSE : int
          {static} + ER_VIEW_SELECT_VARIABLE : int
          {static} + ER_VIEW_SELECT_TMPTABLE : int
          {static} + ER_VIEW_WRONG_LIST : int
          {static} + ER_WARN_VIEW_MERGE : int
          {static} + ER_WARN_VIEW_WITHOUT_KEY : int
          {static} + ER_VIEW_INVALID : int
          {static} + ER_SP_NO_DROP_SP : int
          {static} + ER_SP_GOTO_IN_HNDLR : int
          {static} + ER_TRG_ALREADY_EXISTS : int
          {static} + ER_TRG_DOES_NOT_EXIST : int
          {static} + ER_TRG_ON_VIEW_OR_TEMP_TABLE : int
          {static} + ER_TRG_CANT_CHANGE_ROW : int
          {static} + ER_TRG_NO_SUCH_ROW_IN_TRG : int
          {static} + ER_NO_DEFAULT_FOR_FIELD : int
          {static} + ER_DIVISION_BY_ZERO : int
          {static} + ER_TRUNCATED_WRONG_VALUE_FOR_FIELD : int
          {static} + ER_ILLEGAL_VALUE_FOR_TYPE : int
          {static} + ER_VIEW_NONUPD_CHECK : int
          {static} + ER_VIEW_CHECK_FAILED : int
          {static} + ER_PROCACCESS_DENIED_ERROR : int
          {static} + ER_RELAY_LOG_FAIL : int
          {static} + ER_PASSWD_LENGTH : int
          {static} + ER_UNKNOWN_TARGET_BINLOG : int
          {static} + ER_IO_ERR_LOG_INDEX_READ : int
          {static} + ER_BINLOG_PURGE_PROHIBITED : int
          {static} + ER_FSEEK_FAIL : int
          {static} + ER_BINLOG_PURGE_FATAL_ERR : int
          {static} + ER_LOG_IN_USE : int
          {static} + ER_LOG_PURGE_UNKNOWN_ERR : int
          {static} + ER_RELAY_LOG_INIT : int
          {static} + ER_NO_BINARY_LOGGING : int
          {static} + ER_RESERVED_SYNTAX : int
          {static} + ER_WSAS_FAILED : int
          {static} + ER_DIFF_GROUPS_PROC : int
          {static} + ER_NO_GROUP_FOR_PROC : int
          {static} + ER_ORDER_WITH_PROC : int
          {static} + ER_LOGGING_PROHIBIT_CHANGING_OF : int
          {static} + ER_NO_FILE_MAPPING : int
          {static} + ER_WRONG_MAGIC : int
          {static} + ER_PS_MANY_PARAM : int
          {static} + ER_KEY_PART_0 : int
          {static} + ER_VIEW_CHECKSUM : int
          {static} + ER_VIEW_MULTIUPDATE : int
          {static} + ER_VIEW_NO_INSERT_FIELD_LIST : int
          {static} + ER_VIEW_DELETE_MERGE_VIEW : int
          {static} + ER_CANNOT_USER : int
          {static} + ER_XAER_NOTA : int
          {static} + ER_XAER_INVAL : int
          {static} + ER_XAER_RMFAIL : int
          {static} + ER_XAER_OUTSIDE : int
          {static} + ER_XA_RMERR : int
          {static} + ER_XA_RBROLLBACK : int
          {static} + ER_NONEXISTING_PROC_GRANT : int
          {static} + ER_PROC_AUTO_GRANT_FAIL : int
          {static} + ER_PROC_AUTO_REVOKE_FAIL : int
          {static} + ER_DATA_TOO_LONG : int
          {static} + ER_SP_BAD_SQLSTATE : int
          {static} + ER_STARTUP : int
          {static} + ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR : int
          {static} + ER_CANT_CREATE_USER_WITH_GRANT : int
          {static} + ER_WRONG_VALUE_FOR_TYPE : int
          {static} + ER_TABLE_DEF_CHANGED : int
          {static} + ER_SP_DUP_HANDLER : int
          {static} + ER_SP_NOT_VAR_ARG : int
          {static} + ER_SP_NO_RETSET : int
          {static} + ER_CANT_CREATE_GEOMETRY_OBJECT : int
          {static} + ER_FAILED_ROUTINE_BREAK_BINLOG : int
          {static} + ER_BINLOG_UNSAFE_ROUTINE : int
          {static} + ER_BINLOG_CREATE_ROUTINE_NEED_SUPER : int
          {static} + ER_EXEC_STMT_WITH_OPEN_CURSOR : int
          {static} + ER_STMT_HAS_NO_OPEN_CURSOR : int
          {static} + ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG : int
          {static} + ER_NO_DEFAULT_FOR_VIEW_FIELD : int
          {static} + ER_SP_NO_RECURSION : int
          {static} + ER_TOO_BIG_SCALE : int
          {static} + ER_TOO_BIG_PRECISION : int
          {static} + ER_M_BIGGER_THAN_D : int
          {static} + ER_WRONG_LOCK_OF_SYSTEM_TABLE : int
          {static} + ER_CONNECT_TO_FOREIGN_DATA_SOURCE : int
          {static} + ER_QUERY_ON_FOREIGN_DATA_SOURCE : int
          {static} + ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST : int
          {static} + ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE : int
          {static} + ER_FOREIGN_DATA_STRING_INVALID : int
          {static} + ER_CANT_CREATE_FEDERATED_TABLE : int
          {static} + ER_TRG_IN_WRONG_SCHEMA : int
          {static} + ER_STACK_OVERRUN_NEED_MORE : int
          {static} + ER_TOO_LONG_BODY : int
          {static} + ER_WARN_CANT_DROP_DEFAULT_KEYCACHE : int
          {static} + ER_TOO_BIG_DISPLAYWIDTH : int
          {static} + ER_XAER_DUPID : int
          {static} + ER_DATETIME_FUNCTION_OVERFLOW : int
          {static} + ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG : int
          {static} + ER_VIEW_PREVENT_UPDATE : int
          {static} + ER_PS_NO_RECURSION : int
          {static} + ER_SP_CANT_SET_AUTOCOMMIT : int
          {static} + ER_MALFORMED_DEFINER : int
          {static} + ER_VIEW_FRM_NO_USER : int
          {static} + ER_VIEW_OTHER_USER : int
          {static} + ER_NO_SUCH_USER : int
          {static} + ER_FORBID_SCHEMA_CHANGE : int
          {static} + ER_ROW_IS_REFERENCED_2 : int
          {static} + ER_NO_REFERENCED_ROW_2 : int
          {static} + ER_SP_BAD_VAR_SHADOW : int
          {static} + ER_TRG_NO_DEFINER : int
          {static} + ER_OLD_FILE_FORMAT : int
          {static} + ER_SP_RECURSION_LIMIT : int
          {static} + ER_SP_PROC_TABLE_CORRUPT : int
          {static} + ER_SP_WRONG_NAME : int
          {static} + ER_TABLE_NEEDS_UPGRADE : int
          {static} + ER_SP_NO_AGGREGATE : int
          {static} + ER_MAX_PREPARED_STMT_COUNT_REACHED : int
          {static} + ER_VIEW_RECURSIVE : int
          {static} + ER_NON_GROUPING_FIELD_USED : int
          {static} + ER_TABLE_CANT_HANDLE_SPKEYS : int
          {static} + ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA : int
          {static} + ER_REMOVED_SPACES : int
          {static} + ER_AUTOINC_READ_FAILED : int
          {static} + ER_USERNAME : int
          {static} + ER_HOSTNAME : int
          {static} + ER_WRONG_STRING_LENGTH : int
          {static} + ER_NON_INSERTABLE_TABLE : int
          {static} + ER_ADMIN_WRONG_MRG_TABLE : int
          {static} + ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT : int
          {static} + ER_NAME_BECOMES_EMPTY : int
          {static} + ER_AMBIGUOUS_FIELD_TERM : int
          {static} + ER_FOREIGN_SERVER_EXISTS : int
          {static} + ER_FOREIGN_SERVER_DOESNT_EXIST : int
          {static} + ER_ILLEGAL_HA_CREATE_OPTION : int
          {static} + ER_PARTITION_REQUIRES_VALUES_ERROR : int
          {static} + ER_PARTITION_WRONG_VALUES_ERROR : int
          {static} + ER_PARTITION_MAXVALUE_ERROR : int
          {static} + ER_PARTITION_SUBPARTITION_ERROR : int
          {static} + ER_PARTITION_SUBPART_MIX_ERROR : int
          {static} + ER_PARTITION_WRONG_NO_PART_ERROR : int
          {static} + ER_PARTITION_WRONG_NO_SUBPART_ERROR : int
          {static} + ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR : int
          {static} + ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR : int
          {static} + ER_FIELD_NOT_FOUND_PART_ERROR : int
          {static} + ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR : int
          {static} + ER_INCONSISTENT_PARTITION_INFO_ERROR : int
          {static} + ER_PARTITION_FUNC_NOT_ALLOWED_ERROR : int
          {static} + ER_PARTITIONS_MUST_BE_DEFINED_ERROR : int
          {static} + ER_RANGE_NOT_INCREASING_ERROR : int
          {static} + ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR : int
          {static} + ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR : int
          {static} + ER_PARTITION_ENTRY_ERROR : int
          {static} + ER_MIX_HANDLER_ERROR : int
          {static} + ER_PARTITION_NOT_DEFINED_ERROR : int
          {static} + ER_TOO_MANY_PARTITIONS_ERROR : int
          {static} + ER_SUBPARTITION_ERROR : int
          {static} + ER_CANT_CREATE_HANDLER_FILE : int
          {static} + ER_BLOB_FIELD_IN_PART_FUNC_ERROR : int
          {static} + ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF : int
          {static} + ER_NO_PARTS_ERROR : int
          {static} + ER_PARTITION_MGMT_ON_NONPARTITIONED : int
          {static} + ER_FOREIGN_KEY_ON_PARTITIONED : int
          {static} + ER_DROP_PARTITION_NON_EXISTENT : int
          {static} + ER_DROP_LAST_PARTITION : int
          {static} + ER_COALESCE_ONLY_ON_HASH_PARTITION : int
          {static} + ER_REORG_HASH_ONLY_ON_SAME_NO : int
          {static} + ER_REORG_NO_PARAM_ERROR : int
          {static} + ER_ONLY_ON_RANGE_LIST_PARTITION : int
          {static} + ER_ADD_PARTITION_SUBPART_ERROR : int
          {static} + ER_ADD_PARTITION_NO_NEW_PARTITION : int
          {static} + ER_COALESCE_PARTITION_NO_PARTITION : int
          {static} + ER_REORG_PARTITION_NOT_EXIST : int
          {static} + ER_SAME_NAME_PARTITION : int
          {static} + ER_NO_BINLOG_ERROR : int
          {static} + ER_CONSECUTIVE_REORG_PARTITIONS : int
          {static} + ER_REORG_OUTSIDE_RANGE : int
          {static} + ER_PARTITION_FUNCTION_FAILURE : int
          {static} + ER_PART_STATE_ERROR : int
          {static} + ER_LIMITED_PART_RANGE : int
          {static} + ER_PLUGIN_IS_NOT_LOADED : int
          {static} + ER_WRONG_VALUE : int
          {static} + ER_NO_PARTITION_FOR_GIVEN_VALUE : int
          {static} + ER_FILEGROUP_OPTION_ONLY_ONCE : int
          {static} + ER_CREATE_FILEGROUP_FAILED : int
          {static} + ER_DROP_FILEGROUP_FAILED : int
          {static} + ER_TABLESPACE_AUTO_EXTEND_ERROR : int
          {static} + ER_WRONG_SIZE_NUMBER : int
          {static} + ER_SIZE_OVERFLOW_ERROR : int
          {static} + ER_ALTER_FILEGROUP_FAILED : int
          {static} + ER_BINLOG_ROW_LOGGING_FAILED : int
          {static} + ER_BINLOG_ROW_WRONG_TABLE_DEF : int
          {static} + ER_BINLOG_ROW_RBR_TO_SBR : int
          {static} + ER_EVENT_ALREADY_EXISTS : int
          {static} + ER_EVENT_STORE_FAILED : int
          {static} + ER_EVENT_DOES_NOT_EXIST : int
          {static} + ER_EVENT_CANT_ALTER : int
          {static} + ER_EVENT_DROP_FAILED : int
          {static} + ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG : int
          {static} + ER_EVENT_ENDS_BEFORE_STARTS : int
          {static} + ER_EVENT_EXEC_TIME_IN_THE_PAST : int
          {static} + ER_EVENT_OPEN_TABLE_FAILED : int
          {static} + ER_EVENT_NEITHER_M_EXPR_NOR_M_AT : int
          {static} + ER_COL_COUNT_DOESNT_MATCH_CORRUPTED : int
          {static} + ER_CANNOT_LOAD_FROM_TABLE : int
          {static} + ER_EVENT_CANNOT_DELETE : int
          {static} + ER_EVENT_COMPILE_ERROR : int
          {static} + ER_EVENT_SAME_NAME : int
          {static} + ER_EVENT_DATA_TOO_LONG : int
          {static} + ER_DROP_INDEX_FK : int
          {static} + ER_WARN_DEPRECATED_SYNTAX_WITH_VER : int
          {static} + ER_CANT_WRITE_LOCK_LOG_TABLE : int
          {static} + ER_CANT_LOCK_LOG_TABLE : int
          {static} + ER_FOREIGN_DUPLICATE_KEY : int
          {static} + ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE : int
          {static} + ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR : int
          {static} + ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT : int
          {static} + ER_NDB_CANT_SWITCH_BINLOG_FORMAT : int
          {static} + ER_PARTITION_NO_TEMPORARY : int
          {static} + ER_PARTITION_CONST_DOMAIN_ERROR : int
          {static} + ER_PARTITION_FUNCTION_IS_NOT_ALLOWED : int
          {static} + ER_DDL_LOG_ERROR : int
          {static} + ER_NULL_IN_VALUES_LESS_THAN : int
          {static} + ER_WRONG_PARTITION_NAME : int
          {static} + ER_CANT_CHANGE_TX_ISOLATION : int
          {static} + ER_DUP_ENTRY_AUTOINCREMENT_CASE : int
          {static} + ER_EVENT_MODIFY_QUEUE_ERROR : int
          {static} + ER_EVENT_SET_VAR_ERROR : int
          {static} + ER_PARTITION_MERGE_ERROR : int
          {static} + ER_CANT_ACTIVATE_LOG : int
          {static} + ER_RBR_NOT_AVAILABLE : int
          {static} + ER_BASE64_DECODE_ERROR : int
          {static} + ER_EVENT_RECURSION_FORBIDDEN : int
          {static} + ER_EVENTS_DB_ERROR : int
          {static} + ER_ONLY_INTEGERS_ALLOWED : int
          {static} + ER_UNSUPORTED_LOG_ENGINE : int
          {static} + ER_BAD_LOG_STATEMENT : int
          {static} + ER_CANT_RENAME_LOG_TABLE : int
          {static} + ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT : int
          {static} + ER_WRONG_PARAMETERS_TO_NATIVE_FCT : int
          {static} + ER_WRONG_PARAMETERS_TO_STORED_FCT : int
          {static} + ER_NATIVE_FCT_NAME_COLLISION : int
          {static} + ER_DUP_ENTRY_WITH_KEY_NAME : int
          {static} + ER_BINLOG_PURGE_EMFILE : int
          {static} + ER_EVENT_CANNOT_CREATE_IN_THE_PAST : int
          {static} + ER_EVENT_CANNOT_ALTER_IN_THE_PAST : int
          {static} + ER_SLAVE_INCIDENT : int
          {static} + ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT : int
          {static} + ER_BINLOG_UNSAFE_STATEMENT : int
          {static} + ER_SLAVE_FATAL_ERROR : int
          {static} + ER_SLAVE_RELAY_LOG_READ_FAILURE : int
          {static} + ER_SLAVE_RELAY_LOG_WRITE_FAILURE : int
          {static} + ER_SLAVE_CREATE_EVENT_FAILURE : int
          {static} + ER_SLAVE_MASTER_COM_FAILURE : int
          {static} + ER_BINLOG_LOGGING_IMPOSSIBLE : int
          {static} + ER_VIEW_NO_CREATION_CTX : int
          {static} + ER_VIEW_INVALID_CREATION_CTX : int
          {static} + ER_SR_INVALID_CREATION_CTX : int
          {static} + ER_TRG_CORRUPTED_FILE : int
          {static} + ER_TRG_NO_CREATION_CTX : int
          {static} + ER_TRG_INVALID_CREATION_CTX : int
          {static} + ER_EVENT_INVALID_CREATION_CTX : int
          {static} + ER_TRG_CANT_OPEN_TABLE : int
          {static} + ER_CANT_CREATE_SROUTINE : int
          {static} + ER_NEVER_USED : int
          {static} + ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT : int
          {static} + ER_SLAVE_CORRUPT_EVENT : int
          {static} + ER_LOAD_DATA_INVALID_COLUMN : int
          {static} + ER_LOG_PURGE_NO_FILE : int
          {static} + ER_XA_RBTIMEOUT : int
          {static} + ER_XA_RBDEADLOCK : int
          {static} + ER_NEED_REPREPARE : int
          {static} + ER_DELAYED_NOT_SUPPORTED : int
          {static} + WARN_NO_MASTER_INFO : int
          {static} + WARN_OPTION_IGNORED : int
          {static} + WARN_PLUGIN_DELETE_BUILTIN : int
          {static} + WARN_PLUGIN_BUSY : int
          {static} + ER_VARIABLE_IS_READONLY : int
          {static} + ER_WARN_ENGINE_TRANSACTION_ROLLBACK : int
          {static} + ER_SLAVE_HEARTBEAT_FAILURE : int
          {static} + ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE : int
          {static} + ER_NDB_REPLICATION_SCHEMA_ERROR : int
          {static} + ER_CONFLICT_FN_PARSE_ERROR : int
          {static} + ER_EXCEPTIONS_WRITE_ERROR : int
          {static} + ER_TOO_LONG_TABLE_COMMENT : int
          {static} + ER_TOO_LONG_FIELD_COMMENT : int
          {static} + ER_FUNC_INEXISTENT_NAME_COLLISION : int
          {static} + ER_DATABASE_NAME : int
          {static} + ER_TABLE_NAME : int
          {static} + ER_PARTITION_NAME : int
          {static} + ER_SUBPARTITION_NAME : int
          {static} + ER_TEMPORARY_NAME : int
          {static} + ER_RENAMED_NAME : int
          {static} + ER_TOO_MANY_CONCURRENT_TRXS : int
          {static} + WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED : int
          {static} + ER_DEBUG_SYNC_TIMEOUT : int
          {static} + ER_DEBUG_SYNC_HIT_LIMIT : int
          {static} + ER_DUP_SIGNAL_SET : int
          {static} + ER_SIGNAL_WARN : int
          {static} + ER_SIGNAL_NOT_FOUND : int
          {static} + ER_SIGNAL_EXCEPTION : int
          {static} + ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER : int
          {static} + ER_SIGNAL_BAD_CONDITION_TYPE : int
          {static} + WARN_COND_ITEM_TRUNCATED : int
          {static} + ER_COND_ITEM_TOO_LONG : int
          {static} + ER_UNKNOWN_LOCALE : int
          {static} + ER_SLAVE_IGNORE_SERVER_IDS : int
          {static} + ER_QUERY_CACHE_DISABLED : int
          {static} + ER_SAME_NAME_PARTITION_FIELD : int
          {static} + ER_PARTITION_COLUMN_LIST_ERROR : int
          {static} + ER_WRONG_TYPE_COLUMN_VALUE_ERROR : int
          {static} + ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR : int
          {static} + ER_MAXVALUE_IN_VALUES_IN : int
          {static} + ER_TOO_MANY_VALUES_ERROR : int
          {static} + ER_ROW_SINGLE_PARTITION_FIELD_ERROR : int
          {static} + ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD : int
          {static} + ER_PARTITION_FIELDS_TOO_LONG : int
          {static} + ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE : int
          {static} + ER_BINLOG_ROW_MODE_AND_STMT_ENGINE : int
          {static} + ER_BINLOG_UNSAFE_AND_STMT_ENGINE : int
          {static} + ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE : int
          {static} + ER_BINLOG_STMT_MODE_AND_ROW_ENGINE : int
          {static} + ER_BINLOG_ROW_INJECTION_AND_STMT_MODE : int
          {static} + ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE : int
          {static} + ER_BINLOG_UNSAFE_LIMIT : int
          {static} + ER_BINLOG_UNSAFE_INSERT_DELAYED : int
          {static} + ER_BINLOG_UNSAFE_SYSTEM_TABLE : int
          {static} + ER_BINLOG_UNSAFE_AUTOINC_COLUMNS : int
          {static} + ER_BINLOG_UNSAFE_UDF : int
          {static} + ER_BINLOG_UNSAFE_SYSTEM_VARIABLE : int
          {static} + ER_BINLOG_UNSAFE_SYSTEM_FUNCTION : int
          {static} + ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS : int
          {static} + ER_MESSAGE_AND_STATEMENT : int
          {static} + ER_SLAVE_CONVERSION_FAILED : int
          {static} + ER_SLAVE_CANT_CREATE_CONVERSION : int
          {static} + ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT : int
          {static} + ER_PATH_LENGTH : int
          {static} + ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT : int
          {static} + ER_WRONG_NATIVE_TABLE_STRUCTURE : int
          {static} + ER_WRONG_PERFSCHEMA_USAGE : int
          {static} + ER_WARN_I_S_SKIPPED_TABLE : int
          {static} + ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT : int
          {static} + ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT : int
          {static} + ER_SPATIAL_MUST_HAVE_GEOM_COL : int
          {static} + ER_TOO_LONG_INDEX_COMMENT : int
          {static} + ER_LOCK_ABORTED : int
          {static} + ER_DATA_OUT_OF_RANGE : int
          {static} + ER_WRONG_SPVAR_TYPE_IN_LIMIT : int
          {static} + ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE : int
          {static} + ER_BINLOG_UNSAFE_MIXED_STATEMENT : int
          {static} + ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN : int
          {static} + ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN : int
          {static} + ER_FAILED_READ_FROM_PAR_FILE : int
          {static} + ER_VALUES_IS_NOT_INT_TYPE_ERROR : int
          {static} + ER_ACCESS_DENIED_NO_PASSWORD_ERROR : int
          {static} + ER_SET_PASSWORD_AUTH_PLUGIN : int
          {static} + ER_GRANT_PLUGIN_USER_EXISTS : int
          {static} + ER_TRUNCATE_ILLEGAL_FK : int
          {static} + ER_PLUGIN_IS_PERMANENT : int
          {static} + ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN : int
          {static} + ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX : int
          {static} + ER_STMT_CACHE_FULL : int
          {static} + ER_MULTI_UPDATE_KEY_CONFLICT : int
          {static} + ER_TABLE_NEEDS_REBUILD : int
          {static} + WARN_OPTION_BELOW_LIMIT : int
          {static} + ER_INDEX_COLUMN_TOO_LONG : int
          {static} + ER_ERROR_IN_TRIGGER_BODY : int
          {static} + ER_ERROR_IN_UNKNOWN_TRIGGER_BODY : int
          {static} + ER_INDEX_CORRUPT : int
          {static} + ER_UNDO_RECORD_TOO_BIG : int
          {static} + ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT : int
          {static} + ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE : int
          {static} + ER_BINLOG_UNSAFE_REPLACE_SELECT : int
          {static} + ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT : int
          {static} + ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT : int
          {static} + ER_BINLOG_UNSAFE_UPDATE_IGNORE : int
          {static} + ER_PLUGIN_NO_UNINSTALL : int
          {static} + ER_PLUGIN_NO_INSTALL : int
          {static} + ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT : int
          {static} + ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC : int
          {static} + ER_BINLOG_UNSAFE_INSERT_TWO_KEYS : int
          {static} + ER_TABLE_IN_FK_CHECK : int
          {static} + ER_UNSUPPORTED_ENGINE : int
          {static} + ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST : int
          {static} + ER_CANNOT_LOAD_FROM_TABLE_V2 : int
          {static} + ER_MASTER_DELAY_VALUE_OUT_OF_RANGE : int
          {static} + ER_ONLY_FD_AND_RBR_EVENTS_ALLOWED_IN_BINLOG_STATEMENT : int
          {static} + ER_PARTITION_EXCHANGE_DIFFERENT_OPTION : int
          {static} + ER_PARTITION_EXCHANGE_PART_TABLE : int
          {static} + ER_PARTITION_EXCHANGE_TEMP_TABLE : int
          {static} + ER_PARTITION_INSTEAD_OF_SUBPARTITION : int
          {static} + ER_UNKNOWN_PARTITION : int
          {static} + ER_TABLES_DIFFERENT_METADATA : int
          {static} + ER_ROW_DOES_NOT_MATCH_PARTITION : int
          {static} + ER_BINLOG_CACHE_SIZE_GREATER_THAN_MAX : int
          {static} + ER_WARN_INDEX_NOT_APPLICABLE : int
          {static} + ER_PARTITION_EXCHANGE_FOREIGN_KEY : int
          {static} + ER_NO_SUCH_KEY_VALUE : int
          {static} + ER_RPL_INFO_DATA_TOO_LONG : int
          {static} + ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE : int
          {static} + ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE : int
          {static} + ER_BINLOG_STMT_CACHE_SIZE_GREATER_THAN_MAX : int
          {static} + ER_CANT_UPDATE_TABLE_IN_CREATE_TABLE_SELECT : int
          {static} + ER_PARTITION_CLAUSE_ON_NONPARTITIONED : int
          {static} + ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET : int
          {static} + ER_NO_SUCH_PARTITION__UNUSED : int
          {static} + ER_CHANGE_RPL_INFO_REPOSITORY_FAILURE : int
          {static} + ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_CREATED_TEMP_TABLE : int
          {static} + ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_DROPPED_TEMP_TABLE : int
          {static} + ER_MTS_FEATURE_IS_NOT_SUPPORTED : int
          {static} + ER_MTS_UPDATED_DBS_GREATER_MAX : int
          {static} + ER_MTS_CANT_PARALLEL : int
          {static} + ER_MTS_INCONSISTENT_DATA : int
          {static} + ER_FULLTEXT_NOT_SUPPORTED_WITH_PARTITIONING : int
          {static} + ER_DA_INVALID_CONDITION_NUMBER : int
          {static} + ER_INSECURE_PLAIN_TEXT : int
          {static} + ER_INSECURE_CHANGE_MASTER : int
          {static} + ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO : int
          {static} + ER_FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO : int
          {static} + ER_SQLTHREAD_WITH_SECURE_SLAVE : int
          {static} + ER_TABLE_HAS_NO_FT : int
          {static} + ER_VARIABLE_NOT_SETTABLE_IN_SF_OR_TRIGGER : int
          {static} + ER_VARIABLE_NOT_SETTABLE_IN_TRANSACTION : int
          {static} + ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST : int
          {static} + ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION_WHEN_GTID_NEXT_LIST_IS_NULL : int
          {static} + ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION : int
          {static} + ER_GTID_NEXT_CANT_BE_AUTOMATIC_IF_GTID_NEXT_LIST_IS_NON_NULL : int
          {static} + ER_SKIPPING_LOGGED_TRANSACTION : int
          {static} + ER_MALFORMED_GTID_SET_SPECIFICATION : int
          {static} + ER_MALFORMED_GTID_SET_ENCODING : int
          {static} + ER_MALFORMED_GTID_SPECIFICATION : int
          {static} + ER_GNO_EXHAUSTED : int
          {static} + ER_BAD_SLAVE_AUTO_POSITION : int
          {static} + ER_AUTO_POSITION_REQUIRES_GTID_MODE_ON : int
          {static} + ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET : int
          {static} + ER_GTID_MODE_2_OR_3_REQUIRES_ENFORCE_GTID_CONSISTENCY_ON : int
          {static} + ER_GTID_MODE_REQUIRES_BINLOG : int
          {static} + ER_CANT_SET_GTID_NEXT_TO_GTID_WHEN_GTID_MODE_IS_OFF : int
          {static} + ER_CANT_SET_GTID_NEXT_TO_ANONYMOUS_WHEN_GTID_MODE_IS_ON : int
          {static} + ER_CANT_SET_GTID_NEXT_LIST_TO_NON_NULL_WHEN_GTID_MODE_IS_OFF : int
          {static} + ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF : int
          {static} + ER_GTID_UNSAFE_NON_TRANSACTIONAL_TABLE : int
          {static} + ER_GTID_UNSAFE_CREATE_SELECT : int
          {static} + ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION : int
          {static} + ER_GTID_MODE_CAN_ONLY_CHANGE_ONE_STEP_AT_A_TIME : int
          {static} + ER_MASTER_HAS_PURGED_REQUIRED_GTIDS : int
          {static} + ER_CANT_SET_GTID_NEXT_WHEN_OWNING_GTID : int
          {static} + ER_UNKNOWN_EXPLAIN_FORMAT : int
          {static} + ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION : int
          {static} + ER_TOO_LONG_TABLE_PARTITION_COMMENT : int
          {static} + ER_SLAVE_CONFIGURATION : int
          {static} + ER_INNODB_FT_LIMIT : int
          {static} + ER_INNODB_NO_FT_TEMP_TABLE : int
          {static} + ER_INNODB_FT_WRONG_DOCID_COLUMN : int
          {static} + ER_INNODB_FT_WRONG_DOCID_INDEX : int
          {static} + ER_INNODB_ONLINE_LOG_TOO_BIG : int
          {static} + ER_UNKNOWN_ALTER_ALGORITHM : int
          {static} + ER_UNKNOWN_ALTER_LOCK : int
          {static} + ER_MTS_CHANGE_MASTER_CANT_RUN_WITH_GAPS : int
          {static} + ER_MTS_RECOVERY_FAILURE : int
          {static} + ER_MTS_RESET_WORKERS : int
          {static} + ER_COL_COUNT_DOESNT_MATCH_CORRUPTED_V2 : int
          {static} + ER_SLAVE_SILENT_RETRY_TRANSACTION : int
          {static} + ER_DISCARD_FK_CHECKS_RUNNING : int
          {static} + ER_TABLE_SCHEMA_MISMATCH : int
          {static} + ER_TABLE_IN_SYSTEM_TABLESPACE : int
          {static} + ER_IO_READ_ERROR : int
          {static} + ER_IO_WRITE_ERROR : int
          {static} + ER_TABLESPACE_MISSING : int
          {static} + ER_TABLESPACE_EXISTS : int
          {static} + ER_TABLESPACE_DISCARDED : int
          {static} + ER_INTERNAL_ERROR : int
          {static} + ER_INNODB_IMPORT_ERROR : int
          {static} + ER_INNODB_INDEX_CORRUPT : int
          {static} + ER_INVALID_YEAR_COLUMN_LENGTH : int
          {static} + ER_NOT_VALID_PASSWORD : int
          {static} + ER_MUST_CHANGE_PASSWORD : int
          {static} + ER_FK_NO_INDEX_CHILD : int
          {static} + ER_FK_NO_INDEX_PARENT : int
          {static} + ER_FK_FAIL_ADD_SYSTEM : int
          {static} + ER_FK_CANNOT_OPEN_PARENT : int
          {static} + ER_FK_INCORRECT_OPTION : int
          {static} + ER_FK_DUP_NAME : int
          {static} + ER_PASSWORD_FORMAT : int
          {static} + ER_FK_COLUMN_CANNOT_DROP : int
          {static} + ER_FK_COLUMN_CANNOT_DROP_CHILD : int
          {static} + ER_FK_COLUMN_NOT_NULL : int
          {static} + ER_DUP_INDEX : int
          {static} + ER_FK_COLUMN_CANNOT_CHANGE : int
          {static} + ER_FK_COLUMN_CANNOT_CHANGE_CHILD : int
          {static} + ER_FK_CANNOT_DELETE_PARENT : int
          {static} + ER_MALFORMED_PACKET : int
          {static} + ER_READ_ONLY_MODE : int
          {static} + ER_GTID_NEXT_TYPE_UNDEFINED_GROUP : int
          {static} + ER_VARIABLE_NOT_SETTABLE_IN_SP : int
          {static} + ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF : int
          {static} + ER_CANT_SET_GTID_PURGED_WHEN_GTID_EXECUTED_IS_NOT_EMPTY : int
          {static} + ER_CANT_SET_GTID_PURGED_WHEN_OWNED_GTIDS_IS_NOT_EMPTY : int
          {static} + ER_GTID_PURGED_WAS_CHANGED : int
          {static} + ER_GTID_EXECUTED_WAS_CHANGED : int
          {static} + ER_BINLOG_STMT_MODE_AND_NO_REPL_TABLES : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COPY : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_PARTITION : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_RENAME : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COLUMN_TYPE : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_CHECK : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_IGNORE : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOPK : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_AUTOINC : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_HIDDEN_FTS : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_CHANGE_FTS : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FTS : int
          {static} + ER_SQL_SLAVE_SKIP_COUNTER_NOT_SETTABLE_IN_GTID_MODE : int
          {static} + ER_DUP_UNKNOWN_IN_INDEX : int
          {static} + ER_IDENT_CAUSES_TOO_LONG_PATH : int
          {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOT_NULL : int
          {static} + ER_MUST_CHANGE_PASSWORD_LOGIN : int
          {static} + ER_ROW_IN_WRONG_PARTITION : int
          {static} + ER_MTS_EVENT_BIGGER_PENDING_JOBS_SIZE_MAX : int
          {static} + ER_INNODB_NO_FT_USES_PARSER : int
          {static} + ER_BINLOG_LOGICAL_CORRUPTION : int
          {static} + ER_WARN_PURGE_LOG_IN_USE : int
          {static} + ER_WARN_PURGE_LOG_IS_ACTIVE : int
          {static} + ER_AUTO_INCREMENT_CONFLICT : int
          {static} + WARN_ON_BLOCKHOLE_IN_RBR : int
          {static} + ER_SLAVE_MI_INIT_REPOSITORY : int
          {static} + ER_SLAVE_RLI_INIT_REPOSITORY : int
          {static} + ER_ACCESS_DENIED_CHANGE_USER_ERROR : int
          {static} + ER_INNODB_READ_ONLY : int
          {static} + ER_STOP_SLAVE_SQL_THREAD_TIMEOUT : int
          {static} + ER_STOP_SLAVE_IO_THREAD_TIMEOUT : int
          {static} + ER_TABLE_CORRUPT : int
          {static} + ER_TEMP_FILE_WRITE_FAILURE : int
          {static} + ER_INNODB_FT_AUX_NOT_HEX_ID : int
          {static} + ER_OLD_TEMPORALS_UPGRADED : int
          {static} + ER_INNODB_FORCED_RECOVERY : int
          {static} + ER_AES_INVALID_IV : int
          {static} + ER_FILE_CORRUPT : int
          {static} + ER_ERROR_ON_MASTER : int
          {static} + ER_INCONSISTENT_ERROR : int
          {static} + ER_STORAGE_ENGINE_NOT_LOADED : int
          {static} + ER_GET_STACKED_DA_WITHOUT_ACTIVE_HANDLER : int
          {static} + ER_WARN_LEGACY_SYNTAX_CONVERTED : int
          {static} + ER_BINLOG_UNSAFE_FULLTEXT_PLUGIN : int
          {static} + ER_CANNOT_DISCARD_TEMPORARY_TABLE : int
          {static} + ER_FK_DEPTH_EXCEEDED : int
          {static} + ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE_V2 : int
          {static} + ER_WARN_TRIGGER_DOESNT_HAVE_CREATED : int
          {static} + ER_REFERENCED_TRG_DOES_NOT_EXIST : int
          {static} + ER_EXPLAIN_NOT_SUPPORTED : int
          {static} + ER_INVALID_FIELD_SIZE : int
          {static} + ER_MISSING_HA_CREATE_OPTION : int
          {static} + ER_ENGINE_OUT_OF_MEMORY : int
          {static} + ER_PASSWORD_EXPIRE_ANONYMOUS_USER : int
          {static} + ER_SLAVE_SQL_THREAD_MUST_STOP : int
          {static} + ER_NO_FT_MATERIALIZED_SUBQUERY : int
          {static} + ER_INNODB_UNDO_LOG_FULL : int
          {static} + ER_INVALID_ARGUMENT_FOR_LOGARITHM : int
          {static} + ER_SLAVE_IO_THREAD_MUST_STOP : int
          {static} + ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO : int
          {static} + ER_WARN_ONLY_MASTER_LOG_FILE_NO_POS : int
          {static} + ER_QUERY_TIMEOUT : int
          {static} + ER_NON_RO_SELECT_DISABLE_TIMER : int
          {static} + ER_DUP_LIST_ENTRY : int
          {static} + ER_SQL_MODE_NO_EFFECT : int
          {static} + ERROR_CODE_NULL_LOAD_BALANCED_CONNECTION : int
          {static} + ERROR_CODE_REPLICATION_CONNECTION_WITH_NO_HOSTS : int
          - MysqlErrorNumbers()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class MysqlIO {
          {static} - CODE_PAGE_1252 : String
          {static} # NULL_LENGTH : int
          {static} # COMP_HEADER_LENGTH : int
          {static} # MIN_COMPRESS_LEN : int
          {static} # HEADER_LENGTH : int
          {static} # AUTH_411_OVERHEAD : int
          {static} + SEED_LENGTH : int
          {static} - maxBufferSize : int
          {static} - NONE : String
          {static} - CLIENT_LONG_PASSWORD : int
          {static} - CLIENT_FOUND_ROWS : int
          {static} - CLIENT_LONG_FLAG : int
          {static} # CLIENT_CONNECT_WITH_DB : int
          {static} - CLIENT_COMPRESS : int
          {static} - CLIENT_LOCAL_FILES : int
          {static} - CLIENT_PROTOCOL_41 : int
          {static} - CLIENT_INTERACTIVE : int
          {static} # CLIENT_SSL : int
          {static} - CLIENT_TRANSACTIONS : int
          {static} # CLIENT_RESERVED : int
          {static} # CLIENT_SECURE_CONNECTION : int
          {static} - CLIENT_MULTI_STATEMENTS : int
          {static} - CLIENT_MULTI_RESULTS : int
          {static} - CLIENT_PLUGIN_AUTH : int
          {static} - CLIENT_CONNECT_ATTRS : int
          {static} - CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA : int
          {static} - CLIENT_CAN_HANDLE_EXPIRED_PASSWORD : int
          {static} - CLIENT_SESSION_TRACK : int
          {static} - CLIENT_DEPRECATE_EOF : int
          {static} - SERVER_STATUS_IN_TRANS : int
          {static} - SERVER_STATUS_AUTOCOMMIT : int
          {static} ~ SERVER_MORE_RESULTS_EXISTS : int
          {static} - SERVER_QUERY_NO_GOOD_INDEX_USED : int
          {static} - SERVER_QUERY_NO_INDEX_USED : int
          {static} - SERVER_QUERY_WAS_SLOW : int
          {static} - SERVER_STATUS_CURSOR_EXISTS : int
          {static} - FALSE_SCRAMBLE : String
          {static} # MAX_QUERY_SIZE_TO_LOG : int
          {static} # MAX_QUERY_SIZE_TO_EXPLAIN : int
          {static} # INITIAL_PACKET_SIZE : int
          {static} - jvmPlatformCharset : String
          {static} # ZERO_DATE_VALUE_MARKER : String
          {static} # ZERO_DATETIME_VALUE_MARKER : String
          {static} - EXPLAINABLE_STATEMENT : String
          {static} - EXPLAINABLE_STATEMENT_EXTENSION : String[]
          {static} - MAX_PACKET_DUMP_LENGTH : int
          - packetSequenceReset : boolean
          # serverCharsetIndex : int
          - reusablePacket : Buffer
          - sendPacket : Buffer
          - sharedSendPacket : Buffer
          # mysqlOutput : BufferedOutputStream
          # connection : MySQLConnection
          - deflater : Deflater
          # mysqlInput : InputStream
          - packetDebugRingBuffer : LinkedList<StringBuilder>
          - streamingData : RowData
          + mysqlConnection : Socket
          # socketFactory : SocketFactory
          - loadFileBufRef : SoftReference<Buffer>
          - splitBufRef : SoftReference<Buffer>
          - compressBufRef : SoftReference<Buffer>
          # host : String
          # seed : String
          - serverVersion : String
          - socketFactoryClassName : String
          - packetHeaderBuf : byte[]
          - colDecimalNeedsBump : boolean
          - hadWarnings : boolean
          - has41NewNewProt : boolean
          - hasLongColumnInfo : boolean
          - isInteractiveClient : boolean
          - logSlowQueries : boolean
          - platformDbCharsetMatches : boolean
          - profileSql : boolean
          - queryBadIndexUsed : boolean
          - queryNoIndexUsed : boolean
          - serverQueryWasSlow : boolean
          - use41Extensions : boolean
          - useCompression : boolean
          - useNewLargePackets : boolean
          - useNewUpdateCounts : boolean
          - packetSequence : byte
          - compressedPacketSequence : byte
          - readPacketSequence : byte
          - checkPacketSequence : boolean
          - protocolVersion : byte
          - maxAllowedPacket : int
          # maxThreeBytes : int
          # port : int
          # serverCapabilities : int
          - serverMajorVersion : int
          - serverMinorVersion : int
          - oldServerStatus : int
          - serverStatus : int
          - serverSubMinorVersion : int
          - warningCount : int
          # clientParam : long
          # lastPacketSentTimeMs : long
          # lastPacketReceivedTimeMs : long
          - traceProtocol : boolean
          - enablePacketDebug : boolean
          - useConnectWithDb : boolean
          - needToGrabQueryFromPacket : boolean
          - autoGenerateTestcaseScript : boolean
          - threadId : long
          - useNanosForElapsedTime : boolean
          - slowQueryThreshold : long
          - queryTimingUnits : String
          - useDirectRowUnpack : boolean
          - useBufferRowSizeThreshold : int
          - commandCount : int
          - statementInterceptors : List<StatementInterceptorV2>
          - exceptionInterceptor : ExceptionInterceptor
          - authPluginDataLength : int
          - authenticationPlugins : Map<String, AuthenticationPlugin>
          - disabledAuthenticationPlugins : List<String>
          - clientDefaultAuthenticationPlugin : String
          - clientDefaultAuthenticationPluginName : String
          - serverDefaultAuthenticationPluginName : String
          - statementExecutionDepth : int
          - useAutoSlowLog : boolean
          + MysqlIO()
          + hasLongColumnInfo()
          # isDataAvailable()
          # getLastPacketSentTimeMs()
          # getLastPacketReceivedTimeMs()
          # getResultSet()
          # getNetworkResources()
          # forceClose()
          # skipPacket()
          # readPacket()
          # unpackField()
          - adjustStartForFieldLength()
          # isSetNeededForAutoCommitMode()
          # inTransactionOnServer()
          # changeUser()
          # checkErrorPacket()
          # checkForCharsetMismatch()
          # clearInputStream()
          # resetReadPacketSequence()
          # dumpPacketRingBuffer()
          # explainSlowQuery()
          {static} ~ getMaxBuf()
          ~ getServerMajorVersion()
          ~ getServerMinorVersion()
          ~ getServerSubMinorVersion()
          ~ getServerVersion()
          ~ doHandshake()
          - loadAuthenticationPlugins()
          - addAuthenticationPlugin()
          - getAuthenticationPlugin()
          - checkConfidentiality()
          - proceedHandshakeWithPluggableAuthentication()
          - getConnectionAttributesAsProperties()
          - sendConnectionAttributes()
          - changeDatabaseTo()
          ~ nextRow()
          ~ nextRowFast()
          ~ quit()
          ~ getSharedSendPacket()
          ~ closeStreamer()
          ~ tackOnMoreStreamingResults()
          ~ readAllResults()
          ~ resetMaxBuf()
          ~ sendCommand()
          # shouldIntercept()
          ~ sqlQueryDirect()
          ~ invokeStatementInterceptorsPre()
          ~ invokeStatementInterceptorsPost()
          - calculateSlowQueryThreshold()
          # getCurrentTimeNanosOrMillis()
          ~ getHost()
          ~ isVersion()
          ~ versionMeetsMinimum()
          {static} - getPacketDumpToLog()
          - readFully()
          - skipFully()
          - skipLengthEncodedInteger()
          # readResultsForQueryOrUpdate()
          - alignPacketSize()
          - buildResultSetWithRows()
          - buildResultSetWithUpdates()
          - setServerSlowQueryFlags()
          - checkForOutstandingStreamingData()
          - compressPacket()
          - readServerStatusForResultSets()
          - createSocketFactory()
          - enqueuePacketForDebugging()
          - readSingleRowSet()
          {static} + useBufferRowExplicit()
          - reclaimLargeReusablePacket()
          - reuseAndReadPacket()
          - reuseAndReadPacket()
          - readRemainingMultiPackets()
          - checkPacketSequencing()
          ~ enableMultiQueries()
          ~ disableMultiQueries()
          - send()
          - sendFileToServer()
          - checkErrorPacket()
          - checkErrorPacket()
          - appendDeadlockStatusInformation()
          - sendSplitPackets()
          - reclaimLargeSharedSendPacket()
          ~ hadWarnings()
          ~ scanForAndThrowDataTruncation()
          - secureAuth()
          ~ secureAuth411()
          - unpackBinaryResultSetRow()
          - extractNativeEncodedColumn()
          - unpackNativeEncodedColumn()
          - negotiateSSLConnection()
          + isSSLEstablished()
          # getServerStatus()
          # fetchRowsViaCursor()
          # getThreadId()
          # useNanosForElapsedTime()
          # getSlowQueryThreshold()
          # getQueryTimingUnits()
          # getCommandCount()
          - checkTransactionState()
          - preserveOldTransactionState()
          # setStatementInterceptors()
          # getExceptionInterceptor()
          # setSocketTimeout()
          # releaseResources()
          ~ getEncodingForHandshake()
          - appendCharsetByteForHandshake()
          + isEOFDeprecated()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class MysqlParameterMetadata {
          ~ returnSimpleMetadata : boolean
          ~ metadata : ResultSetMetaData
          ~ parameterCount : int
          - exceptionInterceptor : ExceptionInterceptor
          ~ MysqlParameterMetadata()
          ~ MysqlParameterMetadata()
          + getParameterCount()
          + isNullable()
          - checkAvailable()
          + isSigned()
          + getPrecision()
          + getScale()
          + getParameterType()
          + getParameterTypeName()
          + getParameterClassName()
          + getParameterMode()
          - checkBounds()
          + isWrapperFor()
          + unwrap()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class MysqlSavepoint {
          - savepointName : String
          - exceptionInterceptor : ExceptionInterceptor
          {static} - getUniqueId()
          ~ MysqlSavepoint()
          ~ MysqlSavepoint()
          + getSavepointId()
          + getSavepointName()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NamedPipeSocketFactory {
          {static} + NAMED_PIPE_PROP_NAME : String
          - namedPipeSocket : Socket
          + NamedPipeSocketFactory()
          + afterHandshake()
          + beforeHandshake()
          + connect()
          + isLocallyConnected()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NamedPipeSocket {
          - isClosed : boolean
          - namedPipeFile : RandomAccessFile
          ~ NamedPipeSocket()
          + close()
          + getInputStream()
          + getOutputStream()
          + isClosed()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class RandomAccessFileInputStream {
          ~ raFile : RandomAccessFile
          ~ RandomAccessFileInputStream()
          + available()
          + close()
          + read()
          + read()
          + read()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class RandomAccessFileOutputStream {
          ~ raFile : RandomAccessFile
          ~ RandomAccessFileOutputStream()
          + close()
          + write()
          + write()
          + write()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NdbLoadBalanceExceptionChecker {
          + shouldExceptionTriggerFailover()
          - checkNdbException()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NetworkResources {
          - mysqlConnection : Socket
          - mysqlInput : InputStream
          - mysqlOutput : OutputStream
          # NetworkResources()
          # forceClose()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NoSubInterceptorWrapper {
          - underlyingInterceptor : StatementInterceptorV2
          + NoSubInterceptorWrapper()
          + destroy()
          + executeTopLevelOnly()
          + init()
          + postProcess()
          + preProcess()
          + getUnderlyingInterceptor()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NonRegisteringDriver {
          {static} - ALLOWED_QUOTES : String
          {static} - REPLICATION_URL_PREFIX : String
          {static} - URL_PREFIX : String
          {static} - MXJ_URL_PREFIX : String
          {static} + LOADBALANCE_URL_PREFIX : String
          {static} # connectionPhantomRefs : ConcurrentHashMap<ConnectionPhantomReference, ConnectionPhantomReference>
          {static} # refQueue : ReferenceQueue<ConnectionImpl>
          {static} + OS : String
          {static} + PLATFORM : String
          {static} + LICENSE : String
          {static} + RUNTIME_VENDOR : String
          {static} + RUNTIME_VERSION : String
          {static} + VERSION : String
          {static} + NAME : String
          {static} + DBNAME_PROPERTY_KEY : String
          {static} + DEBUG : boolean
          {static} + HOST_NAME_INDEX : int
          {static} + HOST_PROPERTY_KEY : String
          {static} + NUM_HOSTS_PROPERTY_KEY : String
          {static} + PASSWORD_PROPERTY_KEY : String
          {static} + PORT_NUMBER_INDEX : int
          {static} + PORT_PROPERTY_KEY : String
          {static} + PROPERTIES_TRANSFORM_KEY : String
          {static} + TRACE : boolean
          {static} + USE_CONFIG_PROPERTY_KEY : String
          {static} + USER_PROPERTY_KEY : String
          {static} + PROTOCOL_PROPERTY_KEY : String
          {static} + PATH_PROPERTY_KEY : String
          {static} + getOSName()
          {static} + getPlatform()
          {static} ~ getMajorVersionInternal()
          {static} ~ getMinorVersionInternal()
          {static} # parseHostPortPair()
          {static} - safeIntParse()
          + NonRegisteringDriver()
          + acceptsURL()
          + connect()
          {static} # trackConnection()
          - connectLoadBalanced()
          - connectFailover()
          # connectReplicationConnection()
          - isHostMaster()
          + database()
          + getMajorVersion()
          + getMinorVersion()
          + getPropertyInfo()
          + host()
          + jdbcCompliant()
          + parseURL()
          + port()
          + property()
          {static} + expandHostKeyValues()
          {static} + isHostPropertiesList()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ConnectionPhantomReference {
          - io : NetworkResources
          ~ ConnectionPhantomReference()
          ~ cleanup()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NonRegisteringReplicationDriver {
          + NonRegisteringReplicationDriver()
          + connect()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NotImplemented {
          {static} ~ serialVersionUID : long
          + NotImplemented()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class NotUpdatable {
          {static} - serialVersionUID : long
          {static} + NOT_UPDATEABLE_MESSAGE : String
          + NotUpdatable()
          + NotUpdatable()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class OperationNotSupportedException {
          {static} ~ serialVersionUID : long
          ~ OperationNotSupportedException()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface OutputStreamWatcher {
          {abstract} + streamClosed()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class PacketTooBigException {
          {static} ~ serialVersionUID : long
          + PacketTooBigException()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface ParameterBindings {
          {abstract} + getArray()
          {abstract} + getAsciiStream()
          {abstract} + getBigDecimal()
          {abstract} + getBinaryStream()
          {abstract} + getBlob()
          {abstract} + getBoolean()
          {abstract} + getByte()
          {abstract} + getBytes()
          {abstract} + getCharacterStream()
          {abstract} + getClob()
          {abstract} + getDate()
          {abstract} + getDouble()
          {abstract} + getFloat()
          {abstract} + getInt()
          {abstract} + getLong()
          {abstract} + getNCharacterStream()
          {abstract} + getNClob()
          {abstract} + getObject()
          {abstract} + getRef()
          {abstract} + getShort()
          {abstract} + getString()
          {abstract} + getTime()
          {abstract} + getTimestamp()
          {abstract} + getURL()
          {abstract} + isNull()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class PerConnectionLRUFactory {
          + getInstance()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class PerConnectionLRU {
          - cacheSqlLimit : int
          - cache : LRUCache<String, ParseInfo>
          - conn : Connection
          # PerConnectionLRU()
          + get()
          + put()
          + invalidate()
          + invalidateAll()
          + invalidateAll()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class PerVmServerConfigCacheFactory {
          {static} ~ serverConfigByUrl : ConcurrentHashMap<String, Map<String, String>>
          {static} - serverConfigCache : CacheAdapter<String, Map<String, String>>
          + getInstance()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface PingTarget {
          {abstract} + doPing()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class PreparedStatement {
          {static} - JDBC_4_PSTMT_2_ARG_CTOR : Constructor<?>
          {static} - JDBC_4_PSTMT_3_ARG_CTOR : Constructor<?>
          {static} - JDBC_4_PSTMT_4_ARG_CTOR : Constructor<?>
          {static} - HEX_DIGITS : byte[]
          # batchHasPlainStatements : boolean
          - dbmd : DatabaseMetaData
          # firstCharOfStmt : char
          # isLoadDataQuery : boolean
          # isNull : boolean[]
          - isStream : boolean[]
          # numberOfExecutions : int
          # originalSql : String
          # parameterCount : int
          # parameterMetaData : MysqlParameterMetadata
          - parameterStreams : InputStream[]
          - parameterValues : byte[][]
          # parameterTypes : int[]
          - pstmtResultMetaData : ResultSetMetaData
          - staticSqlStrings : byte[][]
          - streamConvertBuf : byte[]
          - streamLengths : int[]
          - tsdf : SimpleDateFormat
          - ddf : SimpleDateFormat
          - tdf : SimpleDateFormat
          # useTrueBoolean : boolean
          # usingAnsiMode : boolean
          # batchedValuesClause : String
          - doPingInstead : boolean
          - compensateForOnDuplicateKeyUpdate : boolean
          - charsetEncoder : CharsetEncoder
          # batchCommandIndex : int
          # serverSupportsFracSecs : boolean
          # rewrittenBatchSize : int
          {static} # readFully()
          {static} # getInstance()
          {static} # getInstance()
          {static} # getInstance()
          + PreparedStatement()
          # detectFractionalSecondsSupport()
          + PreparedStatement()
          + PreparedStatement()
          + addBatch()
          + addBatch()
          + asSql()
          + asSql()
          + clearBatch()
          + clearParameters()
          - escapeblockFast()
          - escapeblockFast()
          # checkReadOnlySafeStatement()
          + execute()
          # executeBatchInternal()
          + canRewriteAsMultiValueInsertAtSqlLevel()
          # getLocationOfOnDuplicateKeyUpdate()
          # executePreparedBatchAsMultiStatement()
          - generateMultiStatementForBatch()
          # executeBatchedInserts()
          # getValuesClause()
          # computeBatchSize()
          # computeMaxParameterSetSizeAndBatchSize()
          # executeBatchSerially()
          + getDateTime()
          # executeInternal()
          + executeQuery()
          + executeUpdate()
          # executeUpdateInternal()
          # executeUpdateInternal()
          # containsOnDuplicateKeyUpdateInSQL()
          # fillSendPacket()
          # fillSendPacket()
          - checkAllParametersSet()
          # prepareBatchedInsertSQL()
          # setRetrieveGeneratedKeys()
          + getRewrittenBatchSize()
          + getNonRewrittenSql()
          + getBytesRepresentation()
          # getBytesRepresentationForBatch()
          - getDateTimePattern()
          + getMetaData()
          # isSelectQuery()
          + getParameterMetaData()
          ~ getParseInfo()
          - getSuccessor()
          - hexEscapeBlock()
          - initializeFromParseInfo()
          ~ isNull()
          - readblock()
          - readblock()
          # realClose()
          + setArray()
          + setAsciiStream()
          + setBigDecimal()
          + setBinaryStream()
          + setBlob()
          + setBlob()
          + setBoolean()
          + setByte()
          + setBytes()
          # setBytes()
          # setBytesNoEscape()
          # setBytesNoEscapeNoQuotes()
          + setCharacterStream()
          + setClob()
          + setDate()
          + setDate()
          + setDouble()
          + setFloat()
          + setInt()
          # setInternal()
          # checkBounds()
          # setInternal()
          + setLong()
          + setNull()
          + setNull()
          - setNumericObject()
          + setObject()
          + setObject()
          + setObject()
          # setOneBatchedParameterSet()
          + setRef()
          - setSerializableObject()
          + setShort()
          + setString()
          - isEscapeNeededForString()
          + setTime()
          + setTime()
          - setTimeInternal()
          + setTimestamp()
          + setTimestamp()
          # setTimestampInternal()
          - newSetTimestampInternal()
          - newSetTimeInternal()
          - newSetDateInternal()
          - doSSPSCompatibleTimezoneShift()
          + setUnicodeStream()
          + setURL()
          - streamToBytes()
          - streamToBytes()
          + toString()
          # getParameterIndexOffset()
          + setAsciiStream()
          + setAsciiStream()
          + setBinaryStream()
          + setBinaryStream()
          + setBlob()
          + setCharacterStream()
          + setCharacterStream()
          + setClob()
          + setClob()
          + setNCharacterStream()
          + setNString()
          + setNCharacterStream()
          + setNClob()
          + setNClob()
          + getParameterBindings()
          + getPreparedSql()
          + getUpdateCount()
          {static} # canRewrite()
          + executeLargeUpdate()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class BatchParams {
          + isNull : boolean[]
          + isStream : boolean[]
          + parameterStreams : InputStream[]
          + parameterStrings : byte[][]
          + streamLengths : int[]
          ~ BatchParams()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class EndPoint {
          ~ begin : int
          ~ end : int
          ~ EndPoint()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ParseInfo {
          ~ firstStmtChar : char
          ~ foundLoadData : boolean
          ~ lastUsed : long
          ~ statementLength : int
          ~ statementStartPos : int
          ~ canRewriteAsMultiValueInsert : boolean
          ~ staticSql : byte[][]
          ~ hasPlaceholders : boolean
          ~ numberOfQueries : int
          ~ isOnDuplicateKeyUpdate : boolean
          ~ locationOfOnDuplicateKeyUpdate : int
          ~ valuesClause : String
          ~ parametersInDuplicateKeyClause : boolean
          ~ charEncoding : String
          ~ ParseInfo()
          + ParseInfo()
          - buildRewriteBatchedParams()
          - extractValuesClause()
          ~ getParseInfoForBatch()
          ~ getSqlForBatch()
          ~ getSqlForBatch()
          - buildInfoForBatch()
          - ParseInfo()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface BatchVisitor {
          {abstract} + increment()
          {abstract} + decrement()
          {abstract} + append()
          {abstract} + merge()
          {abstract} + mergeWithLast()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class AppendingBatchVisitor {
          ~ statementComponents : LinkedList<byte[]>
          + append()
          + increment()
          + decrement()
          + merge()
          + mergeWithLast()
          + getStaticSqlStrings()
          + toString()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class EmulatedPreparedStatementBindings {
          - bindingsAsRs : ResultSetImpl
          - parameterIsNull : boolean[]
          ~ EmulatedPreparedStatementBindings()
          + getArray()
          + getAsciiStream()
          + getBigDecimal()
          + getBinaryStream()
          + getBlob()
          + getBoolean()
          + getByte()
          + getBytes()
          + getCharacterStream()
          + getClob()
          + getDate()
          + getDouble()
          + getFloat()
          + getInt()
          + getLong()
          + getNCharacterStream()
          + getNClob()
          + getObject()
          + getRef()
          + getShort()
          + getString()
          + getTime()
          + getTimestamp()
          + getURL()
          + isNull()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ProfilerEventHandlerFactory {
          - ownerConnection : Connection
          # log : Log
          {static} + getInstance()
          {static} + removeInstance()
          - ProfilerEventHandlerFactory()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class RandomBalanceStrategy {
          + RandomBalanceStrategy()
          + destroy()
          + init()
          + pickConnection()
          - getArrayIndexMap()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ReflectiveStatementInterceptorAdapter {
          - toProxy : StatementInterceptor
          ~ v2PostProcessMethod : Method
          + ReflectiveStatementInterceptorAdapter()
          + destroy()
          + executeTopLevelOnly()
          + init()
          + postProcess()
          + preProcess()
          {static} + getV2PostProcessMethod()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface ReplicationConnection {
          {abstract} + getConnectionGroupId()
          {abstract} + getCurrentConnection()
          {abstract} + getMasterConnection()
          {abstract} + promoteSlaveToMaster()
          {abstract} + removeMasterHost()
          {abstract} + removeMasterHost()
          {abstract} + isHostMaster()
          {abstract} + getSlavesConnection()
          {abstract} + addSlaveHost()
          {abstract} + removeSlave()
          {abstract} + removeSlave()
          {abstract} + isHostSlave()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ReplicationConnectionGroup {
          - groupName : String
          - connections : long
          - slavesAdded : long
          - slavesRemoved : long
          - slavesPromoted : long
          - activeConnections : long
          - replicationConnections : HashMap<Long, ReplicationConnection>
          - slaveHostList : Set<String>
          - isInitialized : boolean
          - masterHostList : Set<String>
          ~ ReplicationConnectionGroup()
          + getConnectionCount()
          + registerReplicationConnection()
          + getGroupName()
          + getMasterHosts()
          + getSlaveHosts()
          + addSlaveHost()
          + handleCloseConnection()
          + removeSlaveHost()
          + promoteSlaveToMaster()
          + removeMasterHost()
          + removeMasterHost()
          + getConnectionCountWithHostAsSlave()
          + getConnectionCountWithHostAsMaster()
          + getNumberOfSlavesAdded()
          + getNumberOfSlavesRemoved()
          + getNumberOfSlavePromotions()
          + getTotalConnectionCount()
          + getActiveConnectionCount()
          + toString()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ReplicationConnectionGroupManager {
          {static} - GROUP_MAP : HashMap<String, ReplicationConnectionGroup>
          {static} - mbean : ReplicationGroupManager
          {static} - hasRegisteredJmx : boolean
          {static} + getConnectionGroupInstance()
          {static} + registerJmx()
          {static} + getConnectionGroup()
          {static} + getGroupsMatching()
          {static} + addSlaveHost()
          {static} + removeSlaveHost()
          {static} + removeSlaveHost()
          {static} + promoteSlaveToMaster()
          {static} + getSlavePromotionCount()
          {static} + removeMasterHost()
          {static} + removeMasterHost()
          {static} + getRegisteredReplicationConnectionGroups()
          {static} + getNumberOfMasterPromotion()
          {static} + getConnectionCountWithHostAsSlave()
          {static} + getConnectionCountWithHostAsMaster()
          {static} + getSlaveHosts()
          {static} + getMasterHosts()
          {static} + getTotalConnectionCount()
          {static} + getActiveConnectionCount()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ReplicationConnectionProxy {
          - thisAsReplicationConnection : ReplicationConnection
          - driver : NonRegisteringDriver
          # enableJMX : boolean
          # allowMasterDownConnections : boolean
          # allowSlaveDownConnections : boolean
          # readFromMasterWhenNoSlaves : boolean
          # readFromMasterWhenNoSlavesOriginal : boolean
          # readOnly : boolean
          ~ connectionGroup : ReplicationConnectionGroup
          - connectionGroupID : long
          - masterHosts : List<String>
          - masterProperties : Properties
          # masterConnection : LoadBalancedConnection
          - slaveHosts : List<String>
          - slaveProperties : Properties
          # slavesConnection : LoadBalancedConnection
          {static} - JDBC_4_REPL_CONNECTION_CTOR : Constructor<?>
          {static} - INTERFACES_TO_PROXY : Class<?>[]
          {static} + createProxyInstance()
          - ReplicationConnectionProxy()
          ~ getNewWrapperForThisAsConnection()
          # propagateProxyDown()
          ~ shouldExceptionTriggerConnectionSwitch()
          + isMasterConnection()
          + isSlavesConnection()
          ~ pickNewConnection()
          ~ syncSessionState()
          ~ doClose()
          ~ doAbortInternal()
          ~ doAbort()
          ~ invokeMore()
          - checkConnectionCapabilityForMethod()
          + doPing()
          - initializeMasterConnection()
          - initializeSlavesConnection()
          - buildURL()
          - switchToMasterConnection()
          - switchToSlavesConnection()
          - switchToSlavesConnectionIfNecessary()
          + getCurrentConnection()
          + getConnectionGroupId()
          + getMasterConnection()
          + promoteSlaveToMaster()
          + removeMasterHost()
          + removeMasterHost()
          + removeMasterHost()
          + isHostMaster()
          + getSlavesConnection()
          + addSlaveHost()
          + removeSlave()
          + removeSlave()
          + isHostSlave()
          + setReadOnly()
          + isReadOnly()
          - resetReadFromMasterWhenNoSlaves()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ReplicationDriver {
          + ReplicationDriver()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ReplicationMySQLConnection {
          + ReplicationMySQLConnection()
          # getThisAsProxy()
          + getActiveMySQLConnection()
          + getCurrentConnection()
          + getConnectionGroupId()
          + getMasterConnection()
          - getValidatedMasterConnection()
          + promoteSlaveToMaster()
          + removeMasterHost()
          + removeMasterHost()
          + isHostMaster()
          + getSlavesConnection()
          - getValidatedSlavesConnection()
          + addSlaveHost()
          + removeSlave()
          + removeSlave()
          + isHostSlave()
          + setReadOnly()
          + isReadOnly()
          + ping()
          + changeUser()
          + setStatementComment()
          + hasSameProperties()
          + getProperties()
          + abort()
          + abortInternal()
          + getAllowMasterDownConnections()
          + setAllowMasterDownConnections()
          + getReplicationEnableJMX()
          + setReplicationEnableJMX()
          + setProxy()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ResultSetImpl {
          {static} - JDBC_4_RS_4_ARG_CTOR : Constructor<?>
          {static} - JDBC_4_RS_5_ARG_CTOR : Constructor<?>
          {static} - JDBC_4_UPD_RS_5_ARG_CTOR : Constructor<?>
          {static} # MIN_DIFF_PREC : double
          {static} # MAX_DIFF_PREC : double
          {static} ~ resultCounter : int
          # catalog : String
          # columnLabelToIndex : Map<String, Integer>
          # columnToIndexCache : Map<String, Integer>
          # columnUsed : boolean[]
          # connection : MySQLConnection
          # connectionId : long
          # currentRow : int
          # doingUpdates : boolean
          # eventSink : ProfilerEventHandler
          ~ fastDefaultCal : Calendar
          ~ fastClientCal : Calendar
          # fetchDirection : int
          # fetchSize : int
          # fields : Field[]
          # firstCharOfQuery : char
          # fullColumnNameToIndex : Map<String, Integer>
          # columnNameToIndex : Map<String, Integer>
          # hasBuiltIndexMapping : boolean
          # isBinaryEncoded : boolean
          # isClosed : boolean
          # nextResultSet : ResultSetInternalMethods
          # onInsertRow : boolean
          # owningStatement : StatementImpl
          # pointOfOrigin : String
          # profileSql : boolean
          # reallyResult : boolean
          # resultId : int
          # resultSetConcurrency : int
          # resultSetType : int
          # rowData : RowData
          # serverInfo : String
          ~ statementUsedForFetchingRows : PreparedStatement
          # thisRow : ResultSetRow
          # updateCount : long
          # updateId : long
          - useStrictFloatingPoint : boolean
          # useUsageAdvisor : boolean
          # warningChain : SQLWarning
          # wasNullFlag : boolean
          # wrapperStatement : Statement
          # retainOwningStatement : boolean
          # gmtCalendar : Calendar
          # useFastDateParsing : boolean
          - padCharsWithSpace : boolean
          - jdbcCompliantTruncationForReads : boolean
          - useFastIntParsing : boolean
          - useColumnNamesInFindColumn : boolean
          - exceptionInterceptor : ExceptionInterceptor
          {static} ~ EMPTY_SPACE : char[]
          - onValidRow : boolean
          - invalidRowReason : String
          # useLegacyDatetimeCode : boolean
          - serverTimeZoneTz : TimeZone
          {static} # convertLongToUlong()
          {static} # getInstance()
          {static} # getInstance()
          + ResultSetImpl()
          + ResultSetImpl()
          + initializeWithMetadata()
          - getFastDefaultCalendar()
          - getFastClientCalendar()
          + absolute()
          + afterLast()
          + beforeFirst()
          + buildIndexMapping()
          + cancelRowUpdates()
          # checkClosed()
          # checkColumnBounds()
          # checkRowPos()
          - setRowPositionValidity()
          + clearNextResult()
          + clearWarnings()
          + close()
          - convertToZeroWithEmptyCheck()
          - convertToZeroLiteralStringWithEmptyCheck()
          + copy()
          + redefineFieldsForDBMD()
          + populateCachedMetaData()
          + initializeFromCachedMetaData()
          + deleteRow()
          - extractStringFromNativeColumn()
          # fastDateCreate()
          # fastTimeCreate()
          # fastTimestampCreate()
          + findColumn()
          + first()
          + getArray()
          + getArray()
          + getAsciiStream()
          + getAsciiStream()
          + getBigDecimal()
          + getBigDecimal()
          + getBigDecimal()
          + getBigDecimal()
          - getBigDecimalFromString()
          + getBinaryStream()
          + getBinaryStream()
          + getBlob()
          + getBlob()
          + getBoolean()
          - byteArrayToBoolean()
          + getBoolean()
          - getBooleanFromString()
          + getByte()
          + getByte()
          - getByteFromString()
          + getBytes()
          # getBytes()
          + getBytes()
          - getBytesFromString()
          + getBytesSize()
          # getCalendarInstanceForSessionOrNew()
          + getCharacterStream()
          + getCharacterStream()
          - getCharacterStreamFromString()
          + getClob()
          + getClob()
          - getClobFromString()
          + getConcurrency()
          + getCursorName()
          + getDate()
          + getDate()
          + getDate()
          + getDate()
          - getDateFromString()
          - getDefaultTimeZone()
          + getDouble()
          + getDouble()
          - getDoubleFromString()
          # getDoubleInternal()
          # getDoubleInternal()
          + getFetchDirection()
          + getFetchSize()
          + getFirstCharOfQuery()
          + getFloat()
          + getFloat()
          - getFloatFromString()
          + getInt()
          + getInt()
          - getIntFromString()
          + getLong()
          - getLong()
          + getLong()
          - getLongFromString()
          + getMetaData()
          # getNativeArray()
          # getNativeAsciiStream()
          # getNativeBigDecimal()
          # getNativeBigDecimal()
          # getNativeBinaryStream()
          # getNativeBlob()
          {static} + arraysEqual()
          # getNativeByte()
          # getNativeByte()
          # getNativeBytes()
          # getNativeCharacterStream()
          # getNativeClob()
          - getNativeConvertToString()
          # getNativeDate()
          # getNativeDate()
          ~ getNativeDateViaParseConversion()
          # getNativeDouble()
          # getNativeFloat()
          # getNativeInt()
          # getNativeInt()
          # getNativeLong()
          # getNativeLong()
          # getNativeRef()
          # getNativeShort()
          # getNativeShort()
          # getNativeString()
          - getNativeTime()
          ~ getNativeTimeViaParseConversion()
          - getNativeTimestamp()
          ~ getNativeTimestampViaParseConversion()
          # getNativeUnicodeStream()
          # getNativeURL()
          + getNextResultSet()
          + getObject()
          - getObjectDeserializingIfNeeded()
          + getObject()
          + getObject()
          + getObject()
          + getObject()
          + getObject()
          + getObjectStoredProc()
          + getObjectStoredProc()
          + getObjectStoredProc()
          + getObjectStoredProc()
          + getRef()
          + getRef()
          + getRow()
          + getServerInfo()
          - getNumericRepresentationOfSQLBitType()
          + getShort()
          + getShort()
          - getShortFromString()
          + getStatement()
          + getString()
          + getString()
          - getStringForClob()
          # getStringInternal()
          + getTime()
          + getTime()
          + getTime()
          + getTime()
          - getTimeFromString()
          - getTimeInternal()
          + getTimestamp()
          + getTimestamp()
          + getTimestamp()
          + getTimestamp()
          - getTimestampFromString()
          - getTimestampInternal()
          + getType()
          + getUnicodeStream()
          + getUnicodeStream()
          + getUpdateCount()
          + getUpdateID()
          + getURL()
          + getURL()
          + getWarnings()
          + insertRow()
          + isAfterLast()
          + isBeforeFirst()
          + isFirst()
          + isLast()
          - issueConversionViaParsingWarning()
          + last()
          + moveToCurrentRow()
          + moveToInsertRow()
          + next()
          - parseIntAsDouble()
          - getIntWithOverflowCheck()
          - checkForIntegerTruncation()
          - parseLongAsDouble()
          - getLongWithOverflowCheck()
          - parseLongWithOverflowCheck()
          - checkForLongTruncation()
          - parseShortAsDouble()
          - parseShortWithOverflowCheck()
          + prev()
          + previous()
          + realClose()
          + isClosed()
          + reallyResult()
          + refreshRow()
          + relative()
          + rowDeleted()
          + rowInserted()
          + rowUpdated()
          # setBinaryEncoded()
          + setFetchDirection()
          + setFetchSize()
          + setFirstCharOfQuery()
          # setNextResultSet()
          + setOwningStatement()
          # setResultSetConcurrency()
          # setResultSetType()
          # setServerInfo()
          + setStatementUsedForFetchingRows()
          + setWrapperStatement()
          - throwRangeException()
          + toString()
          + updateArray()
          + updateArray()
          + updateAsciiStream()
          + updateAsciiStream()
          + updateBigDecimal()
          + updateBigDecimal()
          + updateBinaryStream()
          + updateBinaryStream()
          + updateBlob()
          + updateBlob()
          + updateBoolean()
          + updateBoolean()
          + updateByte()
          + updateByte()
          + updateBytes()
          + updateBytes()
          + updateCharacterStream()
          + updateCharacterStream()
          + updateClob()
          + updateClob()
          + updateDate()
          + updateDate()
          + updateDouble()
          + updateDouble()
          + updateFloat()
          + updateFloat()
          + updateInt()
          + updateInt()
          + updateLong()
          + updateLong()
          + updateNull()
          + updateNull()
          + updateObject()
          + updateObject()
          + updateObject()
          + updateObject()
          + updateRef()
          + updateRef()
          + updateRow()
          + updateShort()
          + updateShort()
          + updateString()
          + updateString()
          + updateTime()
          + updateTime()
          + updateTimestamp()
          + updateTimestamp()
          + wasNull()
          # getGmtCalendar()
          # getExceptionInterceptor()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface ResultSetInternalMethods {
          {abstract} + copy()
          {abstract} + reallyResult()
          {abstract} + getObjectStoredProc()
          {abstract} + getObjectStoredProc()
          {abstract} + getObjectStoredProc()
          {abstract} + getObjectStoredProc()
          {abstract} + getServerInfo()
          {abstract} + getUpdateCount()
          {abstract} + getUpdateID()
          {abstract} + realClose()
          {abstract} + isClosed()
          {abstract} + setFirstCharOfQuery()
          {abstract} + setOwningStatement()
          {abstract} + getFirstCharOfQuery()
          {abstract} + clearNextResult()
          {abstract} + getNextResultSet()
          {abstract} + setStatementUsedForFetchingRows()
          {abstract} + setWrapperStatement()
          {abstract} + buildIndexMapping()
          {abstract} + initializeWithMetadata()
          {abstract} + redefineFieldsForDBMD()
          {abstract} + populateCachedMetaData()
          {abstract} + initializeFromCachedMetaData()
          {abstract} + getBytesSize()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ResultSetMetaData {
          ~ fields : Field[]
          ~ useOldAliasBehavior : boolean
          ~ treatYearAsDate : boolean
          - exceptionInterceptor : ExceptionInterceptor
          {static} - clampedGetLength()
          {static} - isDecimalType()
          + ResultSetMetaData()
          + getCatalogName()
          + getColumnCharacterEncoding()
          + getColumnCharacterSet()
          + getColumnClassName()
          + getColumnCount()
          + getColumnDisplaySize()
          + getColumnLabel()
          + getColumnName()
          + getColumnType()
          + getColumnTypeName()
          # getField()
          + getPrecision()
          + getScale()
          + getSchemaName()
          + getTableName()
          + isAutoIncrement()
          + isCaseSensitive()
          + isCurrency()
          + isDefinitelyWritable()
          + isNullable()
          + isReadOnly()
          + isSearchable()
          + isSigned()
          + isWritable()
          + toString()
          {static} ~ getClassNameForJavaType()
          + isWrapperFor()
          + unwrap()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      abstract class ResultSetRow {
          # exceptionInterceptor : ExceptionInterceptor
          # metadata : Field[]
          # ResultSetRow()
          {abstract} + closeOpenStreams()
          {abstract} + getBinaryInputStream()
          {abstract} + getColumnValue()
          # getDateFast()
          {abstract} + getDateFast()
          {abstract} + getInt()
          {abstract} + getLong()
          # getNativeDate()
          {abstract} + getNativeDate()
          # getNativeDateTimeValue()
          {abstract} + getNativeDateTimeValue()
          # getNativeDouble()
          {abstract} + getNativeDouble()
          # getNativeFloat()
          {abstract} + getNativeFloat()
          # getNativeInt()
          {abstract} + getNativeInt()
          # getNativeLong()
          {abstract} + getNativeLong()
          # getNativeShort()
          {abstract} + getNativeShort()
          # getNativeTime()
          {abstract} + getNativeTime()
          # getNativeTimestamp()
          {abstract} + getNativeTimestamp()
          {abstract} + getReader()
          {abstract} + getString()
          # getString()
          # getTimeFast()
          {abstract} + getTimeFast()
          # getTimestampFast()
          {abstract} + getTimestampFast()
          {abstract} + isFloatingPointNumber()
          {abstract} + isNull()
          {abstract} + length()
          {abstract} + setColumnValue()
          + setMetadata()
          {abstract} + getBytesSize()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface RowData {
          {static} + RESULT_SET_SIZE_UNKNOWN : int
          {abstract} + addRow()
          {abstract} + afterLast()
          {abstract} + beforeFirst()
          {abstract} + beforeLast()
          {abstract} + close()
          {abstract} + getAt()
          {abstract} + getCurrentRowNumber()
          {abstract} + getOwner()
          {abstract} + hasNext()
          {abstract} + isAfterLast()
          {abstract} + isBeforeFirst()
          {abstract} + isDynamic()
          {abstract} + isEmpty()
          {abstract} + isFirst()
          {abstract} + isLast()
          {abstract} + moveRowRelative()
          {abstract} + next()
          {abstract} + removeRow()
          {abstract} + setCurrentRow()
          {abstract} + setOwner()
          {abstract} + size()
          {abstract} + wasEmpty()
          {abstract} + setMetadata()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class RowDataCursor {
          {static} - BEFORE_START_OF_ROWS : int
          - fetchedRows : List<ResultSetRow>
          - currentPositionInEntireResult : int
          - currentPositionInFetchedRows : int
          - owner : ResultSetImpl
          - lastRowFetched : boolean
          - metadata : Field[]
          - mysql : MysqlIO
          - statementIdOnServer : long
          - prepStmt : ServerPreparedStatement
          {static} - SERVER_STATUS_LAST_ROW_SENT : int
          - firstFetchCompleted : boolean
          - wasEmpty : boolean
          - useBufferRowExplicit : boolean
          + RowDataCursor()
          + isAfterLast()
          + getAt()
          + isBeforeFirst()
          + setCurrentRow()
          + getCurrentRowNumber()
          + isDynamic()
          + isEmpty()
          + isFirst()
          + isLast()
          + addRow()
          + afterLast()
          + beforeFirst()
          + beforeLast()
          + close()
          + hasNext()
          + moveRowRelative()
          + next()
          - fetchMoreRows()
          + removeRow()
          + size()
          # nextRecord()
          - notSupported()
          + setOwner()
          + getOwner()
          + wasEmpty()
          + setMetadata()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class RowDataDynamic {
          - columnCount : int
          - metadata : Field[]
          - index : int
          - io : MysqlIO
          - isAfterEnd : boolean
          - noMoreRows : boolean
          - isBinaryEncoded : boolean
          - nextRow : ResultSetRow
          - owner : ResultSetImpl
          - streamerClosed : boolean
          - wasEmpty : boolean
          - useBufferRowExplicit : boolean
          - moreResultsExisted : boolean
          - exceptionInterceptor : ExceptionInterceptor
          + RowDataDynamic()
          + addRow()
          + afterLast()
          + beforeFirst()
          + beforeLast()
          + close()
          + getAt()
          + getCurrentRowNumber()
          + getOwner()
          + hasNext()
          + isAfterLast()
          + isBeforeFirst()
          + isDynamic()
          + isEmpty()
          + isFirst()
          + isLast()
          + moveRowRelative()
          + next()
          - nextRecord()
          - notSupported()
          + removeRow()
          + setCurrentRow()
          + setOwner()
          + size()
          + wasEmpty()
          + setMetadata()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class RowDataStatic {
          - metadata : Field[]
          - index : int
          ~ owner : ResultSetImpl
          - rows : List<ResultSetRow>
          + RowDataStatic()
          + addRow()
          + afterLast()
          + beforeFirst()
          + beforeLast()
          + close()
          + getAt()
          + getCurrentRowNumber()
          + getOwner()
          + hasNext()
          + isAfterLast()
          + isBeforeFirst()
          + isDynamic()
          + isEmpty()
          + isFirst()
          + isLast()
          + moveRowRelative()
          + next()
          + removeRow()
          + setCurrentRow()
          + setOwner()
          + size()
          + wasEmpty()
          + setMetadata()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class SQLError {
          {static} ~ ER_WARNING_NOT_COMPLETE_ROLLBACK : int
          {static} - mysqlToSql99State : Map<Integer, String>
          {static} - mysqlToSqlState : Map<Integer, String>
          {static} + SQL_STATE_WARNING : String
          {static} + SQL_STATE_DISCONNECT_ERROR : String
          {static} + SQL_STATE_DATA_TRUNCATED : String
          {static} + SQL_STATE_PRIVILEGE_NOT_REVOKED : String
          {static} + SQL_STATE_NO_DATA : String
          {static} + SQL_STATE_WRONG_NO_OF_PARAMETERS : String
          {static} + SQL_STATE_UNABLE_TO_CONNECT_TO_DATASOURCE : String
          {static} + SQL_STATE_CONNECTION_IN_USE : String
          {static} + SQL_STATE_CONNECTION_NOT_OPEN : String
          {static} + SQL_STATE_CONNECTION_REJECTED : String
          {static} + SQL_STATE_CONNECTION_FAILURE : String
          {static} + SQL_STATE_TRANSACTION_RESOLUTION_UNKNOWN : String
          {static} + SQL_STATE_COMMUNICATION_LINK_FAILURE : String
          {static} + SQL_STATE_FEATURE_NOT_SUPPORTED : String
          {static} + SQL_STATE_CARDINALITY_VIOLATION : String
          {static} + SQL_STATE_INSERT_VALUE_LIST_NO_MATCH_COL_LIST : String
          {static} + SQL_STATE_STRING_DATA_RIGHT_TRUNCATION : String
          {static} + SQL_STATE_NUMERIC_VALUE_OUT_OF_RANGE : String
          {static} + SQL_STATE_INVALID_DATETIME_FORMAT : String
          {static} + SQL_STATE_DATETIME_FIELD_OVERFLOW : String
          {static} + SQL_STATE_DIVISION_BY_ZERO : String
          {static} + SQL_STATE_INVALID_CHARACTER_VALUE_FOR_CAST : String
          {static} + SQL_STATE_INTEGRITY_CONSTRAINT_VIOLATION : String
          {static} + SQL_STATE_INVALID_CURSOR_STATE : String
          {static} + SQL_STATE_INVALID_TRANSACTION_STATE : String
          {static} + SQL_STATE_INVALID_AUTH_SPEC : String
          {static} + SQL_STATE_INVALID_TRANSACTION_TERMINATION : String
          {static} + SQL_STATE_INVALID_CONDITION_NUMBER : String
          {static} + SQL_STATE_INVALID_CATALOG_NAME : String
          {static} + SQL_STATE_ROLLBACK_SERIALIZATION_FAILURE : String
          {static} + SQL_STATE_SYNTAX_ERROR : String
          {static} + SQL_STATE_ER_TABLE_EXISTS_ERROR : String
          {static} + SQL_STATE_BASE_TABLE_OR_VIEW_NOT_FOUND : String
          {static} + SQL_STATE_ER_NO_SUCH_INDEX : String
          {static} + SQL_STATE_ER_DUP_FIELDNAME : String
          {static} + SQL_STATE_ER_BAD_FIELD_ERROR : String
          {static} + SQL_STATE_INVALID_CONNECTION_ATTRIBUTE : String
          {static} + SQL_STATE_ERROR_IN_ROW : String
          {static} + SQL_STATE_NO_ROWS_UPDATED_OR_DELETED : String
          {static} + SQL_STATE_MORE_THAN_ONE_ROW_UPDATED_OR_DELETED : String
          {static} + SQL_STATE_RESIGNAL_WHEN_HANDLER_NOT_ACTIVE : String
          {static} + SQL_STATE_STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER : String
          {static} + SQL_STATE_CASE_NOT_FOUND_FOR_CASE_STATEMENT : String
          {static} + SQL_STATE_NULL_VALUE_NOT_ALLOWED : String
          {static} + SQL_STATE_INVALID_LOGARITHM_ARGUMENT : String
          {static} + SQL_STATE_ACTIVE_SQL_TRANSACTION : String
          {static} + SQL_STATE_READ_ONLY_SQL_TRANSACTION : String
          {static} + SQL_STATE_SRE_PROHIBITED_SQL_STATEMENT_ATTEMPTED : String
          {static} + SQL_STATE_SRE_FUNCTION_EXECUTED_NO_RETURN_STATEMENT : String
          {static} + SQL_STATE_ER_QUERY_INTERRUPTED : String
          {static} + SQL_STATE_BASE_TABLE_OR_VIEW_ALREADY_EXISTS : String
          {static} + SQL_STATE_BASE_TABLE_NOT_FOUND : String
          {static} + SQL_STATE_INDEX_ALREADY_EXISTS : String
          {static} + SQL_STATE_INDEX_NOT_FOUND : String
          {static} + SQL_STATE_COLUMN_ALREADY_EXISTS : String
          {static} + SQL_STATE_COLUMN_NOT_FOUND : String
          {static} + SQL_STATE_NO_DEFAULT_FOR_COLUMN : String
          {static} + SQL_STATE_GENERAL_ERROR : String
          {static} + SQL_STATE_MEMORY_ALLOCATION_FAILURE : String
          {static} + SQL_STATE_INVALID_COLUMN_NUMBER : String
          {static} + SQL_STATE_ILLEGAL_ARGUMENT : String
          {static} + SQL_STATE_DRIVER_NOT_CAPABLE : String
          {static} + SQL_STATE_TIMEOUT_EXPIRED : String
          {static} + SQL_STATE_CLI_SPECIFIC_CONDITION : String
          {static} + SQL_STATE_MEMORY_ALLOCATION_ERROR : String
          {static} + SQL_STATE_XA_RBROLLBACK : String
          {static} + SQL_STATE_XA_RBDEADLOCK : String
          {static} + SQL_STATE_XA_RBTIMEOUT : String
          {static} + SQL_STATE_XA_RMERR : String
          {static} + SQL_STATE_XAER_NOTA : String
          {static} + SQL_STATE_XAER_INVAL : String
          {static} + SQL_STATE_XAER_RMFAIL : String
          {static} + SQL_STATE_XAER_DUPID : String
          {static} + SQL_STATE_XAER_OUTSIDE : String
          {static} - sqlStateMessages : Map<String, String>
          {static} - DEFAULT_WAIT_TIMEOUT_SECONDS : long
          {static} - DUE_TO_TIMEOUT_FALSE : int
          {static} - DUE_TO_TIMEOUT_MAYBE : int
          {static} - DUE_TO_TIMEOUT_TRUE : int
          {static} - JDBC_4_COMMUNICATIONS_EXCEPTION_CTOR : Constructor<?>
          {static} ~ convertShowWarningsToSQLWarnings()
          {static} ~ convertShowWarningsToSQLWarnings()
          {static} + dumpSqlStatesMappingsAsXml()
          {static} ~ get()
          {static} - mysqlToSql99()
          {static} ~ mysqlToSqlState()
          {static} - mysqlToXOpen()
          {static} + createSQLException()
          {static} + createSQLException()
          {static} + createSQLException()
          {static} + createSQLException()
          {static} + createSQLException()
          {static} + createSQLException()
          {static} + createSQLException()
          {static} + createSQLException()
          {static} + createCommunicationsException()
          {static} + createLinkFailureMessageBasedOnHeuristics()
          {static} - runThroughExceptionInterceptor()
          {static} + createBatchUpdateException()
          {static} + createSQLFeatureNotSupportedException()
          {static} + createSQLFeatureNotSupportedException()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Security {
          {static} - PVERSION41_CHAR : char
          {static} - SHA1_HASH_SIZE : int
          {static} - CACHING_SHA2_DIGEST_LENGTH : int
          {static} - charVal()
          {static} ~ createKeyFromOldPassword()
          {static} ~ getBinaryPassword()
          {static} - getSaltFromPassword()
          {static} - longToHex()
          {static} ~ makeScrambledPassword()
          {static} + xorString()
          {static} ~ passwordHashStage1()
          {static} ~ passwordHashStage2()
          {static} + scramble411()
          {static} + scrambleCachingSha2()
          - Security()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class SequentialBalanceStrategy {
          - currentHostIndex : int
          + SequentialBalanceStrategy()
          + destroy()
          + init()
          + pickConnection()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ServerAffinityStrategy {
          {static} + AFFINITY_ORDER : String
          + affinityOrderedServers : String[]
          + init()
          + pickConnection()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class ServerPreparedStatement {
          {static} - JDBC_4_SPS_CTOR : Constructor<?>
          {static} # BLOB_STREAM_READ_BUF_SIZE : int
          - hasOnDuplicateKeyUpdate : boolean
          - detectedLongParameterSwitch : boolean
          - fieldCount : int
          - invalid : boolean
          - invalidationException : SQLException
          - outByteBuffer : Buffer
          - parameterBindings : BindValue[]
          - parameterFields : Field[]
          - resultFields : Field[]
          - sendTypesToServer : boolean
          - serverStatementId : long
          - stringTypeCode : int
          - serverNeedsResetBeforeEachExecution : boolean
          # isCached : boolean
          - useAutoSlowLog : boolean
          - serverTzCalendar : Calendar
          - defaultTzCalendar : Calendar
          - hasCheckedRewrite : boolean
          - canRewrite : boolean
          - locationOfOnDuplicateKeyUpdate : int
          - storeTime()
          {static} # getInstance()
          # ServerPreparedStatement()
          + addBatch()
          + asSql()
          # checkClosed()
          + clearParameters()
          - clearParametersInternal()
          # setClosed()
          + close()
          - dumpCloseForTestcase()
          - dumpExecuteForTestcase()
          - dumpPrepareForTestcase()
          # executeBatchSerially()
          # executeInternal()
          # fillSendPacket()
          # fillSendPacket()
          # getBinding()
          + getParameterBindValues()
          ~ getBytes()
          + getMetaData()
          + getParameterMetaData()
          ~ isNull()
          # realClose()
          # rePrepare()
          ~ isCursorRequired()
          - serverExecute()
          - serverLongData()
          - serverPrepare()
          - truncateQueryToLog()
          - serverResetStatement()
          + setArray()
          + setAsciiStream()
          + setBigDecimal()
          + setBinaryStream()
          + setBlob()
          + setBoolean()
          + setByte()
          + setBytes()
          + setCharacterStream()
          + setClob()
          + setDate()
          + setDate()
          + setDouble()
          + setFloat()
          + setInt()
          + setLong()
          + setNull()
          + setNull()
          + setRef()
          + setShort()
          + setString()
          + setTime()
          + setTime()
          - setTimeInternal()
          + setTimestamp()
          + setTimestamp()
          - setTimestampInternal()
          # resetToType()
          + setUnicodeStream()
          + setURL()
          - storeBinding()
          - storeDateTime412AndOlder()
          - storeDateTime()
          - storeDateTime413AndNewer()
          - getServerTzCalendar()
          - getDefaultTzCalendar()
          - storeReader()
          - storeStream()
          + toString()
          # getServerStatementId()
          + canRewriteAsMultiValueInsertAtSqlLevel()
          # getLocationOfOnDuplicateKeyUpdate()
          # isOnDuplicateKeyUpdate()
          # computeMaxParameterSetSizeAndBatchSize()
          # setOneBatchedParameterSet()
          # containsOnDuplicateKeyUpdateInSQL()
          # prepareBatchedInsertSQL()
          + setPoolable()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class BatchedBindValues {
          + batchedParameterValues : BindValue[]
          ~ BatchedBindValues()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class BindValue {
          + boundBeforeExecutionNum : long
          + bindLength : long
          + bufferType : int
          + doubleBinding : double
          + floatBinding : float
          + isLongData : boolean
          + isNull : boolean
          + isSet : boolean
          + longBinding : long
          + value : Object
          + calendar : Calendar
          ~ BindValue()
          ~ BindValue()
          ~ reset()
          + toString()
          + toString()
          ~ getBoundLength()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class SingleByteCharsetConverter {
          {static} - BYTE_RANGE : int
          {static} - allBytes : byte[]
          {static} - CONVERTER_MAP : Map<String, SingleByteCharsetConverter>
          {static} - EMPTY_BYTE_ARRAY : byte[]
          {static} - unknownCharsMap : byte[]
          - byteToChars : char[]
          - charToByteMap : byte[]
          {static} + getInstance()
          {static} + initCharset()
          {static} + toStringDefaultEncoding()
          - SingleByteCharsetConverter()
          + toBytes()
          + toBytesWrapped()
          + toBytes()
          + toBytes()
          + toBytesWrapped()
          + toBytes()
          + toString()
          + toString()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface SocketFactory {
          {abstract} + afterHandshake()
          {abstract} + beforeHandshake()
          {abstract} + connect()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface SocketMetadata {
          {abstract} + isLocallyConnected()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Helper {
          {static} + IS_LOCAL_HOSTNAME_REPLACEMENT_PROPERTY_NAME : String
          {static} + isLocallyConnected()
          {static} - findProcessHost()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class SocksProxySocketFactory {
          {static} + SOCKS_DEFAULT_PORT : int
          # createSocket()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class StandardLoadBalanceExceptionChecker {
          - sqlStateList : List<String>
          - sqlExClassList : List<Class<?>>
          + shouldExceptionTriggerFailover()
          + destroy()
          + init()
          - configureSQLStateList()
          - configureSQLExceptionSubclassList()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class StandardSocketFactory {
          {static} + TCP_NO_DELAY_PROPERTY_NAME : String
          {static} + TCP_KEEP_ALIVE_DEFAULT_VALUE : String
          {static} + TCP_KEEP_ALIVE_PROPERTY_NAME : String
          {static} + TCP_RCV_BUF_PROPERTY_NAME : String
          {static} + TCP_SND_BUF_PROPERTY_NAME : String
          {static} + TCP_TRAFFIC_CLASS_PROPERTY_NAME : String
          {static} + TCP_RCV_BUF_DEFAULT_VALUE : String
          {static} + TCP_SND_BUF_DEFAULT_VALUE : String
          {static} + TCP_TRAFFIC_CLASS_DEFAULT_VALUE : String
          {static} + TCP_NO_DELAY_DEFAULT_VALUE : String
          # host : String
          # port : int
          # rawSocket : Socket
          # loginTimeoutCountdown : int
          # loginTimeoutCheckTimestamp : long
          # socketTimeoutBackup : int
          + afterHandshake()
          + beforeHandshake()
          # createSocket()
          - configureSocket()
          + connect()
          + isLocallyConnected()
          # resetLoginTimeCountdown()
          # getRealTimeout()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface Statement {
          {abstract} + enableStreamingResults()
          {abstract} + disableStreamingResults()
          {abstract} + setLocalInfileInputStream()
          {abstract} + getLocalInfileInputStream()
          {abstract} + setPingTarget()
          {abstract} + getExceptionInterceptor()
          {abstract} + removeOpenResultSet()
          {abstract} + getOpenResultSetCount()
          {abstract} + setHoldResultsOpenOverClose()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class StatementImpl {
          {static} # PING_MARKER : String
          {static} # ON_DUPLICATE_KEY_UPDATE_CLAUSE : String[]
          # cancelTimeoutMutex : Object
          {static} ~ statementCounter : int
          {static} + USES_VARIABLES_FALSE : byte
          {static} + USES_VARIABLES_TRUE : byte
          {static} + USES_VARIABLES_UNKNOWN : byte
          # wasCancelled : boolean
          # wasCancelledByTimeout : boolean
          # batchedArgs : List<Object>
          # charConverter : SingleByteCharsetConverter
          # charEncoding : String
          # connection : MySQLConnection
          # physicalConnection : Reference<MySQLConnection>
          # connectionId : long
          # currentCatalog : String
          # doEscapeProcessing : boolean
          # eventSink : ProfilerEventHandler
          - fetchSize : int
          # isClosed : boolean
          # lastInsertId : long
          # maxFieldSize : int
          # maxRows : int
          # openResults : Set<ResultSetInternalMethods>
          # pedantic : boolean
          # pointOfOrigin : String
          # profileSQL : boolean
          # results : ResultSetInternalMethods
          # generatedKeysResults : ResultSetInternalMethods
          # resultSetConcurrency : int
          # resultSetType : int
          # statementId : int
          # timeoutInMillis : int
          # updateCount : long
          # useUsageAdvisor : boolean
          # warningChain : SQLWarning
          # clearWarningsCalled : boolean
          # holdResultsOpenOverClose : boolean
          # batchedGeneratedKeys : ArrayList<ResultSetRow>
          # retrieveGeneratedKeys : boolean
          # continueBatchOnError : boolean
          # pingTarget : PingTarget
          # useLegacyDatetimeCode : boolean
          # sendFractionalSeconds : boolean
          - exceptionInterceptor : ExceptionInterceptor
          # lastQueryIsOnDupKeyUpdate : boolean
          # statementExecuting : AtomicBoolean
          - isImplicitlyClosingResults : boolean
          - originalResultSetType : int
          - originalFetchSize : int
          - isPoolable : boolean
          - localInfileInputStream : InputStream
          # version5013OrNewer : boolean
          - closeOnCompletion : boolean
          + StatementImpl()
          + addBatch()
          + getBatchedArgs()
          + cancel()
          # checkClosed()
          # checkForDml()
          # checkNullOrEmptyQuery()
          + clearBatch()
          + clearWarnings()
          + close()
          # closeAllOpenResults()
          # implicitlyCloseAllOpenResults()
          + removeOpenResultSet()
          + getOpenResultSetCount()
          - checkAndPerformCloseOnCompletionAction()
          - createResultSetUsingServerFetch()
          # createStreamingResultSet()
          + enableStreamingResults()
          + disableStreamingResults()
          # setupStreamingTimeout()
          + execute()
          - executeInternal()
          # statementBegins()
          # resetCancelledState()
          + execute()
          + execute()
          + execute()
          + executeBatch()
          # executeBatchInternal()
          # hasDeadlockOrTimeoutRolledBackTx()
          - executeBatchUsingMultiQueries()
          # processMultiCountsAndKeys()
          # handleExceptionForBatch()
          + executeQuery()
          # doPingInstead()
          # generatePingResultSet()
          # executeSimpleNonQuery()
          + executeUpdate()
          # executeUpdateInternal()
          + executeUpdate()
          + executeUpdate()
          + executeUpdate()
          # getCalendarInstanceForSessionOrNew()
          + getConnection()
          + getFetchDirection()
          + getFetchSize()
          + getGeneratedKeys()
          # getGeneratedKeysInternal()
          # getGeneratedKeysInternal()
          # getId()
          + getLastInsertID()
          + getLongUpdateCount()
          + getMaxFieldSize()
          + getMaxRows()
          + getMoreResults()
          + getMoreResults()
          + getQueryTimeout()
          - getRecordCountFromInfo()
          + getResultSet()
          + getResultSetConcurrency()
          + getResultSetHoldability()
          # getResultSetInternal()
          + getResultSetType()
          + getUpdateCount()
          + getWarnings()
          # realClose()
          + setCursorName()
          + setEscapeProcessing()
          + setFetchDirection()
          + setFetchSize()
          + setHoldResultsOpenOverClose()
          + setMaxFieldSize()
          + setMaxRows()
          + setQueryTimeout()
          ~ setResultSetConcurrency()
          ~ setResultSetType()
          # getBatchedGeneratedKeys()
          # getBatchedGeneratedKeys()
          - useServerFetch()
          + isClosed()
          + isPoolable()
          + setPoolable()
          + isWrapperFor()
          + unwrap()
          {static} # findStartOfStatement()
          + getLocalInfileInputStream()
          + setLocalInfileInputStream()
          + setPingTarget()
          + getExceptionInterceptor()
          # containsOnDuplicateKeyInString()
          {static} # getOnDuplicateKeyLocation()
          + closeOnCompletion()
          + isCloseOnCompletion()
          + executeLargeBatch()
          + executeLargeUpdate()
          + executeLargeUpdate()
          + executeLargeUpdate()
          + executeLargeUpdate()
          + getLargeMaxRows()
          + getLargeUpdateCount()
          + setLargeMaxRows()
          ~ isCursorRequired()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class CancelTask {
          ~ caughtWhileCancelling : SQLException
          ~ origConnProps : Properties
          ~ origConnURL : String
          ~ origConnId : long
          ~ CancelTask()
          + run()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface StatementInterceptor {
          {abstract} + init()
          {abstract} + preProcess()
          {abstract} + postProcess()
          {abstract} + executeTopLevelOnly()
          {abstract} + destroy()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface StatementInterceptorV2 {
          {abstract} + init()
          {abstract} + preProcess()
          {abstract} + executeTopLevelOnly()
          {abstract} + destroy()
          {abstract} + postProcess()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface StreamingNotifiable {
          {abstract} + setWasStreamingResults()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class StringUtils {
          {static} + SEARCH_MODE__ALL : Set<SearchMode>
          {static} + SEARCH_MODE__MRK_COM_WS : Set<SearchMode>
          {static} + SEARCH_MODE__BSESC_COM_WS : Set<SearchMode>
          {static} + SEARCH_MODE__BSESC_MRK_WS : Set<SearchMode>
          {static} + SEARCH_MODE__COM_WS : Set<SearchMode>
          {static} + SEARCH_MODE__MRK_WS : Set<SearchMode>
          {static} + SEARCH_MODE__NONE : Set<SearchMode>
          {static} - NON_COMMENTS_MYSQL_VERSION_REF_LENGTH : int
          {static} - BYTE_RANGE : int
          {static} - allBytes : byte[]
          {static} - byteToChars : char[]
          {static} - toPlainStringMethod : Method
          {static} - WILD_COMPARE_MATCH : int
          {static} - WILD_COMPARE_CONTINUE_WITH_WILD : int
          {static} - WILD_COMPARE_NO_MATCH : int
          {static} ~ WILDCARD_MANY : char
          {static} ~ WILDCARD_ONE : char
          {static} ~ WILDCARD_ESCAPE : char
          {static} - charsetsByAlias : ConcurrentHashMap<String, Charset>
          {static} - platformEncoding : String
          {static} - VALID_ID_CHARS : String
          {static} - HEX_DIGITS : char[]
          {static} ~ findCharset()
          {static} + consistentToString()
          {static} + dumpAsHex()
          {static} - endsWith()
          {static} + escapeEasternUnicodeByteStream()
          {static} + firstNonWsCharUc()
          {static} + firstNonWsCharUc()
          {static} + firstAlphaCharUc()
          {static} + fixDecimalExponent()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytesWrapped()
          {static} + getInt()
          {static} + getInt()
          {static} + getLong()
          {static} + getLong()
          {static} + getShort()
          {static} + getShort()
          {static} + indexOfIgnoreCase()
          {static} + indexOfIgnoreCase()
          {static} + indexOfIgnoreCase()
          {static} + indexOfIgnoreCase()
          {static} + indexOfIgnoreCase()
          {static} - indexOfNextChar()
          {static} - isCharAtPosNotEqualIgnoreCase()
          {static} - isCharEqualIgnoreCase()
          {static} + split()
          {static} + split()
          {static} + split()
          {static} - startsWith()
          {static} + startsWithIgnoreCase()
          {static} + startsWithIgnoreCase()
          {static} + startsWithIgnoreCaseAndNonAlphaNumeric()
          {static} + startsWithIgnoreCaseAndWs()
          {static} + startsWithIgnoreCaseAndWs()
          {static} + startsWithIgnoreCaseAndWs()
          {static} + stripEnclosure()
          {static} + toAsciiString()
          {static} + toAsciiString()
          {static} + wildCompareIgnoreCase()
          {static} - wildCompareInternal()
          {static} ~ s2b()
          {static} + lastIndexOf()
          {static} + indexOf()
          {static} + isNullOrEmpty()
          {static} + stripComments()
          {static} + sanitizeProcOrFuncName()
          {static} + splitDBdotName()
          {static} + isEmptyOrWhitespaceOnly()
          {static} + escapeQuote()
          {static} + quoteIdentifier()
          {static} + quoteIdentifier()
          {static} + unQuoteIdentifier()
          {static} + indexOfQuoteDoubleAware()
          {static} + toString()
          {static} + toString()
          {static} + toString()
          {static} + toString()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + getBytes()
          {static} + isValidIdChar()
          {static} + appendAsHex()
          {static} + appendAsHex()
          {static} + getBytesNullTerminated()
          {static} + isStrictlyNumeric()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      enum SearchMode {
        ALLOW_BACKSLASH_ESCAPE
        SKIP_BETWEEN_MARKERS
        SKIP_BLOCK_COMMENTS
        SKIP_LINE_COMMENTS
        SKIP_WHITE_SPACE
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class TimeUtil {
          {static} ~ GMT_TIMEZONE : TimeZone
          {static} - DEFAULT_TIMEZONE : TimeZone
          {static} - TIME_ZONE_MAPPINGS_RESOURCE : String
          {static} - timeZoneMappings : Properties
          {static} # systemNanoTimeMethod : Method
          {static} + nanoTimeAvailable()
          {static} + getDefaultTimeZone()
          {static} + getCurrentTimeNanosOrMillis()
          {static} + changeTimezone()
          {static} + changeTimezone()
          {static} - jdbcCompliantZoneShift()
          {static} ~ fastDateCreate()
          {static} ~ fastDateCreate()
          {static} ~ fastTimeCreate()
          {static} ~ fastTimeCreate()
          {static} ~ fastTimestampCreate()
          {static} ~ fastTimestampCreate()
          {static} + getCanonicalTimezone()
          {static} - timeFormattedString()
          {static} + adjustTimestampNanosPrecision()
          {static} + formatNanos()
          {static} - loadTimeZoneMappings()
          {static} + truncateFractionalSeconds()
          {static} + getSimpleDateFormat()
          {static} + setProlepticIfNeeded()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class UpdatableResultSet {
          {static} ~ STREAM_DATA_MARKER : byte[]
          # charConverter : SingleByteCharsetConverter
          - charEncoding : String
          - defaultColumnValue : byte[][]
          - deleter : PreparedStatement
          - deleteSQL : String
          - initializedCharConverter : boolean
          # inserter : PreparedStatement
          - insertSQL : String
          - isUpdatable : boolean
          - notUpdatableReason : String
          - primaryKeyIndicies : List<Integer>
          - qualifiedAndQuotedTableName : String
          - quotedIdChar : String
          - refresher : PreparedStatement
          - refreshSQL : String
          - savedCurrentRow : ResultSetRow
          # updater : PreparedStatement
          - updateSQL : String
          - populateInserterWithDefaultValues : boolean
          - databasesUsedToTablesUsed : Map<String, Map<String, Map<String, Integer>>>
          # UpdatableResultSet()
          + absolute()
          + afterLast()
          + beforeFirst()
          + cancelRowUpdates()
          # checkRowPos()
          # checkUpdatability()
          + deleteRow()
          - setParamValue()
          - extractDefaultValues()
          + first()
          # generateStatements()
          - getColumnsToIndexMapForTableAndDB()
          - getCharConverter()
          + getConcurrency()
          - getQuotedIdChar()
          + insertRow()
          + isAfterLast()
          + isBeforeFirst()
          + isFirst()
          + isLast()
          ~ isUpdatable()
          + last()
          + moveToCurrentRow()
          + moveToInsertRow()
          + next()
          + prev()
          + previous()
          + realClose()
          + refreshRow()
          - refreshRow()
          + relative()
          - resetInserter()
          + rowDeleted()
          + rowInserted()
          + rowUpdated()
          # setResultSetConcurrency()
          - stripBinaryPrefix()
          # syncUpdate()
          + updateAsciiStream()
          + updateAsciiStream()
          + updateBigDecimal()
          + updateBigDecimal()
          + updateBinaryStream()
          + updateBinaryStream()
          + updateBlob()
          + updateBlob()
          + updateBoolean()
          + updateBoolean()
          + updateByte()
          + updateByte()
          + updateBytes()
          + updateBytes()
          + updateCharacterStream()
          + updateCharacterStream()
          + updateClob()
          + updateDate()
          + updateDate()
          + updateDouble()
          + updateDouble()
          + updateFloat()
          + updateFloat()
          + updateInt()
          + updateInt()
          + updateLong()
          + updateLong()
          + updateNull()
          + updateNull()
          + updateObject()
          + updateObject()
          # updateObjectInternal()
          + updateObject()
          + updateObject()
          + updateRow()
          + updateShort()
          + updateShort()
          + updateString()
          + updateString()
          + updateTime()
          + updateTime()
          + updateTimestamp()
          + updateTimestamp()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class Util {
          {static} - enclosingInstance : Util
          {static} - isJdbc4 : boolean
          {static} - isJdbc42 : boolean
          {static} - jvmVersion : int
          {static} - jvmUpdateNumber : int
          {static} - isColdFusion : boolean
          {static} - isJdbcInterfaceCache : ConcurrentMap<Class<?>, Boolean>
          {static} - MYSQL_JDBC_PACKAGE_ROOT : String
          {static} - implementedInterfacesCache : ConcurrentMap<Class<?>, Class<?>[]>
          {static} + isJdbc4()
          {static} + isJdbc42()
          {static} + getJVMVersion()
          {static} + jvmMeetsMinimum()
          {static} + getJVMUpdateNumber()
          {static} + isColdFusion()
          {static} + isCommunityEdition()
          {static} + isEnterpriseEdition()
          {static} + newCrypt()
          {static} + hashPre41Password()
          {static} + hashPre41Password()
          {static} ~ newHash()
          {static} + oldCrypt()
          {static} ~ oldHash()
          {static} - randomInit()
          {static} + readObject()
          {static} - rnd()
          {static} + scramble()
          {static} + stackTraceToString()
          {static} + getInstance()
          {static} + handleNewInstance()
          {static} + interfaceExists()
          {static} + resultSetToMap()
          {static} + resultSetToMap()
          {static} + resultSetToMap()
          {static} + calculateDifferences()
          {static} + loadExtensions()
          {static} + isJdbcInterface()
          {static} + isJdbcPackage()
          {static} + getImplementedInterfaces()
          {static} + secondsSinceMillis()
          {static} + truncateAndConvertToInt()
          {static} + truncateAndConvertToInt()
          {static} + getPackageName()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class RandStructcture {
          ~ maxValue : long
          ~ maxValueDbl : double
          ~ seed1 : long
          ~ seed2 : long
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class V1toV2StatementInterceptorAdapter {
          - toProxy : StatementInterceptor
          + V1toV2StatementInterceptorAdapter()
          + postProcess()
          + destroy()
          + executeTopLevelOnly()
          + init()
          + preProcess()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class WatchableOutputStream {
          - watcher : OutputStreamWatcher
          + close()
          + setWatcher()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      class WatchableWriter {
          - watcher : WriterWatcher
          + close()
          + setWatcher()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface Wrapper {
          {abstract} + unwrap()
          {abstract} + isWrapperFor()
      }
    }
  }
  

  package  {
    package com.mysql.jdbc {
      interface WriterWatcher {
          {abstract} + writerClosed()
      }
    }
  }
  

  AbandonedConnectionCleanupThread -up-|> Runnable
  BestResponseTimeBalanceStrategy -up-|> BalanceStrategy
  Blob -up-|> Blob
  Blob -up-|> OutputStreamWatcher
  BlobFromLocator -up-|> Blob
  BlobFromLocator +-down- LocatorInputStream
  CallableStatement -up-|> CallableStatement
  CallableStatement o-- CallableStatementParamInfo : paramInfo
  CallableStatement o-- CallableStatementParam : returnValueParam
  CallableStatement +-down- CallableStatementParam
  CallableStatement +-down- CallableStatementParamInfo
  CallableStatementParamInfo -up-|> ParameterMetaData
  Clob -up-|> Clob
  Clob -up-|> OutputStreamWatcher
  Clob -up-|> WriterWatcher
  Collation o-- MysqlCharset : mysqlCharset
  CommunicationsException -up-|> StreamingNotifiable
  ConnectionImpl -up-|> MySQLConnection
  ConnectionImpl +-down- ExceptionInterceptorChain
  ConnectionImpl +-down- CompoundCacheKey
  ConnectionImpl +-down- NetworkTimeoutSetter
  ExceptionInterceptorChain -up-|> ExceptionInterceptor
  NetworkTimeoutSetter -up-|> Runnable
  ConnectionPropertiesImpl -up-|> Serializable
  ConnectionPropertiesImpl -up-|> ConnectionProperties
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : allowLoadLocalInfile
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : allowMultiQueries
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : allowNanAndInf
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : allowUrlInLocalInfile
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : alwaysSendSetIsolation
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : autoClosePStmtStreams
  ConnectionPropertiesImpl o-- StringConnectionProperty : replicationConnectionGroup
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : allowMasterDownConnections
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : allowSlaveDownConnections
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : readFromMasterWhenNoSlaves
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : autoDeserialize
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : autoGenerateTestcaseScript
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : autoReconnect
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : autoReconnectForPools
  ConnectionPropertiesImpl o-- MemorySizeConnectionProperty : blobSendChunkSize
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : autoSlowLog
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : blobsAreStrings
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : functionsNeverReturnBlobs
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : cacheCallableStatements
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : cachePreparedStatements
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : cacheResultSetMetadata
  ConnectionPropertiesImpl o-- StringConnectionProperty : serverConfigCacheFactory
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : cacheServerConfiguration
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : callableStatementCacheSize
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : capitalizeTypeNames
  ConnectionPropertiesImpl o-- StringConnectionProperty : characterEncoding
  ConnectionPropertiesImpl o-- StringConnectionProperty : characterSetResults
  ConnectionPropertiesImpl o-- StringConnectionProperty : connectionAttributes
  ConnectionPropertiesImpl o-- StringConnectionProperty : clientInfoProvider
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : clobberStreamingResults
  ConnectionPropertiesImpl o-- StringConnectionProperty : clobCharacterEncoding
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : compensateOnDuplicateKeyUpdateCounts
  ConnectionPropertiesImpl o-- StringConnectionProperty : connectionCollation
  ConnectionPropertiesImpl o-- StringConnectionProperty : connectionLifecycleInterceptors
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : connectTimeout
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : continueBatchOnError
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : createDatabaseIfNotExist
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : defaultFetchSize
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : detectServerPreparedStmts
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : dontTrackOpenResources
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : dumpQueriesOnException
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : dynamicCalendars
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : elideSetAutoCommits
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : emptyStringsConvertToZero
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : emulateLocators
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : emulateUnsupportedPstmts
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : enablePacketDebug
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : enableQueryTimeouts
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : explainSlowQueries
  ConnectionPropertiesImpl o-- StringConnectionProperty : exceptionInterceptors
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : failOverReadOnly
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : gatherPerformanceMetrics
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : generateSimpleParameterMetadata
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : holdResultsOpenOverStatementClose
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : includeInnodbStatusInDeadlockExceptions
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : includeThreadDumpInDeadlockExceptions
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : includeThreadNamesAsStatementComment
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : ignoreNonTxTables
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : initialTimeout
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : isInteractiveClient
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : jdbcCompliantTruncation
  ConnectionPropertiesImpl o-- MemorySizeConnectionProperty : largeRowSizeThreshold
  ConnectionPropertiesImpl o-- StringConnectionProperty : loadBalanceStrategy
  ConnectionPropertiesImpl o-- StringConnectionProperty : serverAffinityOrder
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : loadBalanceBlacklistTimeout
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : loadBalancePingTimeout
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : loadBalanceValidateConnectionOnSwapServer
  ConnectionPropertiesImpl o-- StringConnectionProperty : loadBalanceConnectionGroup
  ConnectionPropertiesImpl o-- StringConnectionProperty : loadBalanceExceptionChecker
  ConnectionPropertiesImpl o-- StringConnectionProperty : loadBalanceSQLStateFailover
  ConnectionPropertiesImpl o-- StringConnectionProperty : loadBalanceSQLExceptionSubclassFailover
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : loadBalanceEnableJMX
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : loadBalanceHostRemovalGracePeriod
  ConnectionPropertiesImpl o-- StringConnectionProperty : loadBalanceAutoCommitStatementRegex
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : loadBalanceAutoCommitStatementThreshold
  ConnectionPropertiesImpl o-- StringConnectionProperty : localSocketAddress
  ConnectionPropertiesImpl o-- MemorySizeConnectionProperty : locatorFetchBufferSize
  ConnectionPropertiesImpl o-- StringConnectionProperty : loggerClassName
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : logSlowQueries
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : logXaCommands
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : maintainTimeStats
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : maxQuerySizeToLog
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : maxReconnects
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : retriesAllDown
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : maxRows
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : metadataCacheSize
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : netTimeoutForStreamingResults
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : noAccessToProcedureBodies
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : noDatetimeStringSync
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : noTimezoneConversionForTimeType
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : noTimezoneConversionForDateType
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : cacheDefaultTimezone
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : nullCatalogMeansCurrent
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : nullNamePatternMatchesAll
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : packetDebugBufferSize
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : padCharsWithSpace
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : paranoid
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : pedantic
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : pinGlobalTxToPhysicalConnection
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : populateInsertRowWithDefaultValues
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : preparedStatementCacheSize
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : preparedStatementCacheSqlLimit
  ConnectionPropertiesImpl o-- StringConnectionProperty : parseInfoCacheFactory
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : processEscapeCodesForPrepStmts
  ConnectionPropertiesImpl o-- StringConnectionProperty : profilerEventHandler
  ConnectionPropertiesImpl o-- StringConnectionProperty : profileSql
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : profileSQL
  ConnectionPropertiesImpl o-- StringConnectionProperty : propertiesTransform
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : queriesBeforeRetryMaster
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : queryTimeoutKillsConnection
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : reconnectAtTxEnd
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : relaxAutoCommit
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : reportMetricsIntervalMillis
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : requireSSL
  ConnectionPropertiesImpl o-- StringConnectionProperty : resourceId
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : resultSetSizeThreshold
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : retainStatementAfterResultSetClose
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : rewriteBatchedStatements
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : rollbackOnPooledClose
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : roundRobinLoadBalance
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : runningCTS13
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : secondsBeforeRetryMaster
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : selfDestructOnPingSecondsLifetime
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : selfDestructOnPingMaxOperations
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : replicationEnableJMX
  ConnectionPropertiesImpl o-- StringConnectionProperty : serverTimezone
  ConnectionPropertiesImpl o-- StringConnectionProperty : sessionVariables
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : slowQueryThresholdMillis
  ConnectionPropertiesImpl o-- LongConnectionProperty : slowQueryThresholdNanos
  ConnectionPropertiesImpl o-- StringConnectionProperty : socketFactoryClassName
  ConnectionPropertiesImpl o-- StringConnectionProperty : socksProxyHost
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : socksProxyPort
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : socketTimeout
  ConnectionPropertiesImpl o-- StringConnectionProperty : statementInterceptors
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : strictFloatingPoint
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : strictUpdates
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : overrideSupportsIntegrityEnhancementFacility
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : tcpNoDelay
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : tcpKeepAlive
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : tcpRcvBuf
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : tcpSndBuf
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : tcpTrafficClass
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : tinyInt1isBit
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : traceProtocol
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : treatUtilDateAsTimestamp
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : transformedBitIsBoolean
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useBlobToStoreUTF8OutsideBMP
  ConnectionPropertiesImpl o-- StringConnectionProperty : utf8OutsideBmpExcludedColumnNamePattern
  ConnectionPropertiesImpl o-- StringConnectionProperty : utf8OutsideBmpIncludedColumnNamePattern
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useCompression
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useColumnNamesInFindColumn
  ConnectionPropertiesImpl o-- StringConnectionProperty : useConfigs
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useCursorFetch
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useDynamicCharsetInfo
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useDirectRowUnpack
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useFastIntParsing
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useFastDateParsing
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useHostsInPrivileges
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useInformationSchema
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useJDBCCompliantTimezoneShift
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useLocalSessionState
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useLocalTransactionState
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useLegacyDatetimeCode
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : sendFractionalSeconds
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useNanosForElapsedTime
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useOldAliasMetadataBehavior
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useOldUTF8Behavior
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useOnlyServerErrorMessages
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useReadAheadInput
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useSqlStateCodes
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useSSL
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useSSPSCompatibleTimezoneShift
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useStreamLengthsInPrepStmts
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useTimezone
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useUltraDevWorkAround
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useUnbufferedInput
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useUnicode
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useUsageAdvisor
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : yearIsDateType
  ConnectionPropertiesImpl o-- StringConnectionProperty : zeroDateTimeBehavior
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useJvmCharsetConverters
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useGmtMillisForDatetimes
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : dumpMetadataOnColumnNotFound
  ConnectionPropertiesImpl o-- StringConnectionProperty : clientCertificateKeyStoreUrl
  ConnectionPropertiesImpl o-- StringConnectionProperty : trustCertificateKeyStoreUrl
  ConnectionPropertiesImpl o-- StringConnectionProperty : clientCertificateKeyStoreType
  ConnectionPropertiesImpl o-- StringConnectionProperty : clientCertificateKeyStorePassword
  ConnectionPropertiesImpl o-- StringConnectionProperty : trustCertificateKeyStoreType
  ConnectionPropertiesImpl o-- StringConnectionProperty : trustCertificateKeyStorePassword
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : verifyServerCertificate
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : useAffectedRows
  ConnectionPropertiesImpl o-- StringConnectionProperty : passwordCharacterEncoding
  ConnectionPropertiesImpl o-- IntegerConnectionProperty : maxAllowedPacket
  ConnectionPropertiesImpl o-- StringConnectionProperty : authenticationPlugins
  ConnectionPropertiesImpl o-- StringConnectionProperty : disabledAuthenticationPlugins
  ConnectionPropertiesImpl o-- StringConnectionProperty : defaultAuthenticationPlugin
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : disconnectOnExpiredPasswords
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : getProceduresReturnsFunctions
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : detectCustomCollations
  ConnectionPropertiesImpl o-- StringConnectionProperty : serverRSAPublicKeyFile
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : allowPublicKeyRetrieval
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : dontCheckOnDuplicateKeyUpdateInSQL
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : readOnlyPropagatesToServer
  ConnectionPropertiesImpl o-- StringConnectionProperty : enabledSSLCipherSuites
  ConnectionPropertiesImpl o-- StringConnectionProperty : enabledTLSProtocols
  ConnectionPropertiesImpl o-- BooleanConnectionProperty : enableEscapeProcessing
  ConnectionPropertiesImpl +-down- BooleanConnectionProperty
  ConnectionPropertiesImpl +-down- ConnectionProperty
  ConnectionPropertiesImpl +-down- IntegerConnectionProperty
  ConnectionPropertiesImpl +-down- LongConnectionProperty
  ConnectionPropertiesImpl +-down- MemorySizeConnectionProperty
  ConnectionPropertiesImpl +-down- StringConnectionProperty
  ConnectionPropertiesImpl +-down- XmlMap
  BooleanConnectionProperty -up-|> Serializable
  BooleanConnectionProperty -up-|> ConnectionProperty
  ConnectionProperty -up-|> Serializable
  IntegerConnectionProperty -up-|> Serializable
  IntegerConnectionProperty -up-|> ConnectionProperty
  LongConnectionProperty -up-|> IntegerConnectionProperty
  MemorySizeConnectionProperty -up-|> Serializable
  MemorySizeConnectionProperty -up-|> IntegerConnectionProperty
  StringConnectionProperty -up-|> Serializable
  StringConnectionProperty -up-|> ConnectionProperty
  DatabaseMetaData -up-|> DatabaseMetaData
  DatabaseMetaData +-down- IteratorWithCleanup
  DatabaseMetaData +-down- LocalAndReferencedColumns
  DatabaseMetaData +-down- ResultSetIterator
  DatabaseMetaData +-down- SingleStringIterator
  DatabaseMetaData +-down- TypeDescriptor
  DatabaseMetaData +-down- IndexMetaDataKey
  DatabaseMetaData +-down- TableMetaDataKey
  DatabaseMetaData +-down- ComparableWrapper
  DatabaseMetaData +-down- TableType
  DatabaseMetaData +-down- ProcedureType
  ResultSetIterator -up-|> IteratorWithCleanup
  SingleStringIterator -up-|> IteratorWithCleanup
  IndexMetaDataKey -up-|> Comparable
  TableMetaDataKey -up-|> Comparable
  ComparableWrapper -up-|> Comparable
  ComparableWrapper o-- K : key
  ComparableWrapper o-- V : value
  DatabaseMetaDataUsingInfoSchema +-down- JDBC4FunctionConstant
  Driver -up-|> Driver
  ExportControlled +-down- StandardSSLSocketFactory
  ExportControlled +-down- X509TrustManagerWrapper
  StandardSSLSocketFactory -up-|> SocketFactory
  StandardSSLSocketFactory -up-|> SocketMetadata
  X509TrustManagerWrapper -up-|> X509TrustManager
  FailoverConnectionProxy +-down- FailoverJdbcInterfaceProxy
  JDBC4ClientInfoProviderSP -up-|> JDBC4ClientInfoProvider
  JDBC4CommentClientInfoProvider -up-|> JDBC4ClientInfoProvider
  JDBC4Connection -up-|> JDBC4MySQLConnection
  JDBC4LoadBalancedMySQLConnection -up-|> JDBC4MySQLConnection
  JDBC4MultiHostMySQLConnection -up-|> JDBC4MySQLConnection
  JDBC4MysqlSQLXML -up-|> SQLXML
  JDBC4MysqlSQLXML o-- SimpleSaxToReader : saxToReaderConverter
  JDBC4MysqlSQLXML +-down- SimpleSaxToReader
  JDBC4NClob -up-|> NClob
  JDBC4ReplicationMySQLConnection -up-|> JDBC4MySQLConnection
  LoadBalancedAutoCommitInterceptor -up-|> StatementInterceptorV2
  LoadBalancedConnectionProxy -up-|> PingTarget
  LoadBalancedConnectionProxy +-down- NullLoadBalancedConnectionProxy
  NullLoadBalancedConnectionProxy -up-|> InvocationHandler
  LoadBalancedMySQLConnection -up-|> LoadBalancedConnection
  MultiHostConnectionProxy -up-|> InvocationHandler
  MultiHostConnectionProxy +-down- JdbcInterfaceProxy
  JdbcInterfaceProxy -up-|> InvocationHandler
  MultiHostMySQLConnection -up-|> MySQLConnection
  MysqlParameterMetadata -up-|> ParameterMetaData
  MysqlSavepoint -up-|> Savepoint
  NamedPipeSocketFactory -up-|> SocketFactory
  NamedPipeSocketFactory -up-|> SocketMetadata
  NamedPipeSocketFactory +-down- NamedPipeSocket
  NamedPipeSocketFactory +-down- RandomAccessFileInputStream
  NamedPipeSocketFactory +-down- RandomAccessFileOutputStream
  NoSubInterceptorWrapper -up-|> StatementInterceptorV2
  NonRegisteringDriver -up-|> Driver
  NonRegisteringDriver +-down- ConnectionPhantomReference
  PerConnectionLRUFactory -up-|> CacheAdapterFactory
  PerConnectionLRUFactory +-down- PerConnectionLRU
  PerConnectionLRU -up-|> CacheAdapter
  PerVmServerConfigCacheFactory -up-|> CacheAdapterFactory
  PreparedStatement -up-|> PreparedStatement
  PreparedStatement o-- ParseInfo : parseInfo
  PreparedStatement +-down- BatchParams
  PreparedStatement +-down- EndPoint
  PreparedStatement +-down- ParseInfo
  PreparedStatement +-down- BatchVisitor
  PreparedStatement +-down- AppendingBatchVisitor
  PreparedStatement +-down- EmulatedPreparedStatementBindings
  ParseInfo o-- ParseInfo : batchHead
  ParseInfo o-- ParseInfo : batchValues
  ParseInfo o-- ParseInfo : batchODKUClause
  AppendingBatchVisitor -up-|> BatchVisitor
  EmulatedPreparedStatementBindings -up-|> ParameterBindings
  RandomBalanceStrategy -up-|> BalanceStrategy
  ReflectiveStatementInterceptorAdapter -up-|> StatementInterceptorV2
  ReplicationConnectionProxy -up-|> PingTarget
  ReplicationDriver -up-|> Driver
  ReplicationMySQLConnection -up-|> ReplicationConnection
  ResultSetImpl -up-|> ResultSetInternalMethods
  ResultSetMetaData -up-|> ResultSetMetaData
  RowDataCursor -up-|> RowData
  RowDataDynamic -up-|> RowData
  RowDataStatic -up-|> RowData
  SequentialBalanceStrategy -up-|> BalanceStrategy
  ServerPreparedStatement +-down- BatchedBindValues
  ServerPreparedStatement +-down- BindValue
  SocketMetadata +-down- Helper
  StandardLoadBalanceExceptionChecker -up-|> LoadBalanceExceptionChecker
  StandardSocketFactory -up-|> SocketFactory
  StandardSocketFactory -up-|> SocketMetadata
  StatementImpl -up-|> Statement
  StatementImpl +-down- CancelTask
  CancelTask o-- StatementImpl : toCancel
  StringUtils +-down- SearchMode
  Util +-down- RandStructcture
  V1toV2StatementInterceptorAdapter -up-|> StatementInterceptorV2


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
